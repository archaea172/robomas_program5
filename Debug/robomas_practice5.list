
robomas_practice5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ab4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08006c94  08006c94  00007c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006df8  08006df8  00008084  2**0
                  CONTENTS
  4 .ARM          00000008  08006df8  08006df8  00007df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e00  08006e00  00008084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e00  08006e00  00007e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e04  08006e04  00007e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08006e08  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  20000084  08006e8c  00008084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  08006e8c  00008398  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000161e6  00000000  00000000  000080b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002912  00000000  00000000  0001e29a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001338  00000000  00000000  00020bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ef6  00000000  00000000  00021ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027c5f  00000000  00000000  00022dde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015bf1  00000000  00000000  0004aa3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102c69  00000000  00000000  0006062e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00163297  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005be0  00000000  00000000  001632dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00168ebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000084 	.word	0x20000084
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006c7c 	.word	0x08006c7c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000088 	.word	0x20000088
 800021c:	08006c7c 	.word	0x08006c7c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b96a 	b.w	8000de8 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9d08      	ldr	r5, [sp, #32]
 8000b32:	460c      	mov	r4, r1
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d14e      	bne.n	8000bd6 <__udivmoddi4+0xaa>
 8000b38:	4694      	mov	ip, r2
 8000b3a:	458c      	cmp	ip, r1
 8000b3c:	4686      	mov	lr, r0
 8000b3e:	fab2 f282 	clz	r2, r2
 8000b42:	d962      	bls.n	8000c0a <__udivmoddi4+0xde>
 8000b44:	b14a      	cbz	r2, 8000b5a <__udivmoddi4+0x2e>
 8000b46:	f1c2 0320 	rsb	r3, r2, #32
 8000b4a:	4091      	lsls	r1, r2
 8000b4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b54:	4319      	orrs	r1, r3
 8000b56:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b5a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b5e:	fa1f f68c 	uxth.w	r6, ip
 8000b62:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b66:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b6a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b72:	fb04 f106 	mul.w	r1, r4, r6
 8000b76:	4299      	cmp	r1, r3
 8000b78:	d90a      	bls.n	8000b90 <__udivmoddi4+0x64>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b82:	f080 8112 	bcs.w	8000daa <__udivmoddi4+0x27e>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 810f 	bls.w	8000daa <__udivmoddi4+0x27e>
 8000b8c:	3c02      	subs	r4, #2
 8000b8e:	4463      	add	r3, ip
 8000b90:	1a59      	subs	r1, r3, r1
 8000b92:	fa1f f38e 	uxth.w	r3, lr
 8000b96:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b9a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba2:	fb00 f606 	mul.w	r6, r0, r6
 8000ba6:	429e      	cmp	r6, r3
 8000ba8:	d90a      	bls.n	8000bc0 <__udivmoddi4+0x94>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bb2:	f080 80fc 	bcs.w	8000dae <__udivmoddi4+0x282>
 8000bb6:	429e      	cmp	r6, r3
 8000bb8:	f240 80f9 	bls.w	8000dae <__udivmoddi4+0x282>
 8000bbc:	4463      	add	r3, ip
 8000bbe:	3802      	subs	r0, #2
 8000bc0:	1b9b      	subs	r3, r3, r6
 8000bc2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	b11d      	cbz	r5, 8000bd2 <__udivmoddi4+0xa6>
 8000bca:	40d3      	lsrs	r3, r2
 8000bcc:	2200      	movs	r2, #0
 8000bce:	e9c5 3200 	strd	r3, r2, [r5]
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d905      	bls.n	8000be6 <__udivmoddi4+0xba>
 8000bda:	b10d      	cbz	r5, 8000be0 <__udivmoddi4+0xb4>
 8000bdc:	e9c5 0100 	strd	r0, r1, [r5]
 8000be0:	2100      	movs	r1, #0
 8000be2:	4608      	mov	r0, r1
 8000be4:	e7f5      	b.n	8000bd2 <__udivmoddi4+0xa6>
 8000be6:	fab3 f183 	clz	r1, r3
 8000bea:	2900      	cmp	r1, #0
 8000bec:	d146      	bne.n	8000c7c <__udivmoddi4+0x150>
 8000bee:	42a3      	cmp	r3, r4
 8000bf0:	d302      	bcc.n	8000bf8 <__udivmoddi4+0xcc>
 8000bf2:	4290      	cmp	r0, r2
 8000bf4:	f0c0 80f0 	bcc.w	8000dd8 <__udivmoddi4+0x2ac>
 8000bf8:	1a86      	subs	r6, r0, r2
 8000bfa:	eb64 0303 	sbc.w	r3, r4, r3
 8000bfe:	2001      	movs	r0, #1
 8000c00:	2d00      	cmp	r5, #0
 8000c02:	d0e6      	beq.n	8000bd2 <__udivmoddi4+0xa6>
 8000c04:	e9c5 6300 	strd	r6, r3, [r5]
 8000c08:	e7e3      	b.n	8000bd2 <__udivmoddi4+0xa6>
 8000c0a:	2a00      	cmp	r2, #0
 8000c0c:	f040 8090 	bne.w	8000d30 <__udivmoddi4+0x204>
 8000c10:	eba1 040c 	sub.w	r4, r1, ip
 8000c14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c18:	fa1f f78c 	uxth.w	r7, ip
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb08 4416 	mls	r4, r8, r6, r4
 8000c2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c2e:	fb07 f006 	mul.w	r0, r7, r6
 8000c32:	4298      	cmp	r0, r3
 8000c34:	d908      	bls.n	8000c48 <__udivmoddi4+0x11c>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c3e:	d202      	bcs.n	8000c46 <__udivmoddi4+0x11a>
 8000c40:	4298      	cmp	r0, r3
 8000c42:	f200 80cd 	bhi.w	8000de0 <__udivmoddi4+0x2b4>
 8000c46:	4626      	mov	r6, r4
 8000c48:	1a1c      	subs	r4, r3, r0
 8000c4a:	fa1f f38e 	uxth.w	r3, lr
 8000c4e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c52:	fb08 4410 	mls	r4, r8, r0, r4
 8000c56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c5a:	fb00 f707 	mul.w	r7, r0, r7
 8000c5e:	429f      	cmp	r7, r3
 8000c60:	d908      	bls.n	8000c74 <__udivmoddi4+0x148>
 8000c62:	eb1c 0303 	adds.w	r3, ip, r3
 8000c66:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c6a:	d202      	bcs.n	8000c72 <__udivmoddi4+0x146>
 8000c6c:	429f      	cmp	r7, r3
 8000c6e:	f200 80b0 	bhi.w	8000dd2 <__udivmoddi4+0x2a6>
 8000c72:	4620      	mov	r0, r4
 8000c74:	1bdb      	subs	r3, r3, r7
 8000c76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7a:	e7a5      	b.n	8000bc8 <__udivmoddi4+0x9c>
 8000c7c:	f1c1 0620 	rsb	r6, r1, #32
 8000c80:	408b      	lsls	r3, r1
 8000c82:	fa22 f706 	lsr.w	r7, r2, r6
 8000c86:	431f      	orrs	r7, r3
 8000c88:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c8c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c90:	ea43 030c 	orr.w	r3, r3, ip
 8000c94:	40f4      	lsrs	r4, r6
 8000c96:	fa00 f801 	lsl.w	r8, r0, r1
 8000c9a:	0c38      	lsrs	r0, r7, #16
 8000c9c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ca0:	fbb4 fef0 	udiv	lr, r4, r0
 8000ca4:	fa1f fc87 	uxth.w	ip, r7
 8000ca8:	fb00 441e 	mls	r4, r0, lr, r4
 8000cac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cb0:	fb0e f90c 	mul.w	r9, lr, ip
 8000cb4:	45a1      	cmp	r9, r4
 8000cb6:	fa02 f201 	lsl.w	r2, r2, r1
 8000cba:	d90a      	bls.n	8000cd2 <__udivmoddi4+0x1a6>
 8000cbc:	193c      	adds	r4, r7, r4
 8000cbe:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000cc2:	f080 8084 	bcs.w	8000dce <__udivmoddi4+0x2a2>
 8000cc6:	45a1      	cmp	r9, r4
 8000cc8:	f240 8081 	bls.w	8000dce <__udivmoddi4+0x2a2>
 8000ccc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cd0:	443c      	add	r4, r7
 8000cd2:	eba4 0409 	sub.w	r4, r4, r9
 8000cd6:	fa1f f983 	uxth.w	r9, r3
 8000cda:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cde:	fb00 4413 	mls	r4, r0, r3, r4
 8000ce2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ce6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cea:	45a4      	cmp	ip, r4
 8000cec:	d907      	bls.n	8000cfe <__udivmoddi4+0x1d2>
 8000cee:	193c      	adds	r4, r7, r4
 8000cf0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cf4:	d267      	bcs.n	8000dc6 <__udivmoddi4+0x29a>
 8000cf6:	45a4      	cmp	ip, r4
 8000cf8:	d965      	bls.n	8000dc6 <__udivmoddi4+0x29a>
 8000cfa:	3b02      	subs	r3, #2
 8000cfc:	443c      	add	r4, r7
 8000cfe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d02:	fba0 9302 	umull	r9, r3, r0, r2
 8000d06:	eba4 040c 	sub.w	r4, r4, ip
 8000d0a:	429c      	cmp	r4, r3
 8000d0c:	46ce      	mov	lr, r9
 8000d0e:	469c      	mov	ip, r3
 8000d10:	d351      	bcc.n	8000db6 <__udivmoddi4+0x28a>
 8000d12:	d04e      	beq.n	8000db2 <__udivmoddi4+0x286>
 8000d14:	b155      	cbz	r5, 8000d2c <__udivmoddi4+0x200>
 8000d16:	ebb8 030e 	subs.w	r3, r8, lr
 8000d1a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d1e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d22:	40cb      	lsrs	r3, r1
 8000d24:	431e      	orrs	r6, r3
 8000d26:	40cc      	lsrs	r4, r1
 8000d28:	e9c5 6400 	strd	r6, r4, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	e750      	b.n	8000bd2 <__udivmoddi4+0xa6>
 8000d30:	f1c2 0320 	rsb	r3, r2, #32
 8000d34:	fa20 f103 	lsr.w	r1, r0, r3
 8000d38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d3c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d40:	4094      	lsls	r4, r2
 8000d42:	430c      	orrs	r4, r1
 8000d44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d48:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d4c:	fa1f f78c 	uxth.w	r7, ip
 8000d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d54:	fb08 3110 	mls	r1, r8, r0, r3
 8000d58:	0c23      	lsrs	r3, r4, #16
 8000d5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5e:	fb00 f107 	mul.w	r1, r0, r7
 8000d62:	4299      	cmp	r1, r3
 8000d64:	d908      	bls.n	8000d78 <__udivmoddi4+0x24c>
 8000d66:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d6e:	d22c      	bcs.n	8000dca <__udivmoddi4+0x29e>
 8000d70:	4299      	cmp	r1, r3
 8000d72:	d92a      	bls.n	8000dca <__udivmoddi4+0x29e>
 8000d74:	3802      	subs	r0, #2
 8000d76:	4463      	add	r3, ip
 8000d78:	1a5b      	subs	r3, r3, r1
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d80:	fb08 3311 	mls	r3, r8, r1, r3
 8000d84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d88:	fb01 f307 	mul.w	r3, r1, r7
 8000d8c:	42a3      	cmp	r3, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x276>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d98:	d213      	bcs.n	8000dc2 <__udivmoddi4+0x296>
 8000d9a:	42a3      	cmp	r3, r4
 8000d9c:	d911      	bls.n	8000dc2 <__udivmoddi4+0x296>
 8000d9e:	3902      	subs	r1, #2
 8000da0:	4464      	add	r4, ip
 8000da2:	1ae4      	subs	r4, r4, r3
 8000da4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000da8:	e739      	b.n	8000c1e <__udivmoddi4+0xf2>
 8000daa:	4604      	mov	r4, r0
 8000dac:	e6f0      	b.n	8000b90 <__udivmoddi4+0x64>
 8000dae:	4608      	mov	r0, r1
 8000db0:	e706      	b.n	8000bc0 <__udivmoddi4+0x94>
 8000db2:	45c8      	cmp	r8, r9
 8000db4:	d2ae      	bcs.n	8000d14 <__udivmoddi4+0x1e8>
 8000db6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dba:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dbe:	3801      	subs	r0, #1
 8000dc0:	e7a8      	b.n	8000d14 <__udivmoddi4+0x1e8>
 8000dc2:	4631      	mov	r1, r6
 8000dc4:	e7ed      	b.n	8000da2 <__udivmoddi4+0x276>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	e799      	b.n	8000cfe <__udivmoddi4+0x1d2>
 8000dca:	4630      	mov	r0, r6
 8000dcc:	e7d4      	b.n	8000d78 <__udivmoddi4+0x24c>
 8000dce:	46d6      	mov	lr, sl
 8000dd0:	e77f      	b.n	8000cd2 <__udivmoddi4+0x1a6>
 8000dd2:	4463      	add	r3, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	e74d      	b.n	8000c74 <__udivmoddi4+0x148>
 8000dd8:	4606      	mov	r6, r0
 8000dda:	4623      	mov	r3, r4
 8000ddc:	4608      	mov	r0, r1
 8000dde:	e70f      	b.n	8000c00 <__udivmoddi4+0xd4>
 8000de0:	3e02      	subs	r6, #2
 8000de2:	4463      	add	r3, ip
 8000de4:	e730      	b.n	8000c48 <__udivmoddi4+0x11c>
 8000de6:	bf00      	nop

08000de8 <__aeabi_idiv0>:
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	0000      	movs	r0, r0
	...

08000df0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000df0:	b5b0      	push	{r4, r5, r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
	float hensa = robomas[0].trgVel - robomas[0].actVel;
 8000df8:	4b83      	ldr	r3, [pc, #524]	@ (8001008 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000dfa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	4b81      	ldr	r3, [pc, #516]	@ (8001008 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000e02:	88db      	ldrh	r3, [r3, #6]
 8000e04:	b21b      	sxth	r3, r3
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	ee07 3a90 	vmov	s15, r3
 8000e0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e10:	edc7 7a05 	vstr	s15, [r7, #20]
	//printf("hensa:%d, act:%d", (int)hensa, (int)robomas[0].actVel);
	if (hensa >= 1000) hensa = 1000;
 8000e14:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e18:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 800100c <HAL_TIM_PeriodElapsedCallback+0x21c>
 8000e1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e24:	db02      	blt.n	8000e2c <HAL_TIM_PeriodElapsedCallback+0x3c>
 8000e26:	4b7a      	ldr	r3, [pc, #488]	@ (8001010 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	e00a      	b.n	8000e42 <HAL_TIM_PeriodElapsedCallback+0x52>
	else if (hensa <= -1000) hensa = -1000;
 8000e2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e30:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8001014 <HAL_TIM_PeriodElapsedCallback+0x224>
 8000e34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e3c:	d801      	bhi.n	8000e42 <HAL_TIM_PeriodElapsedCallback+0x52>
 8000e3e:	4b76      	ldr	r3, [pc, #472]	@ (8001018 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000e40:	617b      	str	r3, [r7, #20]

	float d = (robomas[0].actVel - robomas[0].p_actVel) / 0.001;
 8000e42:	4b71      	ldr	r3, [pc, #452]	@ (8001008 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000e44:	88db      	ldrh	r3, [r3, #6]
 8000e46:	b21b      	sxth	r3, r3
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b6f      	ldr	r3, [pc, #444]	@ (8001008 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000e4c:	891b      	ldrh	r3, [r3, #8]
 8000e4e:	b21b      	sxth	r3, r3
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff fb86 	bl	8000564 <__aeabi_i2d>
 8000e58:	a367      	add	r3, pc, #412	@ (adr r3, 8000ff8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e5e:	f7ff fd15 	bl	800088c <__aeabi_ddiv>
 8000e62:	4602      	mov	r2, r0
 8000e64:	460b      	mov	r3, r1
 8000e66:	4610      	mov	r0, r2
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f7ff fdf7 	bl	8000a5c <__aeabi_d2f>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	613b      	str	r3, [r7, #16]
	ind += hensa*0.1;
 8000e72:	4b6a      	ldr	r3, [pc, #424]	@ (800101c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff fb86 	bl	8000588 <__aeabi_f2d>
 8000e7c:	4604      	mov	r4, r0
 8000e7e:	460d      	mov	r5, r1
 8000e80:	6978      	ldr	r0, [r7, #20]
 8000e82:	f7ff fb81 	bl	8000588 <__aeabi_f2d>
 8000e86:	a35e      	add	r3, pc, #376	@ (adr r3, 8001000 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8000e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8c:	f7ff fbd4 	bl	8000638 <__aeabi_dmul>
 8000e90:	4602      	mov	r2, r0
 8000e92:	460b      	mov	r3, r1
 8000e94:	4620      	mov	r0, r4
 8000e96:	4629      	mov	r1, r5
 8000e98:	f7ff fa18 	bl	80002cc <__adddf3>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	f7ff fdda 	bl	8000a5c <__aeabi_d2f>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	4a5c      	ldr	r2, [pc, #368]	@ (800101c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000eac:	6013      	str	r3, [r2, #0]
	if (d >= 30000) d = 30000;
 8000eae:	edd7 7a04 	vldr	s15, [r7, #16]
 8000eb2:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8001020 <HAL_TIM_PeriodElapsedCallback+0x230>
 8000eb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ebe:	db02      	blt.n	8000ec6 <HAL_TIM_PeriodElapsedCallback+0xd6>
 8000ec0:	4b58      	ldr	r3, [pc, #352]	@ (8001024 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	e00a      	b.n	8000edc <HAL_TIM_PeriodElapsedCallback+0xec>
	else if (d <= -30000) d = -30000;
 8000ec6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000eca:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8001028 <HAL_TIM_PeriodElapsedCallback+0x238>
 8000ece:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ed6:	d801      	bhi.n	8000edc <HAL_TIM_PeriodElapsedCallback+0xec>
 8000ed8:	4b54      	ldr	r3, [pc, #336]	@ (800102c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000eda:	613b      	str	r3, [r7, #16]
	if (ind >= 10000) ind = 10000;
 8000edc:	4b4f      	ldr	r3, [pc, #316]	@ (800101c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000ede:	edd3 7a00 	vldr	s15, [r3]
 8000ee2:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8001030 <HAL_TIM_PeriodElapsedCallback+0x240>
 8000ee6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eee:	db03      	blt.n	8000ef8 <HAL_TIM_PeriodElapsedCallback+0x108>
 8000ef0:	4b4a      	ldr	r3, [pc, #296]	@ (800101c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000ef2:	4a50      	ldr	r2, [pc, #320]	@ (8001034 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	e00c      	b.n	8000f12 <HAL_TIM_PeriodElapsedCallback+0x122>
	else if (ind <= -10000) ind = -10000;
 8000ef8:	4b48      	ldr	r3, [pc, #288]	@ (800101c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000efa:	edd3 7a00 	vldr	s15, [r3]
 8000efe:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8001038 <HAL_TIM_PeriodElapsedCallback+0x248>
 8000f02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f0a:	d802      	bhi.n	8000f12 <HAL_TIM_PeriodElapsedCallback+0x122>
 8000f0c:	4b43      	ldr	r3, [pc, #268]	@ (800101c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000f0e:	4a4b      	ldr	r2, [pc, #300]	@ (800103c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000f10:	601a      	str	r2, [r3, #0]

	float t = k_p*hensa;
 8000f12:	4b4b      	ldr	r3, [pc, #300]	@ (8001040 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000f14:	edd3 7a00 	vldr	s15, [r3]
 8000f18:	ed97 7a05 	vldr	s14, [r7, #20]
 8000f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f20:	edc7 7a03 	vstr	s15, [r7, #12]
	if (t>=10000) t = 10000;
 8000f24:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f28:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8001030 <HAL_TIM_PeriodElapsedCallback+0x240>
 8000f2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f34:	db02      	blt.n	8000f3c <HAL_TIM_PeriodElapsedCallback+0x14c>
 8000f36:	4b3f      	ldr	r3, [pc, #252]	@ (8001034 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	e00a      	b.n	8000f52 <HAL_TIM_PeriodElapsedCallback+0x162>
	else if (t<=-10000) t = -10000;
 8000f3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f40:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8001038 <HAL_TIM_PeriodElapsedCallback+0x248>
 8000f44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f4c:	d801      	bhi.n	8000f52 <HAL_TIM_PeriodElapsedCallback+0x162>
 8000f4e:	4b3b      	ldr	r3, [pc, #236]	@ (800103c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000f50:	60fb      	str	r3, [r7, #12]
	robomas[0].cu = (int16_t)(t+k_i*ind+k_d*d);
 8000f52:	4b3c      	ldr	r3, [pc, #240]	@ (8001044 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000f54:	ed93 7a00 	vldr	s14, [r3]
 8000f58:	4b30      	ldr	r3, [pc, #192]	@ (800101c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000f5a:	edd3 7a00 	vldr	s15, [r3]
 8000f5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f62:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f6a:	4b37      	ldr	r3, [pc, #220]	@ (8001048 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000f6c:	edd3 6a00 	vldr	s13, [r3]
 8000f70:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f80:	ee17 3a90 	vmov	r3, s15
 8000f84:	b21a      	sxth	r2, r3
 8000f86:	4b20      	ldr	r3, [pc, #128]	@ (8001008 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000f88:	815a      	strh	r2, [r3, #10]
	if (robomas[0].cu <= -10000) robomas[0].cu = -10000;
 8000f8a:	4b1f      	ldr	r3, [pc, #124]	@ (8001008 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000f8c:	895b      	ldrh	r3, [r3, #10]
 8000f8e:	b21b      	sxth	r3, r3
 8000f90:	4a2e      	ldr	r2, [pc, #184]	@ (800104c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	da04      	bge.n	8000fa0 <HAL_TIM_PeriodElapsedCallback+0x1b0>
 8000f96:	4b1c      	ldr	r3, [pc, #112]	@ (8001008 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000f98:	f64d 02f0 	movw	r2, #55536	@ 0xd8f0
 8000f9c:	815a      	strh	r2, [r3, #10]
 8000f9e:	e00a      	b.n	8000fb6 <HAL_TIM_PeriodElapsedCallback+0x1c6>
	else if (robomas[0].cu >= 10000) robomas[0].cu = 10000;
 8000fa0:	4b19      	ldr	r3, [pc, #100]	@ (8001008 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000fa2:	895b      	ldrh	r3, [r3, #10]
 8000fa4:	b21b      	sxth	r3, r3
 8000fa6:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000faa:	4293      	cmp	r3, r2
 8000fac:	dd03      	ble.n	8000fb6 <HAL_TIM_PeriodElapsedCallback+0x1c6>
 8000fae:	4b16      	ldr	r3, [pc, #88]	@ (8001008 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000fb0:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fb4:	815a      	strh	r2, [r3, #10]

	TxData[4] = (robomas[0].cu) >> 8;
 8000fb6:	4b14      	ldr	r3, [pc, #80]	@ (8001008 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000fb8:	895b      	ldrh	r3, [r3, #10]
 8000fba:	b21b      	sxth	r3, r3
 8000fbc:	121b      	asrs	r3, r3, #8
 8000fbe:	b21b      	sxth	r3, r3
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4b23      	ldr	r3, [pc, #140]	@ (8001050 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000fc4:	711a      	strb	r2, [r3, #4]
	TxData[5] = (uint8_t)((robomas[0].cu) & 0xff);
 8000fc6:	4b10      	ldr	r3, [pc, #64]	@ (8001008 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000fc8:	895b      	ldrh	r3, [r3, #10]
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	4b20      	ldr	r3, [pc, #128]	@ (8001050 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000fd0:	715a      	strb	r2, [r3, #5]
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan3, &TxHeader, TxData) != HAL_OK){
 8000fd2:	4a1f      	ldr	r2, [pc, #124]	@ (8001050 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000fd4:	491f      	ldr	r1, [pc, #124]	@ (8001054 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000fd6:	4820      	ldr	r0, [pc, #128]	@ (8001058 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000fd8:	f001 f913 	bl	8002202 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <HAL_TIM_PeriodElapsedCallback+0x1f6>
		Error_Handler();
 8000fe2:	f000 fa85 	bl	80014f0 <Error_Handler>
	}
	robomas[0].p_actVel = robomas[0].actVel;
 8000fe6:	4b08      	ldr	r3, [pc, #32]	@ (8001008 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000fe8:	88db      	ldrh	r3, [r3, #6]
 8000fea:	b21a      	sxth	r2, r3
 8000fec:	4b06      	ldr	r3, [pc, #24]	@ (8001008 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000fee:	811a      	strh	r2, [r3, #8]
	//printf("%d\r\n", robomas[0].cu);
	//printf("hensa:%d,cu:%d,rpm:%d,ind:%d,d:%d\r\n", (int)hensa, robomas[0].cu, robomas[0].actVel, (int)ind, (int)d);

}
 8000ff0:	bf00      	nop
 8000ff2:	3718      	adds	r7, #24
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bdb0      	pop	{r4, r5, r7, pc}
 8000ff8:	d2f1a9fc 	.word	0xd2f1a9fc
 8000ffc:	3f50624d 	.word	0x3f50624d
 8001000:	9999999a 	.word	0x9999999a
 8001004:	3fb99999 	.word	0x3fb99999
 8001008:	20000000 	.word	0x20000000
 800100c:	447a0000 	.word	0x447a0000
 8001010:	447a0000 	.word	0x447a0000
 8001014:	c47a0000 	.word	0xc47a0000
 8001018:	c47a0000 	.word	0xc47a0000
 800101c:	20000240 	.word	0x20000240
 8001020:	46ea6000 	.word	0x46ea6000
 8001024:	46ea6000 	.word	0x46ea6000
 8001028:	c6ea6000 	.word	0xc6ea6000
 800102c:	c6ea6000 	.word	0xc6ea6000
 8001030:	461c4000 	.word	0x461c4000
 8001034:	461c4000 	.word	0x461c4000
 8001038:	c61c4000 	.word	0xc61c4000
 800103c:	c61c4000 	.word	0xc61c4000
 8001040:	20000010 	.word	0x20000010
 8001044:	20000014 	.word	0x20000014
 8001048:	20000018 	.word	0x20000018
 800104c:	ffffd8f1 	.word	0xffffd8f1
 8001050:	20000230 	.word	0x20000230
 8001054:	200001e4 	.word	0x200001e4
 8001058:	200000a0 	.word	0x200000a0

0800105c <HAL_FDCAN_RxFifo0Callback>:


void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	f003 0301 	and.w	r3, r3, #1
 800106c:	2b00      	cmp	r3, #0
 800106e:	d01e      	beq.n	80010ae <HAL_FDCAN_RxFifo0Callback+0x52>

	        /* Retrieve Rx messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(&hfdcan3, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8001070:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <HAL_FDCAN_RxFifo0Callback+0x5c>)
 8001072:	4a12      	ldr	r2, [pc, #72]	@ (80010bc <HAL_FDCAN_RxFifo0Callback+0x60>)
 8001074:	2140      	movs	r1, #64	@ 0x40
 8001076:	4812      	ldr	r0, [pc, #72]	@ (80010c0 <HAL_FDCAN_RxFifo0Callback+0x64>)
 8001078:	f001 f908 	bl	800228c <HAL_FDCAN_GetRxMessage>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d004      	beq.n	800108c <HAL_FDCAN_RxFifo0Callback+0x30>
			printf("fdcan_getrxmessage is error\r\n");
 8001082:	4810      	ldr	r0, [pc, #64]	@ (80010c4 <HAL_FDCAN_RxFifo0Callback+0x68>)
 8001084:	f004 fed2 	bl	8005e2c <puts>
			Error_Handler();
 8001088:	f000 fa32 	bl	80014f0 <Error_Handler>
		}

		if (RxHeader.Identifier == (robomas[0].CANID)) {
 800108c:	4b0b      	ldr	r3, [pc, #44]	@ (80010bc <HAL_FDCAN_RxFifo0Callback+0x60>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a0d      	ldr	r2, [pc, #52]	@ (80010c8 <HAL_FDCAN_RxFifo0Callback+0x6c>)
 8001092:	8812      	ldrh	r2, [r2, #0]
 8001094:	4293      	cmp	r3, r2
 8001096:	d10a      	bne.n	80010ae <HAL_FDCAN_RxFifo0Callback+0x52>
			robomas[0].actVel = (int16_t)((RxData[2] << 8) | RxData[3]);
 8001098:	4b07      	ldr	r3, [pc, #28]	@ (80010b8 <HAL_FDCAN_RxFifo0Callback+0x5c>)
 800109a:	789b      	ldrb	r3, [r3, #2]
 800109c:	021b      	lsls	r3, r3, #8
 800109e:	b21a      	sxth	r2, r3
 80010a0:	4b05      	ldr	r3, [pc, #20]	@ (80010b8 <HAL_FDCAN_RxFifo0Callback+0x5c>)
 80010a2:	78db      	ldrb	r3, [r3, #3]
 80010a4:	b21b      	sxth	r3, r3
 80010a6:	4313      	orrs	r3, r2
 80010a8:	b21a      	sxth	r2, r3
 80010aa:	4b07      	ldr	r3, [pc, #28]	@ (80010c8 <HAL_FDCAN_RxFifo0Callback+0x6c>)
 80010ac:	80da      	strh	r2, [r3, #6]
			//printf("%d\r\n", robomas[0].actVel);
		}
	}

}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000238 	.word	0x20000238
 80010bc:	20000208 	.word	0x20000208
 80010c0:	200000a0 	.word	0x200000a0
 80010c4:	08006c94 	.word	0x08006c94
 80010c8:	20000000 	.word	0x20000000

080010cc <_write>:

int _write(int file, char *ptr, int len)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	b29a      	uxth	r2, r3
 80010dc:	230a      	movs	r3, #10
 80010de:	68b9      	ldr	r1, [r7, #8]
 80010e0:	4803      	ldr	r0, [pc, #12]	@ (80010f0 <_write+0x24>)
 80010e2:	f003 fb29 	bl	8004738 <HAL_UART_Transmit>
    return len;
 80010e6:	687b      	ldr	r3, [r7, #4]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000150 	.word	0x20000150

080010f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b088      	sub	sp, #32
 80010f8:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 80010fa:	4b47      	ldr	r3, [pc, #284]	@ (8001218 <main+0x124>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f004 fe9a 	bl	8005e3c <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001108:	f000 fc2d 	bl	8001966 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800110c:	f000 f89c 	bl	8001248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001110:	f000 f9b0 	bl	8001474 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001114:	f000 f960 	bl	80013d8 <MX_USART2_UART_Init>
  MX_FDCAN3_Init();
 8001118:	f000 f8e2 	bl	80012e0 <MX_FDCAN3_Init>
  MX_TIM6_Init();
 800111c:	f000 f926 	bl	800136c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  printf("start");
 8001120:	483e      	ldr	r0, [pc, #248]	@ (800121c <main+0x128>)
 8001122:	f004 fe1b 	bl	8005d5c <iprintf>
  TxHeader.Identifier = 0x000;
 8001126:	4b3e      	ldr	r3, [pc, #248]	@ (8001220 <main+0x12c>)
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 800112c:	4b3c      	ldr	r3, [pc, #240]	@ (8001220 <main+0x12c>)
 800112e:	2200      	movs	r2, #0
 8001130:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001132:	4b3b      	ldr	r3, [pc, #236]	@ (8001220 <main+0x12c>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001138:	4b39      	ldr	r3, [pc, #228]	@ (8001220 <main+0x12c>)
 800113a:	2208      	movs	r2, #8
 800113c:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800113e:	4b38      	ldr	r3, [pc, #224]	@ (8001220 <main+0x12c>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001144:	4b36      	ldr	r3, [pc, #216]	@ (8001220 <main+0x12c>)
 8001146:	2200      	movs	r2, #0
 8001148:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800114a:	4b35      	ldr	r3, [pc, #212]	@ (8001220 <main+0x12c>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001150:	4b33      	ldr	r3, [pc, #204]	@ (8001220 <main+0x12c>)
 8001152:	2200      	movs	r2, #0
 8001154:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8001156:	4b32      	ldr	r3, [pc, #200]	@ (8001220 <main+0x12c>)
 8001158:	2200      	movs	r2, #0
 800115a:	621a      	str	r2, [r3, #32]

  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800115c:	2300      	movs	r3, #0
 800115e:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 8001164:	2300      	movs	r3, #0
 8001166:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001168:	2301      	movs	r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x200;
 800116c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001170:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x209;
 8001172:	f240 2309 	movw	r3, #521	@ 0x209
 8001176:	617b      	str	r3, [r7, #20]

  if (HAL_FDCAN_ConfigFilter(&hfdcan3, &sFilterConfig) != HAL_OK) {
 8001178:	463b      	mov	r3, r7
 800117a:	4619      	mov	r1, r3
 800117c:	4829      	ldr	r0, [pc, #164]	@ (8001224 <main+0x130>)
 800117e:	f000 ff8d 	bl	800209c <HAL_FDCAN_ConfigFilter>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d004      	beq.n	8001192 <main+0x9e>
	  printf("fdcan_configfilter is error\r\n");
 8001188:	4827      	ldr	r0, [pc, #156]	@ (8001228 <main+0x134>)
 800118a:	f004 fe4f 	bl	8005e2c <puts>
      Error_Handler();
 800118e:	f000 f9af 	bl	80014f0 <Error_Handler>
  }

  if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan3, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK) {
 8001192:	2300      	movs	r3, #0
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	2300      	movs	r3, #0
 8001198:	2202      	movs	r2, #2
 800119a:	2102      	movs	r1, #2
 800119c:	4821      	ldr	r0, [pc, #132]	@ (8001224 <main+0x130>)
 800119e:	f000 ffd7 	bl	8002150 <HAL_FDCAN_ConfigGlobalFilter>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d004      	beq.n	80011b2 <main+0xbe>
	  printf("fdcan_configglobalfilter is error\r\n");
 80011a8:	4820      	ldr	r0, [pc, #128]	@ (800122c <main+0x138>)
 80011aa:	f004 fe3f 	bl	8005e2c <puts>
      Error_Handler();
 80011ae:	f000 f99f 	bl	80014f0 <Error_Handler>
  }

  if (HAL_FDCAN_Start(&hfdcan3) != HAL_OK) {
 80011b2:	481c      	ldr	r0, [pc, #112]	@ (8001224 <main+0x130>)
 80011b4:	f000 fffd 	bl	80021b2 <HAL_FDCAN_Start>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d004      	beq.n	80011c8 <main+0xd4>
	  printf("fdcan_start is error\r\n");
 80011be:	481c      	ldr	r0, [pc, #112]	@ (8001230 <main+0x13c>)
 80011c0:	f004 fe34 	bl	8005e2c <puts>
      Error_Handler();
 80011c4:	f000 f994 	bl	80014f0 <Error_Handler>
  }

  if (HAL_FDCAN_ActivateNotification(&hfdcan3, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK){
 80011c8:	2200      	movs	r2, #0
 80011ca:	2101      	movs	r1, #1
 80011cc:	4815      	ldr	r0, [pc, #84]	@ (8001224 <main+0x130>)
 80011ce:	f001 f965 	bl	800249c <HAL_FDCAN_ActivateNotification>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d004      	beq.n	80011e2 <main+0xee>
	  printf("fdcan_activatenotification is error\r\n");
 80011d8:	4816      	ldr	r0, [pc, #88]	@ (8001234 <main+0x140>)
 80011da:	f004 fe27 	bl	8005e2c <puts>
	  Error_Handler();
 80011de:	f000 f987 	bl	80014f0 <Error_Handler>
  }

  printf("can_start");
 80011e2:	4815      	ldr	r0, [pc, #84]	@ (8001238 <main+0x144>)
 80011e4:	f004 fdba 	bl	8005d5c <iprintf>

  HAL_TIM_Base_Start_IT(&htim6);
 80011e8:	4814      	ldr	r0, [pc, #80]	@ (800123c <main+0x148>)
 80011ea:	f002 fed5 	bl	8003f98 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   TxHeader.Identifier = 0x200;
 80011ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001220 <main+0x12c>)
 80011f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011f4:	601a      	str	r2, [r3, #0]
	  //if (cu_f >= 2000) cu = 2000;
	  //else if (cu_f <= -2000) cu = -2000;
	  //else cu = cu_f;


		printf("rpm:%d, cu:%d, 0:%d, 10000:%d\r\n", robomas[0].actVel, robomas[0].cu, 0, 10000);
 80011f6:	4b12      	ldr	r3, [pc, #72]	@ (8001240 <main+0x14c>)
 80011f8:	88db      	ldrh	r3, [r3, #6]
 80011fa:	b21b      	sxth	r3, r3
 80011fc:	4619      	mov	r1, r3
 80011fe:	4b10      	ldr	r3, [pc, #64]	@ (8001240 <main+0x14c>)
 8001200:	895b      	ldrh	r3, [r3, #10]
 8001202:	b21b      	sxth	r3, r3
 8001204:	461a      	mov	r2, r3
 8001206:	f242 7310 	movw	r3, #10000	@ 0x2710
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	2300      	movs	r3, #0
 800120e:	480d      	ldr	r0, [pc, #52]	@ (8001244 <main+0x150>)
 8001210:	f004 fda4 	bl	8005d5c <iprintf>
 8001214:	e7ef      	b.n	80011f6 <main+0x102>
 8001216:	bf00      	nop
 8001218:	20000034 	.word	0x20000034
 800121c:	08006cb4 	.word	0x08006cb4
 8001220:	200001e4 	.word	0x200001e4
 8001224:	200000a0 	.word	0x200000a0
 8001228:	08006cbc 	.word	0x08006cbc
 800122c:	08006cdc 	.word	0x08006cdc
 8001230:	08006d00 	.word	0x08006d00
 8001234:	08006d18 	.word	0x08006d18
 8001238:	08006d40 	.word	0x08006d40
 800123c:	20000104 	.word	0x20000104
 8001240:	20000000 	.word	0x20000000
 8001244:	08006d4c 	.word	0x08006d4c

08001248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b094      	sub	sp, #80	@ 0x50
 800124c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800124e:	f107 0318 	add.w	r3, r7, #24
 8001252:	2238      	movs	r2, #56	@ 0x38
 8001254:	2100      	movs	r1, #0
 8001256:	4618      	mov	r0, r3
 8001258:	f004 ff84 	bl	8006164 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
 8001268:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800126a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800126e:	f001 fe0b 	bl	8002e88 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001272:	2302      	movs	r3, #2
 8001274:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001276:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800127a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800127c:	2340      	movs	r3, #64	@ 0x40
 800127e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001280:	2302      	movs	r3, #2
 8001282:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001284:	2302      	movs	r3, #2
 8001286:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001288:	2301      	movs	r3, #1
 800128a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 800128c:	230a      	movs	r3, #10
 800128e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001290:	2302      	movs	r3, #2
 8001292:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001294:	2302      	movs	r3, #2
 8001296:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001298:	2302      	movs	r3, #2
 800129a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800129c:	f107 0318 	add.w	r3, r7, #24
 80012a0:	4618      	mov	r0, r3
 80012a2:	f001 fea5 	bl	8002ff0 <HAL_RCC_OscConfig>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80012ac:	f000 f920 	bl	80014f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b0:	230f      	movs	r3, #15
 80012b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b4:	2303      	movs	r3, #3
 80012b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012bc:	2300      	movs	r3, #0
 80012be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	2102      	movs	r1, #2
 80012c8:	4618      	mov	r0, r3
 80012ca:	f002 f9a3 	bl	8003614 <HAL_RCC_ClockConfig>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80012d4:	f000 f90c 	bl	80014f0 <Error_Handler>
  }
}
 80012d8:	bf00      	nop
 80012da:	3750      	adds	r7, #80	@ 0x50
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 80012e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001364 <MX_FDCAN3_Init+0x84>)
 80012e6:	4a20      	ldr	r2, [pc, #128]	@ (8001368 <MX_FDCAN3_Init+0x88>)
 80012e8:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80012ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001364 <MX_FDCAN3_Init+0x84>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	605a      	str	r2, [r3, #4]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80012f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001364 <MX_FDCAN3_Init+0x84>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 80012f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001364 <MX_FDCAN3_Init+0x84>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 80012fc:	4b19      	ldr	r3, [pc, #100]	@ (8001364 <MX_FDCAN3_Init+0x84>)
 80012fe:	2200      	movs	r2, #0
 8001300:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8001302:	4b18      	ldr	r3, [pc, #96]	@ (8001364 <MX_FDCAN3_Init+0x84>)
 8001304:	2200      	movs	r2, #0
 8001306:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001308:	4b16      	ldr	r3, [pc, #88]	@ (8001364 <MX_FDCAN3_Init+0x84>)
 800130a:	2200      	movs	r2, #0
 800130c:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 4;
 800130e:	4b15      	ldr	r3, [pc, #84]	@ (8001364 <MX_FDCAN3_Init+0x84>)
 8001310:	2204      	movs	r2, #4
 8001312:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8001314:	4b13      	ldr	r3, [pc, #76]	@ (8001364 <MX_FDCAN3_Init+0x84>)
 8001316:	2201      	movs	r2, #1
 8001318:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 15;
 800131a:	4b12      	ldr	r3, [pc, #72]	@ (8001364 <MX_FDCAN3_Init+0x84>)
 800131c:	220f      	movs	r2, #15
 800131e:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 4;
 8001320:	4b10      	ldr	r3, [pc, #64]	@ (8001364 <MX_FDCAN3_Init+0x84>)
 8001322:	2204      	movs	r2, #4
 8001324:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8001326:	4b0f      	ldr	r3, [pc, #60]	@ (8001364 <MX_FDCAN3_Init+0x84>)
 8001328:	2201      	movs	r2, #1
 800132a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 800132c:	4b0d      	ldr	r3, [pc, #52]	@ (8001364 <MX_FDCAN3_Init+0x84>)
 800132e:	2201      	movs	r2, #1
 8001330:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8001332:	4b0c      	ldr	r3, [pc, #48]	@ (8001364 <MX_FDCAN3_Init+0x84>)
 8001334:	2201      	movs	r2, #1
 8001336:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8001338:	4b0a      	ldr	r3, [pc, #40]	@ (8001364 <MX_FDCAN3_Init+0x84>)
 800133a:	2201      	movs	r2, #1
 800133c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan3.Init.StdFiltersNbr = 1;
 800133e:	4b09      	ldr	r3, [pc, #36]	@ (8001364 <MX_FDCAN3_Init+0x84>)
 8001340:	2201      	movs	r2, #1
 8001342:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan3.Init.ExtFiltersNbr = 0;
 8001344:	4b07      	ldr	r3, [pc, #28]	@ (8001364 <MX_FDCAN3_Init+0x84>)
 8001346:	2200      	movs	r2, #0
 8001348:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800134a:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <MX_FDCAN3_Init+0x84>)
 800134c:	2200      	movs	r2, #0
 800134e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001350:	4804      	ldr	r0, [pc, #16]	@ (8001364 <MX_FDCAN3_Init+0x84>)
 8001352:	f000 fd49 	bl	8001de8 <HAL_FDCAN_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_FDCAN3_Init+0x80>
  {
    Error_Handler();
 800135c:	f000 f8c8 	bl	80014f0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}
 8001364:	200000a0 	.word	0x200000a0
 8001368:	40006c00 	.word	0x40006c00

0800136c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800137c:	4b14      	ldr	r3, [pc, #80]	@ (80013d0 <MX_TIM6_Init+0x64>)
 800137e:	4a15      	ldr	r2, [pc, #84]	@ (80013d4 <MX_TIM6_Init+0x68>)
 8001380:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9;
 8001382:	4b13      	ldr	r3, [pc, #76]	@ (80013d0 <MX_TIM6_Init+0x64>)
 8001384:	2209      	movs	r2, #9
 8001386:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001388:	4b11      	ldr	r3, [pc, #68]	@ (80013d0 <MX_TIM6_Init+0x64>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7999;
 800138e:	4b10      	ldr	r3, [pc, #64]	@ (80013d0 <MX_TIM6_Init+0x64>)
 8001390:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001394:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001396:	4b0e      	ldr	r3, [pc, #56]	@ (80013d0 <MX_TIM6_Init+0x64>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800139c:	480c      	ldr	r0, [pc, #48]	@ (80013d0 <MX_TIM6_Init+0x64>)
 800139e:	f002 fda3 	bl	8003ee8 <HAL_TIM_Base_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80013a8:	f000 f8a2 	bl	80014f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ac:	2300      	movs	r3, #0
 80013ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80013b4:	1d3b      	adds	r3, r7, #4
 80013b6:	4619      	mov	r1, r3
 80013b8:	4805      	ldr	r0, [pc, #20]	@ (80013d0 <MX_TIM6_Init+0x64>)
 80013ba:	f003 f891 	bl	80044e0 <HAL_TIMEx_MasterConfigSynchronization>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80013c4:	f000 f894 	bl	80014f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000104 	.word	0x20000104
 80013d4:	40001000 	.word	0x40001000

080013d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013dc:	4b22      	ldr	r3, [pc, #136]	@ (8001468 <MX_USART2_UART_Init+0x90>)
 80013de:	4a23      	ldr	r2, [pc, #140]	@ (800146c <MX_USART2_UART_Init+0x94>)
 80013e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 80013e2:	4b21      	ldr	r3, [pc, #132]	@ (8001468 <MX_USART2_UART_Init+0x90>)
 80013e4:	4a22      	ldr	r2, [pc, #136]	@ (8001470 <MX_USART2_UART_Init+0x98>)
 80013e6:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001468 <MX_USART2_UART_Init+0x90>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001468 <MX_USART2_UART_Init+0x90>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001468 <MX_USART2_UART_Init+0x90>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001468 <MX_USART2_UART_Init+0x90>)
 80013fc:	220c      	movs	r2, #12
 80013fe:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001400:	4b19      	ldr	r3, [pc, #100]	@ (8001468 <MX_USART2_UART_Init+0x90>)
 8001402:	2200      	movs	r2, #0
 8001404:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001406:	4b18      	ldr	r3, [pc, #96]	@ (8001468 <MX_USART2_UART_Init+0x90>)
 8001408:	2200      	movs	r2, #0
 800140a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800140c:	4b16      	ldr	r3, [pc, #88]	@ (8001468 <MX_USART2_UART_Init+0x90>)
 800140e:	2200      	movs	r2, #0
 8001410:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001412:	4b15      	ldr	r3, [pc, #84]	@ (8001468 <MX_USART2_UART_Init+0x90>)
 8001414:	2200      	movs	r2, #0
 8001416:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001418:	4b13      	ldr	r3, [pc, #76]	@ (8001468 <MX_USART2_UART_Init+0x90>)
 800141a:	2200      	movs	r2, #0
 800141c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800141e:	4812      	ldr	r0, [pc, #72]	@ (8001468 <MX_USART2_UART_Init+0x90>)
 8001420:	f003 f93a 	bl	8004698 <HAL_UART_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 800142a:	f000 f861 	bl	80014f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800142e:	2100      	movs	r1, #0
 8001430:	480d      	ldr	r0, [pc, #52]	@ (8001468 <MX_USART2_UART_Init+0x90>)
 8001432:	f004 fb06 	bl	8005a42 <HAL_UARTEx_SetTxFifoThreshold>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 800143c:	f000 f858 	bl	80014f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001440:	2100      	movs	r1, #0
 8001442:	4809      	ldr	r0, [pc, #36]	@ (8001468 <MX_USART2_UART_Init+0x90>)
 8001444:	f004 fb3b 	bl	8005abe <HAL_UARTEx_SetRxFifoThreshold>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 800144e:	f000 f84f 	bl	80014f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001452:	4805      	ldr	r0, [pc, #20]	@ (8001468 <MX_USART2_UART_Init+0x90>)
 8001454:	f004 fabc 	bl	80059d0 <HAL_UARTEx_DisableFifoMode>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 800145e:	f000 f847 	bl	80014f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000150 	.word	0x20000150
 800146c:	40004400 	.word	0x40004400
 8001470:	000f4240 	.word	0x000f4240

08001474 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b088      	sub	sp, #32
 8001478:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147a:	f107 030c 	add.w	r3, r7, #12
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]
 8001488:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800148a:	4b17      	ldr	r3, [pc, #92]	@ (80014e8 <MX_GPIO_Init+0x74>)
 800148c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148e:	4a16      	ldr	r2, [pc, #88]	@ (80014e8 <MX_GPIO_Init+0x74>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001496:	4b14      	ldr	r3, [pc, #80]	@ (80014e8 <MX_GPIO_Init+0x74>)
 8001498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a2:	4b11      	ldr	r3, [pc, #68]	@ (80014e8 <MX_GPIO_Init+0x74>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a6:	4a10      	ldr	r2, [pc, #64]	@ (80014e8 <MX_GPIO_Init+0x74>)
 80014a8:	f043 0302 	orr.w	r3, r3, #2
 80014ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ae:	4b0e      	ldr	r3, [pc, #56]	@ (80014e8 <MX_GPIO_Init+0x74>)
 80014b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	607b      	str	r3, [r7, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2140      	movs	r1, #64	@ 0x40
 80014be:	480b      	ldr	r0, [pc, #44]	@ (80014ec <MX_GPIO_Init+0x78>)
 80014c0:	f001 fcca 	bl	8002e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014c4:	2340      	movs	r3, #64	@ 0x40
 80014c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c8:	2301      	movs	r3, #1
 80014ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d4:	f107 030c 	add.w	r3, r7, #12
 80014d8:	4619      	mov	r1, r3
 80014da:	4804      	ldr	r0, [pc, #16]	@ (80014ec <MX_GPIO_Init+0x78>)
 80014dc:	f001 fb3a 	bl	8002b54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014e0:	bf00      	nop
 80014e2:	3720      	adds	r7, #32
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40021000 	.word	0x40021000
 80014ec:	48000400 	.word	0x48000400

080014f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	printf("error\r\n");
 80014f4:	4803      	ldr	r0, [pc, #12]	@ (8001504 <Error_Handler+0x14>)
 80014f6:	f004 fc99 	bl	8005e2c <puts>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014fa:	b672      	cpsid	i
}
 80014fc:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014fe:	bf00      	nop
 8001500:	e7fd      	b.n	80014fe <Error_Handler+0xe>
 8001502:	bf00      	nop
 8001504:	08006d6c 	.word	0x08006d6c

08001508 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150e:	4b0f      	ldr	r3, [pc, #60]	@ (800154c <HAL_MspInit+0x44>)
 8001510:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001512:	4a0e      	ldr	r2, [pc, #56]	@ (800154c <HAL_MspInit+0x44>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	6613      	str	r3, [r2, #96]	@ 0x60
 800151a:	4b0c      	ldr	r3, [pc, #48]	@ (800154c <HAL_MspInit+0x44>)
 800151c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001526:	4b09      	ldr	r3, [pc, #36]	@ (800154c <HAL_MspInit+0x44>)
 8001528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800152a:	4a08      	ldr	r2, [pc, #32]	@ (800154c <HAL_MspInit+0x44>)
 800152c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001530:	6593      	str	r3, [r2, #88]	@ 0x58
 8001532:	4b06      	ldr	r3, [pc, #24]	@ (800154c <HAL_MspInit+0x44>)
 8001534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800153e:	f001 fd47 	bl	8002fd0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40021000 	.word	0x40021000

08001550 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b09e      	sub	sp, #120	@ 0x78
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001568:	f107 0310 	add.w	r3, r7, #16
 800156c:	2254      	movs	r2, #84	@ 0x54
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f004 fdf7 	bl	8006164 <memset>
  if(hfdcan->Instance==FDCAN3)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a27      	ldr	r2, [pc, #156]	@ (8001618 <HAL_FDCAN_MspInit+0xc8>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d147      	bne.n	8001610 <HAL_FDCAN_MspInit+0xc0>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001580:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001584:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001586:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800158a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800158c:	f107 0310 	add.w	r3, r7, #16
 8001590:	4618      	mov	r0, r3
 8001592:	f002 fa5b 	bl	8003a4c <HAL_RCCEx_PeriphCLKConfig>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800159c:	f7ff ffa8 	bl	80014f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80015a0:	4b1e      	ldr	r3, [pc, #120]	@ (800161c <HAL_FDCAN_MspInit+0xcc>)
 80015a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015a4:	4a1d      	ldr	r2, [pc, #116]	@ (800161c <HAL_FDCAN_MspInit+0xcc>)
 80015a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80015aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80015ac:	4b1b      	ldr	r3, [pc, #108]	@ (800161c <HAL_FDCAN_MspInit+0xcc>)
 80015ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b8:	4b18      	ldr	r3, [pc, #96]	@ (800161c <HAL_FDCAN_MspInit+0xcc>)
 80015ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015bc:	4a17      	ldr	r2, [pc, #92]	@ (800161c <HAL_FDCAN_MspInit+0xcc>)
 80015be:	f043 0302 	orr.w	r3, r3, #2
 80015c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015c4:	4b15      	ldr	r3, [pc, #84]	@ (800161c <HAL_FDCAN_MspInit+0xcc>)
 80015c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PB3     ------> FDCAN3_RX
    PB4     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80015d0:	2318      	movs	r3, #24
 80015d2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d4:	2302      	movs	r3, #2
 80015d6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015dc:	2300      	movs	r3, #0
 80015de:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF11_FDCAN3;
 80015e0:	230b      	movs	r3, #11
 80015e2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80015e8:	4619      	mov	r1, r3
 80015ea:	480d      	ldr	r0, [pc, #52]	@ (8001620 <HAL_FDCAN_MspInit+0xd0>)
 80015ec:	f001 fab2 	bl	8002b54 <HAL_GPIO_Init>

    /* FDCAN3 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN3_IT0_IRQn, 0, 0);
 80015f0:	2200      	movs	r2, #0
 80015f2:	2100      	movs	r1, #0
 80015f4:	2058      	movs	r0, #88	@ 0x58
 80015f6:	f000 fb02 	bl	8001bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
 80015fa:	2058      	movs	r0, #88	@ 0x58
 80015fc:	f000 fb19 	bl	8001c32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN3_IT1_IRQn, 0, 0);
 8001600:	2200      	movs	r2, #0
 8001602:	2100      	movs	r1, #0
 8001604:	2059      	movs	r0, #89	@ 0x59
 8001606:	f000 fafa 	bl	8001bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT1_IRQn);
 800160a:	2059      	movs	r0, #89	@ 0x59
 800160c:	f000 fb11 	bl	8001c32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8001610:	bf00      	nop
 8001612:	3778      	adds	r7, #120	@ 0x78
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40006c00 	.word	0x40006c00
 800161c:	40021000 	.word	0x40021000
 8001620:	48000400 	.word	0x48000400

08001624 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a0d      	ldr	r2, [pc, #52]	@ (8001668 <HAL_TIM_Base_MspInit+0x44>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d113      	bne.n	800165e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001636:	4b0d      	ldr	r3, [pc, #52]	@ (800166c <HAL_TIM_Base_MspInit+0x48>)
 8001638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800163a:	4a0c      	ldr	r2, [pc, #48]	@ (800166c <HAL_TIM_Base_MspInit+0x48>)
 800163c:	f043 0310 	orr.w	r3, r3, #16
 8001640:	6593      	str	r3, [r2, #88]	@ 0x58
 8001642:	4b0a      	ldr	r3, [pc, #40]	@ (800166c <HAL_TIM_Base_MspInit+0x48>)
 8001644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001646:	f003 0310 	and.w	r3, r3, #16
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	2100      	movs	r1, #0
 8001652:	2036      	movs	r0, #54	@ 0x36
 8001654:	f000 fad3 	bl	8001bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001658:	2036      	movs	r0, #54	@ 0x36
 800165a:	f000 faea 	bl	8001c32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800165e:	bf00      	nop
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40001000 	.word	0x40001000
 800166c:	40021000 	.word	0x40021000

08001670 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b09e      	sub	sp, #120	@ 0x78
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001688:	f107 0310 	add.w	r3, r7, #16
 800168c:	2254      	movs	r2, #84	@ 0x54
 800168e:	2100      	movs	r1, #0
 8001690:	4618      	mov	r0, r3
 8001692:	f004 fd67 	bl	8006164 <memset>
  if(huart->Instance==USART2)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a23      	ldr	r2, [pc, #140]	@ (8001728 <HAL_UART_MspInit+0xb8>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d13e      	bne.n	800171e <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016a0:	2302      	movs	r3, #2
 80016a2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016a8:	f107 0310 	add.w	r3, r7, #16
 80016ac:	4618      	mov	r0, r3
 80016ae:	f002 f9cd 	bl	8003a4c <HAL_RCCEx_PeriphCLKConfig>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016b8:	f7ff ff1a 	bl	80014f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016bc:	4b1b      	ldr	r3, [pc, #108]	@ (800172c <HAL_UART_MspInit+0xbc>)
 80016be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c0:	4a1a      	ldr	r2, [pc, #104]	@ (800172c <HAL_UART_MspInit+0xbc>)
 80016c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80016c8:	4b18      	ldr	r3, [pc, #96]	@ (800172c <HAL_UART_MspInit+0xbc>)
 80016ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d4:	4b15      	ldr	r3, [pc, #84]	@ (800172c <HAL_UART_MspInit+0xbc>)
 80016d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d8:	4a14      	ldr	r2, [pc, #80]	@ (800172c <HAL_UART_MspInit+0xbc>)
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016e0:	4b12      	ldr	r3, [pc, #72]	@ (800172c <HAL_UART_MspInit+0xbc>)
 80016e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016ec:	230c      	movs	r3, #12
 80016ee:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f0:	2302      	movs	r3, #2
 80016f2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f8:	2300      	movs	r3, #0
 80016fa:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016fc:	2307      	movs	r3, #7
 80016fe:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001700:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001704:	4619      	mov	r1, r3
 8001706:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800170a:	f001 fa23 	bl	8002b54 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2100      	movs	r1, #0
 8001712:	2026      	movs	r0, #38	@ 0x26
 8001714:	f000 fa73 	bl	8001bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001718:	2026      	movs	r0, #38	@ 0x26
 800171a:	f000 fa8a 	bl	8001c32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800171e:	bf00      	nop
 8001720:	3778      	adds	r7, #120	@ 0x78
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40004400 	.word	0x40004400
 800172c:	40021000 	.word	0x40021000

08001730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001734:	bf00      	nop
 8001736:	e7fd      	b.n	8001734 <NMI_Handler+0x4>

08001738 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <HardFault_Handler+0x4>

08001740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001744:	bf00      	nop
 8001746:	e7fd      	b.n	8001744 <MemManage_Handler+0x4>

08001748 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800174c:	bf00      	nop
 800174e:	e7fd      	b.n	800174c <BusFault_Handler+0x4>

08001750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001754:	bf00      	nop
 8001756:	e7fd      	b.n	8001754 <UsageFault_Handler+0x4>

08001758 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001786:	f000 f941 	bl	8001a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001794:	4802      	ldr	r0, [pc, #8]	@ (80017a0 <USART2_IRQHandler+0x10>)
 8001796:	f003 f85d 	bl	8004854 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000150 	.word	0x20000150

080017a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017a8:	4802      	ldr	r0, [pc, #8]	@ (80017b4 <TIM6_DAC_IRQHandler+0x10>)
 80017aa:	f002 fc6d 	bl	8004088 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000104 	.word	0x20000104

080017b8 <FDCAN3_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 0.
  */
void FDCAN3_IT0_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 0 */

  /* USER CODE END FDCAN3_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 80017bc:	4802      	ldr	r0, [pc, #8]	@ (80017c8 <FDCAN3_IT0_IRQHandler+0x10>)
 80017be:	f000 ff53 	bl	8002668 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 1 */

  /* USER CODE END FDCAN3_IT0_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	200000a0 	.word	0x200000a0

080017cc <FDCAN3_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 1.
  */
void FDCAN3_IT1_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT1_IRQn 0 */

  /* USER CODE END FDCAN3_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 80017d0:	4802      	ldr	r0, [pc, #8]	@ (80017dc <FDCAN3_IT1_IRQHandler+0x10>)
 80017d2:	f000 ff49 	bl	8002668 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT1_IRQn 1 */

  /* USER CODE END FDCAN3_IT1_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	200000a0 	.word	0x200000a0

080017e0 <_read>:
{
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]
 80017f0:	e00a      	b.n	8001808 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017f2:	f3af 8000 	nop.w
 80017f6:	4601      	mov	r1, r0
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	1c5a      	adds	r2, r3, #1
 80017fc:	60ba      	str	r2, [r7, #8]
 80017fe:	b2ca      	uxtb	r2, r1
 8001800:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	3301      	adds	r3, #1
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	697a      	ldr	r2, [r7, #20]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	429a      	cmp	r2, r3
 800180e:	dbf0      	blt.n	80017f2 <_read+0x12>
  }

  return len;
 8001810:	687b      	ldr	r3, [r7, #4]
}
 8001812:	4618      	mov	r0, r3
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <_close>:
  }
  return len;
}

int _close(int file)
{
 800181a:	b480      	push	{r7}
 800181c:	b083      	sub	sp, #12
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001822:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001826:	4618      	mov	r0, r3
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
 800183a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001842:	605a      	str	r2, [r3, #4]
  return 0;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <_isatty>:

int _isatty(int file)
{
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800185a:	2301      	movs	r3, #1
}
 800185c:	4618      	mov	r0, r3
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3714      	adds	r7, #20
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
	...

08001884 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800188c:	4a14      	ldr	r2, [pc, #80]	@ (80018e0 <_sbrk+0x5c>)
 800188e:	4b15      	ldr	r3, [pc, #84]	@ (80018e4 <_sbrk+0x60>)
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001898:	4b13      	ldr	r3, [pc, #76]	@ (80018e8 <_sbrk+0x64>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d102      	bne.n	80018a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018a0:	4b11      	ldr	r3, [pc, #68]	@ (80018e8 <_sbrk+0x64>)
 80018a2:	4a12      	ldr	r2, [pc, #72]	@ (80018ec <_sbrk+0x68>)
 80018a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018a6:	4b10      	ldr	r3, [pc, #64]	@ (80018e8 <_sbrk+0x64>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4413      	add	r3, r2
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d207      	bcs.n	80018c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018b4:	f004 fca4 	bl	8006200 <__errno>
 80018b8:	4603      	mov	r3, r0
 80018ba:	220c      	movs	r2, #12
 80018bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018be:	f04f 33ff 	mov.w	r3, #4294967295
 80018c2:	e009      	b.n	80018d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018c4:	4b08      	ldr	r3, [pc, #32]	@ (80018e8 <_sbrk+0x64>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ca:	4b07      	ldr	r3, [pc, #28]	@ (80018e8 <_sbrk+0x64>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4413      	add	r3, r2
 80018d2:	4a05      	ldr	r2, [pc, #20]	@ (80018e8 <_sbrk+0x64>)
 80018d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018d6:	68fb      	ldr	r3, [r7, #12]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20020000 	.word	0x20020000
 80018e4:	00000400 	.word	0x00000400
 80018e8:	20000244 	.word	0x20000244
 80018ec:	20000398 	.word	0x20000398

080018f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018f4:	4b06      	ldr	r3, [pc, #24]	@ (8001910 <SystemInit+0x20>)
 80018f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018fa:	4a05      	ldr	r2, [pc, #20]	@ (8001910 <SystemInit+0x20>)
 80018fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001900:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001914:	480d      	ldr	r0, [pc, #52]	@ (800194c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001916:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001918:	f7ff ffea 	bl	80018f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800191c:	480c      	ldr	r0, [pc, #48]	@ (8001950 <LoopForever+0x6>)
  ldr r1, =_edata
 800191e:	490d      	ldr	r1, [pc, #52]	@ (8001954 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001920:	4a0d      	ldr	r2, [pc, #52]	@ (8001958 <LoopForever+0xe>)
  movs r3, #0
 8001922:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001924:	e002      	b.n	800192c <LoopCopyDataInit>

08001926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800192a:	3304      	adds	r3, #4

0800192c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800192c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800192e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001930:	d3f9      	bcc.n	8001926 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001932:	4a0a      	ldr	r2, [pc, #40]	@ (800195c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001934:	4c0a      	ldr	r4, [pc, #40]	@ (8001960 <LoopForever+0x16>)
  movs r3, #0
 8001936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001938:	e001      	b.n	800193e <LoopFillZerobss>

0800193a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800193a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800193c:	3204      	adds	r2, #4

0800193e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800193e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001940:	d3fb      	bcc.n	800193a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001942:	f004 fc63 	bl	800620c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001946:	f7ff fbd5 	bl	80010f4 <main>

0800194a <LoopForever>:

LoopForever:
    b LoopForever
 800194a:	e7fe      	b.n	800194a <LoopForever>
  ldr   r0, =_estack
 800194c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001954:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001958:	08006e08 	.word	0x08006e08
  ldr r2, =_sbss
 800195c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001960:	20000398 	.word	0x20000398

08001964 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001964:	e7fe      	b.n	8001964 <ADC1_2_IRQHandler>

08001966 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800196c:	2300      	movs	r3, #0
 800196e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001970:	2003      	movs	r0, #3
 8001972:	f000 f939 	bl	8001be8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001976:	200f      	movs	r0, #15
 8001978:	f000 f80e 	bl	8001998 <HAL_InitTick>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d002      	beq.n	8001988 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	71fb      	strb	r3, [r7, #7]
 8001986:	e001      	b.n	800198c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001988:	f7ff fdbe 	bl	8001508 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800198c:	79fb      	ldrb	r3, [r7, #7]

}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
	...

08001998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019a0:	2300      	movs	r3, #0
 80019a2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80019a4:	4b16      	ldr	r3, [pc, #88]	@ (8001a00 <HAL_InitTick+0x68>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d022      	beq.n	80019f2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80019ac:	4b15      	ldr	r3, [pc, #84]	@ (8001a04 <HAL_InitTick+0x6c>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4b13      	ldr	r3, [pc, #76]	@ (8001a00 <HAL_InitTick+0x68>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80019b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80019bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c0:	4618      	mov	r0, r3
 80019c2:	f000 f944 	bl	8001c4e <HAL_SYSTICK_Config>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d10f      	bne.n	80019ec <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b0f      	cmp	r3, #15
 80019d0:	d809      	bhi.n	80019e6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d2:	2200      	movs	r2, #0
 80019d4:	6879      	ldr	r1, [r7, #4]
 80019d6:	f04f 30ff 	mov.w	r0, #4294967295
 80019da:	f000 f910 	bl	8001bfe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019de:	4a0a      	ldr	r2, [pc, #40]	@ (8001a08 <HAL_InitTick+0x70>)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6013      	str	r3, [r2, #0]
 80019e4:	e007      	b.n	80019f6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	73fb      	strb	r3, [r7, #15]
 80019ea:	e004      	b.n	80019f6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	73fb      	strb	r3, [r7, #15]
 80019f0:	e001      	b.n	80019f6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20000024 	.word	0x20000024
 8001a04:	2000001c 	.word	0x2000001c
 8001a08:	20000020 	.word	0x20000020

08001a0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a10:	4b05      	ldr	r3, [pc, #20]	@ (8001a28 <HAL_IncTick+0x1c>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4b05      	ldr	r3, [pc, #20]	@ (8001a2c <HAL_IncTick+0x20>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4413      	add	r3, r2
 8001a1a:	4a03      	ldr	r2, [pc, #12]	@ (8001a28 <HAL_IncTick+0x1c>)
 8001a1c:	6013      	str	r3, [r2, #0]
}
 8001a1e:	bf00      	nop
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	20000248 	.word	0x20000248
 8001a2c:	20000024 	.word	0x20000024

08001a30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  return uwTick;
 8001a34:	4b03      	ldr	r3, [pc, #12]	@ (8001a44 <HAL_GetTick+0x14>)
 8001a36:	681b      	ldr	r3, [r3, #0]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	20000248 	.word	0x20000248

08001a48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a58:	4b0c      	ldr	r3, [pc, #48]	@ (8001a8c <__NVIC_SetPriorityGrouping+0x44>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a5e:	68ba      	ldr	r2, [r7, #8]
 8001a60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a64:	4013      	ands	r3, r2
 8001a66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a7a:	4a04      	ldr	r2, [pc, #16]	@ (8001a8c <__NVIC_SetPriorityGrouping+0x44>)
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	60d3      	str	r3, [r2, #12]
}
 8001a80:	bf00      	nop
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a94:	4b04      	ldr	r3, [pc, #16]	@ (8001aa8 <__NVIC_GetPriorityGrouping+0x18>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	0a1b      	lsrs	r3, r3, #8
 8001a9a:	f003 0307 	and.w	r3, r3, #7
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	db0b      	blt.n	8001ad6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001abe:	79fb      	ldrb	r3, [r7, #7]
 8001ac0:	f003 021f 	and.w	r2, r3, #31
 8001ac4:	4907      	ldr	r1, [pc, #28]	@ (8001ae4 <__NVIC_EnableIRQ+0x38>)
 8001ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aca:	095b      	lsrs	r3, r3, #5
 8001acc:	2001      	movs	r0, #1
 8001ace:	fa00 f202 	lsl.w	r2, r0, r2
 8001ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	e000e100 	.word	0xe000e100

08001ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	6039      	str	r1, [r7, #0]
 8001af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	db0a      	blt.n	8001b12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	490c      	ldr	r1, [pc, #48]	@ (8001b34 <__NVIC_SetPriority+0x4c>)
 8001b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b06:	0112      	lsls	r2, r2, #4
 8001b08:	b2d2      	uxtb	r2, r2
 8001b0a:	440b      	add	r3, r1
 8001b0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b10:	e00a      	b.n	8001b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	b2da      	uxtb	r2, r3
 8001b16:	4908      	ldr	r1, [pc, #32]	@ (8001b38 <__NVIC_SetPriority+0x50>)
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	3b04      	subs	r3, #4
 8001b20:	0112      	lsls	r2, r2, #4
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	440b      	add	r3, r1
 8001b26:	761a      	strb	r2, [r3, #24]
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	e000e100 	.word	0xe000e100
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b089      	sub	sp, #36	@ 0x24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f1c3 0307 	rsb	r3, r3, #7
 8001b56:	2b04      	cmp	r3, #4
 8001b58:	bf28      	it	cs
 8001b5a:	2304      	movcs	r3, #4
 8001b5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	3304      	adds	r3, #4
 8001b62:	2b06      	cmp	r3, #6
 8001b64:	d902      	bls.n	8001b6c <NVIC_EncodePriority+0x30>
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3b03      	subs	r3, #3
 8001b6a:	e000      	b.n	8001b6e <NVIC_EncodePriority+0x32>
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b70:	f04f 32ff 	mov.w	r2, #4294967295
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43da      	mvns	r2, r3
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	401a      	ands	r2, r3
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b84:	f04f 31ff 	mov.w	r1, #4294967295
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8e:	43d9      	mvns	r1, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b94:	4313      	orrs	r3, r2
         );
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3724      	adds	r7, #36	@ 0x24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
	...

08001ba4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bb4:	d301      	bcc.n	8001bba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e00f      	b.n	8001bda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bba:	4a0a      	ldr	r2, [pc, #40]	@ (8001be4 <SysTick_Config+0x40>)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bc2:	210f      	movs	r1, #15
 8001bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc8:	f7ff ff8e 	bl	8001ae8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bcc:	4b05      	ldr	r3, [pc, #20]	@ (8001be4 <SysTick_Config+0x40>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bd2:	4b04      	ldr	r3, [pc, #16]	@ (8001be4 <SysTick_Config+0x40>)
 8001bd4:	2207      	movs	r2, #7
 8001bd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	e000e010 	.word	0xe000e010

08001be8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7ff ff29 	bl	8001a48 <__NVIC_SetPriorityGrouping>
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b086      	sub	sp, #24
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	4603      	mov	r3, r0
 8001c06:	60b9      	str	r1, [r7, #8]
 8001c08:	607a      	str	r2, [r7, #4]
 8001c0a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c0c:	f7ff ff40 	bl	8001a90 <__NVIC_GetPriorityGrouping>
 8001c10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	68b9      	ldr	r1, [r7, #8]
 8001c16:	6978      	ldr	r0, [r7, #20]
 8001c18:	f7ff ff90 	bl	8001b3c <NVIC_EncodePriority>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c22:	4611      	mov	r1, r2
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff ff5f 	bl	8001ae8 <__NVIC_SetPriority>
}
 8001c2a:	bf00      	nop
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	4603      	mov	r3, r0
 8001c3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff33 	bl	8001aac <__NVIC_EnableIRQ>
}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff ffa4 	bl	8001ba4 <SysTick_Config>
 8001c5c:	4603      	mov	r3, r0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b085      	sub	sp, #20
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d005      	beq.n	8001c8a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2204      	movs	r2, #4
 8001c82:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	73fb      	strb	r3, [r7, #15]
 8001c88:	e037      	b.n	8001cfa <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f022 020e 	bic.w	r2, r2, #14
 8001c98:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ca4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ca8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f022 0201 	bic.w	r2, r2, #1
 8001cb8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cbe:	f003 021f 	and.w	r2, r3, #31
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ccc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001cd6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d00c      	beq.n	8001cfa <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001cee:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001cf8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d20:	2300      	movs	r3, #0
 8001d22:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d00d      	beq.n	8001d4c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2204      	movs	r2, #4
 8001d34:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	73fb      	strb	r3, [r7, #15]
 8001d4a:	e047      	b.n	8001ddc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 020e 	bic.w	r2, r2, #14
 8001d5a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f022 0201 	bic.w	r2, r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d76:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d80:	f003 021f 	and.w	r2, r3, #31
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d88:	2101      	movs	r1, #1
 8001d8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d8e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001d98:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00c      	beq.n	8001dbc <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001db0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001dba:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	4798      	blx	r3
    }
  }
  return status;
 8001ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
	...

08001de8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e147      	b.n	800208a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d106      	bne.n	8001e14 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff fb9e 	bl	8001550 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	699a      	ldr	r2, [r3, #24]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f022 0210 	bic.w	r2, r2, #16
 8001e22:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e24:	f7ff fe04 	bl	8001a30 <HAL_GetTick>
 8001e28:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001e2a:	e012      	b.n	8001e52 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001e2c:	f7ff fe00 	bl	8001a30 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b0a      	cmp	r3, #10
 8001e38:	d90b      	bls.n	8001e52 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e3e:	f043 0201 	orr.w	r2, r3, #1
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2203      	movs	r2, #3
 8001e4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e11b      	b.n	800208a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	f003 0308 	and.w	r3, r3, #8
 8001e5c:	2b08      	cmp	r3, #8
 8001e5e:	d0e5      	beq.n	8001e2c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	699a      	ldr	r2, [r3, #24]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0201 	orr.w	r2, r2, #1
 8001e6e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e70:	f7ff fdde 	bl	8001a30 <HAL_GetTick>
 8001e74:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001e76:	e012      	b.n	8001e9e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001e78:	f7ff fdda 	bl	8001a30 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b0a      	cmp	r3, #10
 8001e84:	d90b      	bls.n	8001e9e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e8a:	f043 0201 	orr.w	r2, r3, #1
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2203      	movs	r2, #3
 8001e96:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e0f5      	b.n	800208a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0e5      	beq.n	8001e78 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	699a      	ldr	r2, [r3, #24]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 0202 	orr.w	r2, r2, #2
 8001eba:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a74      	ldr	r2, [pc, #464]	@ (8002094 <HAL_FDCAN_Init+0x2ac>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d103      	bne.n	8001ece <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001ec6:	4a74      	ldr	r2, [pc, #464]	@ (8002098 <HAL_FDCAN_Init+0x2b0>)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	7c1b      	ldrb	r3, [r3, #16]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d108      	bne.n	8001ee8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	699a      	ldr	r2, [r3, #24]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ee4:	619a      	str	r2, [r3, #24]
 8001ee6:	e007      	b.n	8001ef8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	699a      	ldr	r2, [r3, #24]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ef6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	7c5b      	ldrb	r3, [r3, #17]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d108      	bne.n	8001f12 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	699a      	ldr	r2, [r3, #24]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001f0e:	619a      	str	r2, [r3, #24]
 8001f10:	e007      	b.n	8001f22 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	699a      	ldr	r2, [r3, #24]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001f20:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	7c9b      	ldrb	r3, [r3, #18]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d108      	bne.n	8001f3c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	699a      	ldr	r2, [r3, #24]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001f38:	619a      	str	r2, [r3, #24]
 8001f3a:	e007      	b.n	8001f4c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	699a      	ldr	r2, [r3, #24]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001f4a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	699a      	ldr	r2, [r3, #24]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001f70:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	691a      	ldr	r2, [r3, #16]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0210 	bic.w	r2, r2, #16
 8001f80:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d108      	bne.n	8001f9c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	699a      	ldr	r2, [r3, #24]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f042 0204 	orr.w	r2, r2, #4
 8001f98:	619a      	str	r2, [r3, #24]
 8001f9a:	e02c      	b.n	8001ff6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d028      	beq.n	8001ff6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d01c      	beq.n	8001fe6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	699a      	ldr	r2, [r3, #24]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001fba:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	691a      	ldr	r2, [r3, #16]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f042 0210 	orr.w	r2, r2, #16
 8001fca:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	2b03      	cmp	r3, #3
 8001fd2:	d110      	bne.n	8001ff6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	699a      	ldr	r2, [r3, #24]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 0220 	orr.w	r2, r2, #32
 8001fe2:	619a      	str	r2, [r3, #24]
 8001fe4:	e007      	b.n	8001ff6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	699a      	ldr	r2, [r3, #24]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f042 0220 	orr.w	r2, r2, #32
 8001ff4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	3b01      	subs	r3, #1
 8002004:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002006:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800200e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	3b01      	subs	r3, #1
 8002018:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800201e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002020:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800202a:	d115      	bne.n	8002058 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002030:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002036:	3b01      	subs	r3, #1
 8002038:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800203a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002040:	3b01      	subs	r3, #1
 8002042:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002044:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800204c:	3b01      	subs	r3, #1
 800204e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002054:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002056:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	430a      	orrs	r2, r1
 800206a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 fc88 	bl	8002984 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40006400 	.word	0x40006400
 8002098:	40006500 	.word	0x40006500

0800209c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 800209c:	b480      	push	{r7}
 800209e:	b087      	sub	sp, #28
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80020ac:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80020ae:	7dfb      	ldrb	r3, [r7, #23]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d002      	beq.n	80020ba <HAL_FDCAN_ConfigFilter+0x1e>
 80020b4:	7dfb      	ldrb	r3, [r7, #23]
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d13d      	bne.n	8002136 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d119      	bne.n	80020f6 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80020ce:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80020d6:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80020dc:	4313      	orrs	r3, r2
 80020de:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4413      	add	r3, r2
 80020ec:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	e01d      	b.n	8002132 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	075a      	lsls	r2, r3, #29
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	4313      	orrs	r3, r2
 8002102:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	079a      	lsls	r2, r3, #30
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	4313      	orrs	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	4413      	add	r3, r2
 800211e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	3304      	adds	r3, #4
 800212a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8002132:	2300      	movs	r3, #0
 8002134:	e006      	b.n	8002144 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800213a:	f043 0202 	orr.w	r2, r3, #2
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
  }
}
 8002144:	4618      	mov	r0, r3
 8002146:	371c      	adds	r7, #28
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
 800215c:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b01      	cmp	r3, #1
 8002168:	d116      	bne.n	8002198 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002172:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	011a      	lsls	r2, r3, #4
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	431a      	orrs	r2, r3
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	431a      	orrs	r2, r3
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	431a      	orrs	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	430a      	orrs	r2, r1
 8002190:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8002194:	2300      	movs	r3, #0
 8002196:	e006      	b.n	80021a6 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800219c:	f043 0204 	orr.w	r2, r3, #4
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
  }
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d110      	bne.n	80021e8 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2202      	movs	r2, #2
 80021ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	699a      	ldr	r2, [r3, #24]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 0201 	bic.w	r2, r2, #1
 80021dc:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80021e4:	2300      	movs	r3, #0
 80021e6:	e006      	b.n	80021f6 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ec:	f043 0204 	orr.w	r2, r3, #4
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
  }
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b086      	sub	sp, #24
 8002206:	af00      	add	r7, sp, #0
 8002208:	60f8      	str	r0, [r7, #12]
 800220a:	60b9      	str	r1, [r7, #8]
 800220c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d12c      	bne.n	8002274 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002222:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d007      	beq.n	800223a <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800222e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e023      	b.n	8002282 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002242:	0c1b      	lsrs	r3, r3, #16
 8002244:	f003 0303 	and.w	r3, r3, #3
 8002248:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	68b9      	ldr	r1, [r7, #8]
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f000 fc03 	bl	8002a5c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2101      	movs	r1, #1
 800225c:	697a      	ldr	r2, [r7, #20]
 800225e:	fa01 f202 	lsl.w	r2, r1, r2
 8002262:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002266:	2201      	movs	r2, #1
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	409a      	lsls	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8002270:	2300      	movs	r3, #0
 8002272:	e006      	b.n	8002282 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002278:	f043 0208 	orr.w	r2, r3, #8
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
  }
}
 8002282:	4618      	mov	r0, r3
 8002284:	3718      	adds	r7, #24
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800228c:	b480      	push	{r7}
 800228e:	b08b      	sub	sp, #44	@ 0x2c
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
 8002298:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800229a:	2300      	movs	r3, #0
 800229c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80022a4:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80022a6:	7efb      	ldrb	r3, [r7, #27]
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	f040 80e8 	bne.w	800247e <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	2b40      	cmp	r3, #64	@ 0x40
 80022b2:	d137      	bne.n	8002324 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022bc:	f003 030f 	and.w	r3, r3, #15
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d107      	bne.n	80022d4 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022c8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e0db      	b.n	800248c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022dc:	0e1b      	lsrs	r3, r3, #24
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d10a      	bne.n	80022fc <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022ee:	0a5b      	lsrs	r3, r3, #9
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d101      	bne.n	80022fc <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80022f8:	2301      	movs	r3, #1
 80022fa:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002304:	0a1b      	lsrs	r3, r3, #8
 8002306:	f003 0303 	and.w	r3, r3, #3
 800230a:	69fa      	ldr	r2, [r7, #28]
 800230c:	4413      	add	r3, r2
 800230e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8002314:	69fa      	ldr	r2, [r7, #28]
 8002316:	4613      	mov	r3, r2
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	4413      	add	r3, r2
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	440b      	add	r3, r1
 8002320:	627b      	str	r3, [r7, #36]	@ 0x24
 8002322:	e036      	b.n	8002392 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800232c:	f003 030f 	and.w	r3, r3, #15
 8002330:	2b00      	cmp	r3, #0
 8002332:	d107      	bne.n	8002344 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002338:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e0a3      	b.n	800248c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800234c:	0e1b      	lsrs	r3, r3, #24
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b01      	cmp	r3, #1
 8002354:	d10a      	bne.n	800236c <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800235e:	0a1b      	lsrs	r3, r3, #8
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b01      	cmp	r3, #1
 8002366:	d101      	bne.n	800236c <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002368:	2301      	movs	r3, #1
 800236a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002374:	0a1b      	lsrs	r3, r3, #8
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	69fa      	ldr	r2, [r7, #28]
 800237c:	4413      	add	r3, r2
 800237e:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002384:	69fa      	ldr	r2, [r7, #28]
 8002386:	4613      	mov	r3, r2
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	4413      	add	r3, r2
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	440b      	add	r3, r1
 8002390:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8002392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d107      	bne.n	80023b6 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80023a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	0c9b      	lsrs	r3, r3, #18
 80023ac:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	e005      	b.n	80023c2 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80023b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80023c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80023ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80023da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023dc:	3304      	adds	r3, #4
 80023de:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80023e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80023ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	0c1b      	lsrs	r3, r3, #16
 80023f0:	f003 020f 	and.w	r2, r3, #15
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80023f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8002404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8002410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	0e1b      	lsrs	r3, r3, #24
 8002416:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800241e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	0fda      	lsrs	r2, r3, #31
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8002428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242a:	3304      	adds	r3, #4
 800242c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800242e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002430:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8002432:	2300      	movs	r3, #0
 8002434:	623b      	str	r3, [r7, #32]
 8002436:	e00a      	b.n	800244e <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	6a3b      	ldr	r3, [r7, #32]
 800243c:	441a      	add	r2, r3
 800243e:	6839      	ldr	r1, [r7, #0]
 8002440:	6a3b      	ldr	r3, [r7, #32]
 8002442:	440b      	add	r3, r1
 8002444:	7812      	ldrb	r2, [r2, #0]
 8002446:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8002448:	6a3b      	ldr	r3, [r7, #32]
 800244a:	3301      	adds	r3, #1
 800244c:	623b      	str	r3, [r7, #32]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	4a11      	ldr	r2, [pc, #68]	@ (8002498 <HAL_FDCAN_GetRxMessage+0x20c>)
 8002454:	5cd3      	ldrb	r3, [r2, r3]
 8002456:	461a      	mov	r2, r3
 8002458:	6a3b      	ldr	r3, [r7, #32]
 800245a:	4293      	cmp	r3, r2
 800245c:	d3ec      	bcc.n	8002438 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	2b40      	cmp	r3, #64	@ 0x40
 8002462:	d105      	bne.n	8002470 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	69fa      	ldr	r2, [r7, #28]
 800246a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800246e:	e004      	b.n	800247a <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	69fa      	ldr	r2, [r7, #28]
 8002476:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800247a:	2300      	movs	r3, #0
 800247c:	e006      	b.n	800248c <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002482:	f043 0208 	orr.w	r2, r3, #8
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
  }
}
 800248c:	4618      	mov	r0, r3
 800248e:	372c      	adds	r7, #44	@ 0x2c
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	08006d8c 	.word	0x08006d8c

0800249c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800249c:	b480      	push	{r7}
 800249e:	b087      	sub	sp, #28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80024ae:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80024b0:	7dfb      	ldrb	r3, [r7, #23]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d003      	beq.n	80024be <HAL_FDCAN_ActivateNotification+0x22>
 80024b6:	7dfb      	ldrb	r3, [r7, #23]
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	f040 80c8 	bne.w	800264e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c4:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d004      	beq.n	80024da <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d03b      	beq.n	8002552 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d004      	beq.n	80024ee <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d031      	beq.n	8002552 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d004      	beq.n	8002502 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	f003 0304 	and.w	r3, r3, #4
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d027      	beq.n	8002552 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002508:	2b00      	cmp	r3, #0
 800250a:	d004      	beq.n	8002516 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	f003 0308 	and.w	r3, r3, #8
 8002512:	2b00      	cmp	r3, #0
 8002514:	d01d      	beq.n	8002552 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800251c:	2b00      	cmp	r3, #0
 800251e:	d004      	beq.n	800252a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	f003 0310 	and.w	r3, r3, #16
 8002526:	2b00      	cmp	r3, #0
 8002528:	d013      	beq.n	8002552 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8002530:	2b00      	cmp	r3, #0
 8002532:	d004      	beq.n	800253e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	f003 0320 	and.w	r3, r3, #32
 800253a:	2b00      	cmp	r3, #0
 800253c:	d009      	beq.n	8002552 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00c      	beq.n	8002562 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800254e:	2b00      	cmp	r3, #0
 8002550:	d107      	bne.n	8002562 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f042 0201 	orr.w	r2, r2, #1
 8002560:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	2b00      	cmp	r3, #0
 800256a:	d004      	beq.n	8002576 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d13b      	bne.n	80025ee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800257c:	2b00      	cmp	r3, #0
 800257e:	d004      	beq.n	800258a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d131      	bne.n	80025ee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002590:	2b00      	cmp	r3, #0
 8002592:	d004      	beq.n	800259e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	f003 0304 	and.w	r3, r3, #4
 800259a:	2b00      	cmp	r3, #0
 800259c:	d127      	bne.n	80025ee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d004      	beq.n	80025b2 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	f003 0308 	and.w	r3, r3, #8
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d11d      	bne.n	80025ee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d004      	beq.n	80025c6 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	f003 0310 	and.w	r3, r3, #16
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d113      	bne.n	80025ee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d004      	beq.n	80025da <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	f003 0320 	and.w	r3, r3, #32
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d109      	bne.n	80025ee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00c      	beq.n	80025fe <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d007      	beq.n	80025fe <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f042 0202 	orr.w	r2, r2, #2
 80025fc:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002604:	2b00      	cmp	r3, #0
 8002606:	d009      	beq.n	800261c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	430a      	orrs	r2, r1
 8002618:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002622:	2b00      	cmp	r3, #0
 8002624:	d009      	beq.n	800263a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	430a      	orrs	r2, r1
 8002636:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68ba      	ldr	r2, [r7, #8]
 8002646:	430a      	orrs	r2, r1
 8002648:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 800264a:	2300      	movs	r3, #0
 800264c:	e006      	b.n	800265c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002652:	f043 0202 	orr.w	r2, r3, #2
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
  }
}
 800265c:	4618      	mov	r0, r3
 800265e:	371c      	adds	r7, #28
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b08c      	sub	sp, #48	@ 0x30
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002676:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800267a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002682:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002684:	4013      	ands	r3, r2
 8002686:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800268e:	f003 0307 	and.w	r3, r3, #7
 8002692:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800269a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800269c:	4013      	ands	r3, r2
 800269e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026aa:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026b4:	4013      	ands	r3, r2
 80026b6:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026be:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80026c2:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ca:	6a3a      	ldr	r2, [r7, #32]
 80026cc:	4013      	ands	r3, r2
 80026ce:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026d6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80026da:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026e2:	69fa      	ldr	r2, [r7, #28]
 80026e4:	4013      	ands	r3, r2
 80026e6:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ee:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026f6:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00b      	beq.n	800271a <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002708:	2b00      	cmp	r3, #0
 800270a:	d006      	beq.n	800271a <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2240      	movs	r2, #64	@ 0x40
 8002712:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 f916 	bl	8002946 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002720:	2b00      	cmp	r3, #0
 8002722:	d019      	beq.n	8002758 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800272a:	2b00      	cmp	r3, #0
 800272c:	d014      	beq.n	8002758 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002736:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	4013      	ands	r3, r2
 8002744:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800274e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8002750:	6939      	ldr	r1, [r7, #16]
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 f8d8 	bl	8002908 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800275a:	2b00      	cmp	r3, #0
 800275c:	d007      	beq.n	800276e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002764:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002766:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 f8a2 	bl	80028b2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800276e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002770:	2b00      	cmp	r3, #0
 8002772:	d007      	beq.n	8002784 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800277a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800277c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7fe fc6c 	bl	800105c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002786:	2b00      	cmp	r3, #0
 8002788:	d007      	beq.n	800279a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002790:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002792:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 f897 	bl	80028c8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00c      	beq.n	80027be <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d007      	beq.n	80027be <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027b6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 f890 	bl	80028de <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d018      	beq.n	80027fa <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d013      	beq.n	80027fa <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80027da:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	4013      	ands	r3, r2
 80027e8:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2280      	movs	r2, #128	@ 0x80
 80027f0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80027f2:	68f9      	ldr	r1, [r7, #12]
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 f87c 	bl	80028f2 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00c      	beq.n	800281e <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d007      	beq.n	800281e <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002816:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 f880 	bl	800291e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00c      	beq.n	8002842 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d007      	beq.n	8002842 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800283a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 f878 	bl	8002932 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00f      	beq.n	800286c <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00a      	beq.n	800286c <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800285e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002864:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d007      	beq.n	8002882 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	69fa      	ldr	r2, [r7, #28]
 8002878:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800287a:	69f9      	ldr	r1, [r7, #28]
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 f876 	bl	800296e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d009      	beq.n	800289c <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6a3a      	ldr	r2, [r7, #32]
 800288e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002894:	6a3b      	ldr	r3, [r7, #32]
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d002      	beq.n	80028aa <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 f858 	bl	800295a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80028aa:	bf00      	nop
 80028ac:	3730      	adds	r7, #48	@ 0x30
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
 80028ba:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
 80028fa:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002946:	b480      	push	{r7}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
 8002976:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800298c:	4b30      	ldr	r3, [pc, #192]	@ (8002a50 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800298e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a2f      	ldr	r2, [pc, #188]	@ (8002a54 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d103      	bne.n	80029a2 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80029a0:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a2c      	ldr	r2, [pc, #176]	@ (8002a58 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d103      	bne.n	80029b4 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 80029b2:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68ba      	ldr	r2, [r7, #8]
 80029b8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029c2:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029ca:	041a      	lsls	r2, r3, #16
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029e8:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029f0:	061a      	lsls	r2, r3, #24
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	e005      	b.n	8002a36 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	3304      	adds	r3, #4
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d3f3      	bcc.n	8002a2a <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8002a42:	bf00      	nop
 8002a44:	bf00      	nop
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	4000a400 	.word	0x4000a400
 8002a54:	40006800 	.word	0x40006800
 8002a58:	40006c00 	.word	0x40006c00

08002a5c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b089      	sub	sp, #36	@ 0x24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
 8002a68:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10a      	bne.n	8002a88 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002a7a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002a82:	4313      	orrs	r3, r2
 8002a84:	61fb      	str	r3, [r7, #28]
 8002a86:	e00a      	b.n	8002a9e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002a90:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002a96:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002a98:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002a9c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002aa8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002aae:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002ab4:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002abc:	4313      	orrs	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	4413      	add	r3, r2
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	440b      	add	r3, r1
 8002ad0:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	69fa      	ldr	r2, [r7, #28]
 8002ad6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	3304      	adds	r3, #4
 8002adc:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	3304      	adds	r3, #4
 8002ae8:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002aea:	2300      	movs	r3, #0
 8002aec:	617b      	str	r3, [r7, #20]
 8002aee:	e020      	b.n	8002b32 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	3303      	adds	r3, #3
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	4413      	add	r3, r2
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	3302      	adds	r3, #2
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	440b      	add	r3, r1
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002b08:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	440b      	add	r3, r1
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002b16:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	440a      	add	r2, r1
 8002b1e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002b20:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	3304      	adds	r3, #4
 8002b2a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	3304      	adds	r3, #4
 8002b30:	617b      	str	r3, [r7, #20]
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	4a06      	ldr	r2, [pc, #24]	@ (8002b50 <FDCAN_CopyMessageToRAM+0xf4>)
 8002b38:	5cd3      	ldrb	r3, [r2, r3]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d3d6      	bcc.n	8002af0 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8002b42:	bf00      	nop
 8002b44:	bf00      	nop
 8002b46:	3724      	adds	r7, #36	@ 0x24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	08006d8c 	.word	0x08006d8c

08002b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b087      	sub	sp, #28
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002b62:	e15a      	b.n	8002e1a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	2101      	movs	r1, #1
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b70:	4013      	ands	r3, r2
 8002b72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 814c 	beq.w	8002e14 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f003 0303 	and.w	r3, r3, #3
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d005      	beq.n	8002b94 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d130      	bne.n	8002bf6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	2203      	movs	r2, #3
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	68da      	ldr	r2, [r3, #12]
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bca:	2201      	movs	r2, #1
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	091b      	lsrs	r3, r3, #4
 8002be0:	f003 0201 	and.w	r2, r3, #1
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f003 0303 	and.w	r3, r3, #3
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	d017      	beq.n	8002c32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	2203      	movs	r2, #3
 8002c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c12:	43db      	mvns	r3, r3
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	4013      	ands	r3, r2
 8002c18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	689a      	ldr	r2, [r3, #8]
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d123      	bne.n	8002c86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	08da      	lsrs	r2, r3, #3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	3208      	adds	r2, #8
 8002c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	220f      	movs	r2, #15
 8002c56:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5a:	43db      	mvns	r3, r3
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	691a      	ldr	r2, [r3, #16]
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	08da      	lsrs	r2, r3, #3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	3208      	adds	r2, #8
 8002c80:	6939      	ldr	r1, [r7, #16]
 8002c82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	2203      	movs	r2, #3
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43db      	mvns	r3, r3
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f003 0203 	and.w	r2, r3, #3
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 80a6 	beq.w	8002e14 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cc8:	4b5b      	ldr	r3, [pc, #364]	@ (8002e38 <HAL_GPIO_Init+0x2e4>)
 8002cca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ccc:	4a5a      	ldr	r2, [pc, #360]	@ (8002e38 <HAL_GPIO_Init+0x2e4>)
 8002cce:	f043 0301 	orr.w	r3, r3, #1
 8002cd2:	6613      	str	r3, [r2, #96]	@ 0x60
 8002cd4:	4b58      	ldr	r3, [pc, #352]	@ (8002e38 <HAL_GPIO_Init+0x2e4>)
 8002cd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	60bb      	str	r3, [r7, #8]
 8002cde:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ce0:	4a56      	ldr	r2, [pc, #344]	@ (8002e3c <HAL_GPIO_Init+0x2e8>)
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	089b      	lsrs	r3, r3, #2
 8002ce6:	3302      	adds	r3, #2
 8002ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	f003 0303 	and.w	r3, r3, #3
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	220f      	movs	r2, #15
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	4013      	ands	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002d0a:	d01f      	beq.n	8002d4c <HAL_GPIO_Init+0x1f8>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a4c      	ldr	r2, [pc, #304]	@ (8002e40 <HAL_GPIO_Init+0x2ec>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d019      	beq.n	8002d48 <HAL_GPIO_Init+0x1f4>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a4b      	ldr	r2, [pc, #300]	@ (8002e44 <HAL_GPIO_Init+0x2f0>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d013      	beq.n	8002d44 <HAL_GPIO_Init+0x1f0>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a4a      	ldr	r2, [pc, #296]	@ (8002e48 <HAL_GPIO_Init+0x2f4>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d00d      	beq.n	8002d40 <HAL_GPIO_Init+0x1ec>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a49      	ldr	r2, [pc, #292]	@ (8002e4c <HAL_GPIO_Init+0x2f8>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d007      	beq.n	8002d3c <HAL_GPIO_Init+0x1e8>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a48      	ldr	r2, [pc, #288]	@ (8002e50 <HAL_GPIO_Init+0x2fc>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d101      	bne.n	8002d38 <HAL_GPIO_Init+0x1e4>
 8002d34:	2305      	movs	r3, #5
 8002d36:	e00a      	b.n	8002d4e <HAL_GPIO_Init+0x1fa>
 8002d38:	2306      	movs	r3, #6
 8002d3a:	e008      	b.n	8002d4e <HAL_GPIO_Init+0x1fa>
 8002d3c:	2304      	movs	r3, #4
 8002d3e:	e006      	b.n	8002d4e <HAL_GPIO_Init+0x1fa>
 8002d40:	2303      	movs	r3, #3
 8002d42:	e004      	b.n	8002d4e <HAL_GPIO_Init+0x1fa>
 8002d44:	2302      	movs	r3, #2
 8002d46:	e002      	b.n	8002d4e <HAL_GPIO_Init+0x1fa>
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e000      	b.n	8002d4e <HAL_GPIO_Init+0x1fa>
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	f002 0203 	and.w	r2, r2, #3
 8002d54:	0092      	lsls	r2, r2, #2
 8002d56:	4093      	lsls	r3, r2
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d5e:	4937      	ldr	r1, [pc, #220]	@ (8002e3c <HAL_GPIO_Init+0x2e8>)
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	089b      	lsrs	r3, r3, #2
 8002d64:	3302      	adds	r3, #2
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d6c:	4b39      	ldr	r3, [pc, #228]	@ (8002e54 <HAL_GPIO_Init+0x300>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	43db      	mvns	r3, r3
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d003      	beq.n	8002d90 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d90:	4a30      	ldr	r2, [pc, #192]	@ (8002e54 <HAL_GPIO_Init+0x300>)
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d96:	4b2f      	ldr	r3, [pc, #188]	@ (8002e54 <HAL_GPIO_Init+0x300>)
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	4013      	ands	r3, r2
 8002da4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002dba:	4a26      	ldr	r2, [pc, #152]	@ (8002e54 <HAL_GPIO_Init+0x300>)
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002dc0:	4b24      	ldr	r3, [pc, #144]	@ (8002e54 <HAL_GPIO_Init+0x300>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d003      	beq.n	8002de4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002de4:	4a1b      	ldr	r2, [pc, #108]	@ (8002e54 <HAL_GPIO_Init+0x300>)
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002dea:	4b1a      	ldr	r3, [pc, #104]	@ (8002e54 <HAL_GPIO_Init+0x300>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	43db      	mvns	r3, r3
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	4013      	ands	r3, r2
 8002df8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e0e:	4a11      	ldr	r2, [pc, #68]	@ (8002e54 <HAL_GPIO_Init+0x300>)
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	3301      	adds	r3, #1
 8002e18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	fa22 f303 	lsr.w	r3, r2, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f47f ae9d 	bne.w	8002b64 <HAL_GPIO_Init+0x10>
  }
}
 8002e2a:	bf00      	nop
 8002e2c:	bf00      	nop
 8002e2e:	371c      	adds	r7, #28
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	40010000 	.word	0x40010000
 8002e40:	48000400 	.word	0x48000400
 8002e44:	48000800 	.word	0x48000800
 8002e48:	48000c00 	.word	0x48000c00
 8002e4c:	48001000 	.word	0x48001000
 8002e50:	48001400 	.word	0x48001400
 8002e54:	40010400 	.word	0x40010400

08002e58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	460b      	mov	r3, r1
 8002e62:	807b      	strh	r3, [r7, #2]
 8002e64:	4613      	mov	r3, r2
 8002e66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e68:	787b      	ldrb	r3, [r7, #1]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d003      	beq.n	8002e76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e6e:	887a      	ldrh	r2, [r7, #2]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e74:	e002      	b.n	8002e7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e76:	887a      	ldrh	r2, [r7, #2]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d141      	bne.n	8002f1a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e96:	4b4b      	ldr	r3, [pc, #300]	@ (8002fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002e9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ea2:	d131      	bne.n	8002f08 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ea4:	4b47      	ldr	r3, [pc, #284]	@ (8002fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002eaa:	4a46      	ldr	r2, [pc, #280]	@ (8002fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002eb0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002eb4:	4b43      	ldr	r3, [pc, #268]	@ (8002fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ebc:	4a41      	ldr	r2, [pc, #260]	@ (8002fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ebe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ec2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ec4:	4b40      	ldr	r3, [pc, #256]	@ (8002fc8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2232      	movs	r2, #50	@ 0x32
 8002eca:	fb02 f303 	mul.w	r3, r2, r3
 8002ece:	4a3f      	ldr	r2, [pc, #252]	@ (8002fcc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed4:	0c9b      	lsrs	r3, r3, #18
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002eda:	e002      	b.n	8002ee2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ee2:	4b38      	ldr	r3, [pc, #224]	@ (8002fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eee:	d102      	bne.n	8002ef6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1f2      	bne.n	8002edc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ef6:	4b33      	ldr	r3, [pc, #204]	@ (8002fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002efe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f02:	d158      	bne.n	8002fb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e057      	b.n	8002fb8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f08:	4b2e      	ldr	r3, [pc, #184]	@ (8002fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f0e:	4a2d      	ldr	r2, [pc, #180]	@ (8002fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002f18:	e04d      	b.n	8002fb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f20:	d141      	bne.n	8002fa6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f22:	4b28      	ldr	r3, [pc, #160]	@ (8002fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f2e:	d131      	bne.n	8002f94 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f30:	4b24      	ldr	r3, [pc, #144]	@ (8002fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f36:	4a23      	ldr	r2, [pc, #140]	@ (8002fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f40:	4b20      	ldr	r3, [pc, #128]	@ (8002fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f48:	4a1e      	ldr	r2, [pc, #120]	@ (8002fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f4e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f50:	4b1d      	ldr	r3, [pc, #116]	@ (8002fc8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2232      	movs	r2, #50	@ 0x32
 8002f56:	fb02 f303 	mul.w	r3, r2, r3
 8002f5a:	4a1c      	ldr	r2, [pc, #112]	@ (8002fcc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f60:	0c9b      	lsrs	r3, r3, #18
 8002f62:	3301      	adds	r3, #1
 8002f64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f66:	e002      	b.n	8002f6e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f6e:	4b15      	ldr	r3, [pc, #84]	@ (8002fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f7a:	d102      	bne.n	8002f82 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f2      	bne.n	8002f68 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f82:	4b10      	ldr	r3, [pc, #64]	@ (8002fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f8e:	d112      	bne.n	8002fb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e011      	b.n	8002fb8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f94:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f9a:	4a0a      	ldr	r2, [pc, #40]	@ (8002fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fa0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002fa4:	e007      	b.n	8002fb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002fa6:	4b07      	ldr	r3, [pc, #28]	@ (8002fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002fae:	4a05      	ldr	r2, [pc, #20]	@ (8002fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002fb4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3714      	adds	r7, #20
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	40007000 	.word	0x40007000
 8002fc8:	2000001c 	.word	0x2000001c
 8002fcc:	431bde83 	.word	0x431bde83

08002fd0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002fd4:	4b05      	ldr	r3, [pc, #20]	@ (8002fec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	4a04      	ldr	r2, [pc, #16]	@ (8002fec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002fda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fde:	6093      	str	r3, [r2, #8]
}
 8002fe0:	bf00      	nop
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	40007000 	.word	0x40007000

08002ff0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b088      	sub	sp, #32
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e2fe      	b.n	8003600 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d075      	beq.n	80030fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800300e:	4b97      	ldr	r3, [pc, #604]	@ (800326c <HAL_RCC_OscConfig+0x27c>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 030c 	and.w	r3, r3, #12
 8003016:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003018:	4b94      	ldr	r3, [pc, #592]	@ (800326c <HAL_RCC_OscConfig+0x27c>)
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	f003 0303 	and.w	r3, r3, #3
 8003020:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	2b0c      	cmp	r3, #12
 8003026:	d102      	bne.n	800302e <HAL_RCC_OscConfig+0x3e>
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	2b03      	cmp	r3, #3
 800302c:	d002      	beq.n	8003034 <HAL_RCC_OscConfig+0x44>
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	2b08      	cmp	r3, #8
 8003032:	d10b      	bne.n	800304c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003034:	4b8d      	ldr	r3, [pc, #564]	@ (800326c <HAL_RCC_OscConfig+0x27c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d05b      	beq.n	80030f8 <HAL_RCC_OscConfig+0x108>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d157      	bne.n	80030f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e2d9      	b.n	8003600 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003054:	d106      	bne.n	8003064 <HAL_RCC_OscConfig+0x74>
 8003056:	4b85      	ldr	r3, [pc, #532]	@ (800326c <HAL_RCC_OscConfig+0x27c>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a84      	ldr	r2, [pc, #528]	@ (800326c <HAL_RCC_OscConfig+0x27c>)
 800305c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003060:	6013      	str	r3, [r2, #0]
 8003062:	e01d      	b.n	80030a0 <HAL_RCC_OscConfig+0xb0>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800306c:	d10c      	bne.n	8003088 <HAL_RCC_OscConfig+0x98>
 800306e:	4b7f      	ldr	r3, [pc, #508]	@ (800326c <HAL_RCC_OscConfig+0x27c>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a7e      	ldr	r2, [pc, #504]	@ (800326c <HAL_RCC_OscConfig+0x27c>)
 8003074:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003078:	6013      	str	r3, [r2, #0]
 800307a:	4b7c      	ldr	r3, [pc, #496]	@ (800326c <HAL_RCC_OscConfig+0x27c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a7b      	ldr	r2, [pc, #492]	@ (800326c <HAL_RCC_OscConfig+0x27c>)
 8003080:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003084:	6013      	str	r3, [r2, #0]
 8003086:	e00b      	b.n	80030a0 <HAL_RCC_OscConfig+0xb0>
 8003088:	4b78      	ldr	r3, [pc, #480]	@ (800326c <HAL_RCC_OscConfig+0x27c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a77      	ldr	r2, [pc, #476]	@ (800326c <HAL_RCC_OscConfig+0x27c>)
 800308e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003092:	6013      	str	r3, [r2, #0]
 8003094:	4b75      	ldr	r3, [pc, #468]	@ (800326c <HAL_RCC_OscConfig+0x27c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a74      	ldr	r2, [pc, #464]	@ (800326c <HAL_RCC_OscConfig+0x27c>)
 800309a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800309e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d013      	beq.n	80030d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a8:	f7fe fcc2 	bl	8001a30 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030b0:	f7fe fcbe 	bl	8001a30 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b64      	cmp	r3, #100	@ 0x64
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e29e      	b.n	8003600 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030c2:	4b6a      	ldr	r3, [pc, #424]	@ (800326c <HAL_RCC_OscConfig+0x27c>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0f0      	beq.n	80030b0 <HAL_RCC_OscConfig+0xc0>
 80030ce:	e014      	b.n	80030fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d0:	f7fe fcae 	bl	8001a30 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030d8:	f7fe fcaa 	bl	8001a30 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b64      	cmp	r3, #100	@ 0x64
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e28a      	b.n	8003600 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030ea:	4b60      	ldr	r3, [pc, #384]	@ (800326c <HAL_RCC_OscConfig+0x27c>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1f0      	bne.n	80030d8 <HAL_RCC_OscConfig+0xe8>
 80030f6:	e000      	b.n	80030fa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d075      	beq.n	80031f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003106:	4b59      	ldr	r3, [pc, #356]	@ (800326c <HAL_RCC_OscConfig+0x27c>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 030c 	and.w	r3, r3, #12
 800310e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003110:	4b56      	ldr	r3, [pc, #344]	@ (800326c <HAL_RCC_OscConfig+0x27c>)
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f003 0303 	and.w	r3, r3, #3
 8003118:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	2b0c      	cmp	r3, #12
 800311e:	d102      	bne.n	8003126 <HAL_RCC_OscConfig+0x136>
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	2b02      	cmp	r3, #2
 8003124:	d002      	beq.n	800312c <HAL_RCC_OscConfig+0x13c>
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	2b04      	cmp	r3, #4
 800312a:	d11f      	bne.n	800316c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800312c:	4b4f      	ldr	r3, [pc, #316]	@ (800326c <HAL_RCC_OscConfig+0x27c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003134:	2b00      	cmp	r3, #0
 8003136:	d005      	beq.n	8003144 <HAL_RCC_OscConfig+0x154>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d101      	bne.n	8003144 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e25d      	b.n	8003600 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003144:	4b49      	ldr	r3, [pc, #292]	@ (800326c <HAL_RCC_OscConfig+0x27c>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	061b      	lsls	r3, r3, #24
 8003152:	4946      	ldr	r1, [pc, #280]	@ (800326c <HAL_RCC_OscConfig+0x27c>)
 8003154:	4313      	orrs	r3, r2
 8003156:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003158:	4b45      	ldr	r3, [pc, #276]	@ (8003270 <HAL_RCC_OscConfig+0x280>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4618      	mov	r0, r3
 800315e:	f7fe fc1b 	bl	8001998 <HAL_InitTick>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d043      	beq.n	80031f0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e249      	b.n	8003600 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d023      	beq.n	80031bc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003174:	4b3d      	ldr	r3, [pc, #244]	@ (800326c <HAL_RCC_OscConfig+0x27c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a3c      	ldr	r2, [pc, #240]	@ (800326c <HAL_RCC_OscConfig+0x27c>)
 800317a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800317e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003180:	f7fe fc56 	bl	8001a30 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003188:	f7fe fc52 	bl	8001a30 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e232      	b.n	8003600 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800319a:	4b34      	ldr	r3, [pc, #208]	@ (800326c <HAL_RCC_OscConfig+0x27c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d0f0      	beq.n	8003188 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a6:	4b31      	ldr	r3, [pc, #196]	@ (800326c <HAL_RCC_OscConfig+0x27c>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	061b      	lsls	r3, r3, #24
 80031b4:	492d      	ldr	r1, [pc, #180]	@ (800326c <HAL_RCC_OscConfig+0x27c>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	604b      	str	r3, [r1, #4]
 80031ba:	e01a      	b.n	80031f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031bc:	4b2b      	ldr	r3, [pc, #172]	@ (800326c <HAL_RCC_OscConfig+0x27c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a2a      	ldr	r2, [pc, #168]	@ (800326c <HAL_RCC_OscConfig+0x27c>)
 80031c2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c8:	f7fe fc32 	bl	8001a30 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031d0:	f7fe fc2e 	bl	8001a30 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e20e      	b.n	8003600 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031e2:	4b22      	ldr	r3, [pc, #136]	@ (800326c <HAL_RCC_OscConfig+0x27c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1f0      	bne.n	80031d0 <HAL_RCC_OscConfig+0x1e0>
 80031ee:	e000      	b.n	80031f2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0308 	and.w	r3, r3, #8
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d041      	beq.n	8003282 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d01c      	beq.n	8003240 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003206:	4b19      	ldr	r3, [pc, #100]	@ (800326c <HAL_RCC_OscConfig+0x27c>)
 8003208:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800320c:	4a17      	ldr	r2, [pc, #92]	@ (800326c <HAL_RCC_OscConfig+0x27c>)
 800320e:	f043 0301 	orr.w	r3, r3, #1
 8003212:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003216:	f7fe fc0b 	bl	8001a30 <HAL_GetTick>
 800321a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800321c:	e008      	b.n	8003230 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800321e:	f7fe fc07 	bl	8001a30 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e1e7      	b.n	8003600 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003230:	4b0e      	ldr	r3, [pc, #56]	@ (800326c <HAL_RCC_OscConfig+0x27c>)
 8003232:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0ef      	beq.n	800321e <HAL_RCC_OscConfig+0x22e>
 800323e:	e020      	b.n	8003282 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003240:	4b0a      	ldr	r3, [pc, #40]	@ (800326c <HAL_RCC_OscConfig+0x27c>)
 8003242:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003246:	4a09      	ldr	r2, [pc, #36]	@ (800326c <HAL_RCC_OscConfig+0x27c>)
 8003248:	f023 0301 	bic.w	r3, r3, #1
 800324c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003250:	f7fe fbee 	bl	8001a30 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003256:	e00d      	b.n	8003274 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003258:	f7fe fbea 	bl	8001a30 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d906      	bls.n	8003274 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e1ca      	b.n	8003600 <HAL_RCC_OscConfig+0x610>
 800326a:	bf00      	nop
 800326c:	40021000 	.word	0x40021000
 8003270:	20000020 	.word	0x20000020
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003274:	4b8c      	ldr	r3, [pc, #560]	@ (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 8003276:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1ea      	bne.n	8003258 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0304 	and.w	r3, r3, #4
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 80a6 	beq.w	80033dc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003290:	2300      	movs	r3, #0
 8003292:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003294:	4b84      	ldr	r3, [pc, #528]	@ (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 8003296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003298:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <HAL_RCC_OscConfig+0x2b4>
 80032a0:	2301      	movs	r3, #1
 80032a2:	e000      	b.n	80032a6 <HAL_RCC_OscConfig+0x2b6>
 80032a4:	2300      	movs	r3, #0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00d      	beq.n	80032c6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032aa:	4b7f      	ldr	r3, [pc, #508]	@ (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 80032ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ae:	4a7e      	ldr	r2, [pc, #504]	@ (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 80032b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80032b6:	4b7c      	ldr	r3, [pc, #496]	@ (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 80032b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032be:	60fb      	str	r3, [r7, #12]
 80032c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80032c2:	2301      	movs	r3, #1
 80032c4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032c6:	4b79      	ldr	r3, [pc, #484]	@ (80034ac <HAL_RCC_OscConfig+0x4bc>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d118      	bne.n	8003304 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032d2:	4b76      	ldr	r3, [pc, #472]	@ (80034ac <HAL_RCC_OscConfig+0x4bc>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a75      	ldr	r2, [pc, #468]	@ (80034ac <HAL_RCC_OscConfig+0x4bc>)
 80032d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032de:	f7fe fba7 	bl	8001a30 <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032e4:	e008      	b.n	80032f8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032e6:	f7fe fba3 	bl	8001a30 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e183      	b.n	8003600 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032f8:	4b6c      	ldr	r3, [pc, #432]	@ (80034ac <HAL_RCC_OscConfig+0x4bc>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003300:	2b00      	cmp	r3, #0
 8003302:	d0f0      	beq.n	80032e6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d108      	bne.n	800331e <HAL_RCC_OscConfig+0x32e>
 800330c:	4b66      	ldr	r3, [pc, #408]	@ (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 800330e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003312:	4a65      	ldr	r2, [pc, #404]	@ (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 8003314:	f043 0301 	orr.w	r3, r3, #1
 8003318:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800331c:	e024      	b.n	8003368 <HAL_RCC_OscConfig+0x378>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	2b05      	cmp	r3, #5
 8003324:	d110      	bne.n	8003348 <HAL_RCC_OscConfig+0x358>
 8003326:	4b60      	ldr	r3, [pc, #384]	@ (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 8003328:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800332c:	4a5e      	ldr	r2, [pc, #376]	@ (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 800332e:	f043 0304 	orr.w	r3, r3, #4
 8003332:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003336:	4b5c      	ldr	r3, [pc, #368]	@ (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 8003338:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800333c:	4a5a      	ldr	r2, [pc, #360]	@ (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 800333e:	f043 0301 	orr.w	r3, r3, #1
 8003342:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003346:	e00f      	b.n	8003368 <HAL_RCC_OscConfig+0x378>
 8003348:	4b57      	ldr	r3, [pc, #348]	@ (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 800334a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800334e:	4a56      	ldr	r2, [pc, #344]	@ (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 8003350:	f023 0301 	bic.w	r3, r3, #1
 8003354:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003358:	4b53      	ldr	r3, [pc, #332]	@ (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 800335a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800335e:	4a52      	ldr	r2, [pc, #328]	@ (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 8003360:	f023 0304 	bic.w	r3, r3, #4
 8003364:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d016      	beq.n	800339e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003370:	f7fe fb5e 	bl	8001a30 <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003376:	e00a      	b.n	800338e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003378:	f7fe fb5a 	bl	8001a30 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003386:	4293      	cmp	r3, r2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e138      	b.n	8003600 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800338e:	4b46      	ldr	r3, [pc, #280]	@ (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 8003390:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0ed      	beq.n	8003378 <HAL_RCC_OscConfig+0x388>
 800339c:	e015      	b.n	80033ca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800339e:	f7fe fb47 	bl	8001a30 <HAL_GetTick>
 80033a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033a4:	e00a      	b.n	80033bc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033a6:	f7fe fb43 	bl	8001a30 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e121      	b.n	8003600 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033bc:	4b3a      	ldr	r3, [pc, #232]	@ (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 80033be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1ed      	bne.n	80033a6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033ca:	7ffb      	ldrb	r3, [r7, #31]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d105      	bne.n	80033dc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033d0:	4b35      	ldr	r3, [pc, #212]	@ (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 80033d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033d4:	4a34      	ldr	r2, [pc, #208]	@ (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 80033d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033da:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0320 	and.w	r3, r3, #32
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d03c      	beq.n	8003462 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d01c      	beq.n	800342a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033f0:	4b2d      	ldr	r3, [pc, #180]	@ (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 80033f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033f6:	4a2c      	ldr	r2, [pc, #176]	@ (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 80033f8:	f043 0301 	orr.w	r3, r3, #1
 80033fc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003400:	f7fe fb16 	bl	8001a30 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003408:	f7fe fb12 	bl	8001a30 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e0f2      	b.n	8003600 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800341a:	4b23      	ldr	r3, [pc, #140]	@ (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 800341c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0ef      	beq.n	8003408 <HAL_RCC_OscConfig+0x418>
 8003428:	e01b      	b.n	8003462 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800342a:	4b1f      	ldr	r3, [pc, #124]	@ (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 800342c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003430:	4a1d      	ldr	r2, [pc, #116]	@ (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 8003432:	f023 0301 	bic.w	r3, r3, #1
 8003436:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800343a:	f7fe faf9 	bl	8001a30 <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003442:	f7fe faf5 	bl	8001a30 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e0d5      	b.n	8003600 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003454:	4b14      	ldr	r3, [pc, #80]	@ (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 8003456:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1ef      	bne.n	8003442 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 80c9 	beq.w	80035fe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800346c:	4b0e      	ldr	r3, [pc, #56]	@ (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 030c 	and.w	r3, r3, #12
 8003474:	2b0c      	cmp	r3, #12
 8003476:	f000 8083 	beq.w	8003580 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	2b02      	cmp	r3, #2
 8003480:	d15e      	bne.n	8003540 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003482:	4b09      	ldr	r3, [pc, #36]	@ (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a08      	ldr	r2, [pc, #32]	@ (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 8003488:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800348c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348e:	f7fe facf 	bl	8001a30 <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003494:	e00c      	b.n	80034b0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003496:	f7fe facb 	bl	8001a30 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d905      	bls.n	80034b0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e0ab      	b.n	8003600 <HAL_RCC_OscConfig+0x610>
 80034a8:	40021000 	.word	0x40021000
 80034ac:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034b0:	4b55      	ldr	r3, [pc, #340]	@ (8003608 <HAL_RCC_OscConfig+0x618>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1ec      	bne.n	8003496 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034bc:	4b52      	ldr	r3, [pc, #328]	@ (8003608 <HAL_RCC_OscConfig+0x618>)
 80034be:	68da      	ldr	r2, [r3, #12]
 80034c0:	4b52      	ldr	r3, [pc, #328]	@ (800360c <HAL_RCC_OscConfig+0x61c>)
 80034c2:	4013      	ands	r3, r2
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6a11      	ldr	r1, [r2, #32]
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034cc:	3a01      	subs	r2, #1
 80034ce:	0112      	lsls	r2, r2, #4
 80034d0:	4311      	orrs	r1, r2
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80034d6:	0212      	lsls	r2, r2, #8
 80034d8:	4311      	orrs	r1, r2
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80034de:	0852      	lsrs	r2, r2, #1
 80034e0:	3a01      	subs	r2, #1
 80034e2:	0552      	lsls	r2, r2, #21
 80034e4:	4311      	orrs	r1, r2
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80034ea:	0852      	lsrs	r2, r2, #1
 80034ec:	3a01      	subs	r2, #1
 80034ee:	0652      	lsls	r2, r2, #25
 80034f0:	4311      	orrs	r1, r2
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80034f6:	06d2      	lsls	r2, r2, #27
 80034f8:	430a      	orrs	r2, r1
 80034fa:	4943      	ldr	r1, [pc, #268]	@ (8003608 <HAL_RCC_OscConfig+0x618>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003500:	4b41      	ldr	r3, [pc, #260]	@ (8003608 <HAL_RCC_OscConfig+0x618>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a40      	ldr	r2, [pc, #256]	@ (8003608 <HAL_RCC_OscConfig+0x618>)
 8003506:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800350a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800350c:	4b3e      	ldr	r3, [pc, #248]	@ (8003608 <HAL_RCC_OscConfig+0x618>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	4a3d      	ldr	r2, [pc, #244]	@ (8003608 <HAL_RCC_OscConfig+0x618>)
 8003512:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003516:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003518:	f7fe fa8a 	bl	8001a30 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003520:	f7fe fa86 	bl	8001a30 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e066      	b.n	8003600 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003532:	4b35      	ldr	r3, [pc, #212]	@ (8003608 <HAL_RCC_OscConfig+0x618>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0f0      	beq.n	8003520 <HAL_RCC_OscConfig+0x530>
 800353e:	e05e      	b.n	80035fe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003540:	4b31      	ldr	r3, [pc, #196]	@ (8003608 <HAL_RCC_OscConfig+0x618>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a30      	ldr	r2, [pc, #192]	@ (8003608 <HAL_RCC_OscConfig+0x618>)
 8003546:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800354a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354c:	f7fe fa70 	bl	8001a30 <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003554:	f7fe fa6c 	bl	8001a30 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e04c      	b.n	8003600 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003566:	4b28      	ldr	r3, [pc, #160]	@ (8003608 <HAL_RCC_OscConfig+0x618>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1f0      	bne.n	8003554 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003572:	4b25      	ldr	r3, [pc, #148]	@ (8003608 <HAL_RCC_OscConfig+0x618>)
 8003574:	68da      	ldr	r2, [r3, #12]
 8003576:	4924      	ldr	r1, [pc, #144]	@ (8003608 <HAL_RCC_OscConfig+0x618>)
 8003578:	4b25      	ldr	r3, [pc, #148]	@ (8003610 <HAL_RCC_OscConfig+0x620>)
 800357a:	4013      	ands	r3, r2
 800357c:	60cb      	str	r3, [r1, #12]
 800357e:	e03e      	b.n	80035fe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	69db      	ldr	r3, [r3, #28]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d101      	bne.n	800358c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e039      	b.n	8003600 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800358c:	4b1e      	ldr	r3, [pc, #120]	@ (8003608 <HAL_RCC_OscConfig+0x618>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	f003 0203 	and.w	r2, r3, #3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	429a      	cmp	r2, r3
 800359e:	d12c      	bne.n	80035fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035aa:	3b01      	subs	r3, #1
 80035ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d123      	bne.n	80035fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035be:	429a      	cmp	r2, r3
 80035c0:	d11b      	bne.n	80035fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035cc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d113      	bne.n	80035fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035dc:	085b      	lsrs	r3, r3, #1
 80035de:	3b01      	subs	r3, #1
 80035e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d109      	bne.n	80035fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035f0:	085b      	lsrs	r3, r3, #1
 80035f2:	3b01      	subs	r3, #1
 80035f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d001      	beq.n	80035fe <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e000      	b.n	8003600 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3720      	adds	r7, #32
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	40021000 	.word	0x40021000
 800360c:	019f800c 	.word	0x019f800c
 8003610:	feeefffc 	.word	0xfeeefffc

08003614 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800361e:	2300      	movs	r3, #0
 8003620:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e11e      	b.n	800386a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800362c:	4b91      	ldr	r3, [pc, #580]	@ (8003874 <HAL_RCC_ClockConfig+0x260>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 030f 	and.w	r3, r3, #15
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	429a      	cmp	r2, r3
 8003638:	d910      	bls.n	800365c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800363a:	4b8e      	ldr	r3, [pc, #568]	@ (8003874 <HAL_RCC_ClockConfig+0x260>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f023 020f 	bic.w	r2, r3, #15
 8003642:	498c      	ldr	r1, [pc, #560]	@ (8003874 <HAL_RCC_ClockConfig+0x260>)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	4313      	orrs	r3, r2
 8003648:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800364a:	4b8a      	ldr	r3, [pc, #552]	@ (8003874 <HAL_RCC_ClockConfig+0x260>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 030f 	and.w	r3, r3, #15
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	429a      	cmp	r2, r3
 8003656:	d001      	beq.n	800365c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e106      	b.n	800386a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b00      	cmp	r3, #0
 8003666:	d073      	beq.n	8003750 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	2b03      	cmp	r3, #3
 800366e:	d129      	bne.n	80036c4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003670:	4b81      	ldr	r3, [pc, #516]	@ (8003878 <HAL_RCC_ClockConfig+0x264>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d101      	bne.n	8003680 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e0f4      	b.n	800386a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003680:	f000 f99e 	bl	80039c0 <RCC_GetSysClockFreqFromPLLSource>
 8003684:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	4a7c      	ldr	r2, [pc, #496]	@ (800387c <HAL_RCC_ClockConfig+0x268>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d93f      	bls.n	800370e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800368e:	4b7a      	ldr	r3, [pc, #488]	@ (8003878 <HAL_RCC_ClockConfig+0x264>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d009      	beq.n	80036ae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d033      	beq.n	800370e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d12f      	bne.n	800370e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80036ae:	4b72      	ldr	r3, [pc, #456]	@ (8003878 <HAL_RCC_ClockConfig+0x264>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036b6:	4a70      	ldr	r2, [pc, #448]	@ (8003878 <HAL_RCC_ClockConfig+0x264>)
 80036b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036bc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80036be:	2380      	movs	r3, #128	@ 0x80
 80036c0:	617b      	str	r3, [r7, #20]
 80036c2:	e024      	b.n	800370e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d107      	bne.n	80036dc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036cc:	4b6a      	ldr	r3, [pc, #424]	@ (8003878 <HAL_RCC_ClockConfig+0x264>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d109      	bne.n	80036ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e0c6      	b.n	800386a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036dc:	4b66      	ldr	r3, [pc, #408]	@ (8003878 <HAL_RCC_ClockConfig+0x264>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e0be      	b.n	800386a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80036ec:	f000 f8ce 	bl	800388c <HAL_RCC_GetSysClockFreq>
 80036f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	4a61      	ldr	r2, [pc, #388]	@ (800387c <HAL_RCC_ClockConfig+0x268>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d909      	bls.n	800370e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80036fa:	4b5f      	ldr	r3, [pc, #380]	@ (8003878 <HAL_RCC_ClockConfig+0x264>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003702:	4a5d      	ldr	r2, [pc, #372]	@ (8003878 <HAL_RCC_ClockConfig+0x264>)
 8003704:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003708:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800370a:	2380      	movs	r3, #128	@ 0x80
 800370c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800370e:	4b5a      	ldr	r3, [pc, #360]	@ (8003878 <HAL_RCC_ClockConfig+0x264>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f023 0203 	bic.w	r2, r3, #3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	4957      	ldr	r1, [pc, #348]	@ (8003878 <HAL_RCC_ClockConfig+0x264>)
 800371c:	4313      	orrs	r3, r2
 800371e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003720:	f7fe f986 	bl	8001a30 <HAL_GetTick>
 8003724:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003726:	e00a      	b.n	800373e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003728:	f7fe f982 	bl	8001a30 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003736:	4293      	cmp	r3, r2
 8003738:	d901      	bls.n	800373e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e095      	b.n	800386a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800373e:	4b4e      	ldr	r3, [pc, #312]	@ (8003878 <HAL_RCC_ClockConfig+0x264>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 020c 	and.w	r2, r3, #12
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	429a      	cmp	r2, r3
 800374e:	d1eb      	bne.n	8003728 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d023      	beq.n	80037a4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0304 	and.w	r3, r3, #4
 8003764:	2b00      	cmp	r3, #0
 8003766:	d005      	beq.n	8003774 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003768:	4b43      	ldr	r3, [pc, #268]	@ (8003878 <HAL_RCC_ClockConfig+0x264>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	4a42      	ldr	r2, [pc, #264]	@ (8003878 <HAL_RCC_ClockConfig+0x264>)
 800376e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003772:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0308 	and.w	r3, r3, #8
 800377c:	2b00      	cmp	r3, #0
 800377e:	d007      	beq.n	8003790 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003780:	4b3d      	ldr	r3, [pc, #244]	@ (8003878 <HAL_RCC_ClockConfig+0x264>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003788:	4a3b      	ldr	r2, [pc, #236]	@ (8003878 <HAL_RCC_ClockConfig+0x264>)
 800378a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800378e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003790:	4b39      	ldr	r3, [pc, #228]	@ (8003878 <HAL_RCC_ClockConfig+0x264>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	4936      	ldr	r1, [pc, #216]	@ (8003878 <HAL_RCC_ClockConfig+0x264>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	608b      	str	r3, [r1, #8]
 80037a2:	e008      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	2b80      	cmp	r3, #128	@ 0x80
 80037a8:	d105      	bne.n	80037b6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80037aa:	4b33      	ldr	r3, [pc, #204]	@ (8003878 <HAL_RCC_ClockConfig+0x264>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	4a32      	ldr	r2, [pc, #200]	@ (8003878 <HAL_RCC_ClockConfig+0x264>)
 80037b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037b4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037b6:	4b2f      	ldr	r3, [pc, #188]	@ (8003874 <HAL_RCC_ClockConfig+0x260>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d21d      	bcs.n	8003800 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037c4:	4b2b      	ldr	r3, [pc, #172]	@ (8003874 <HAL_RCC_ClockConfig+0x260>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f023 020f 	bic.w	r2, r3, #15
 80037cc:	4929      	ldr	r1, [pc, #164]	@ (8003874 <HAL_RCC_ClockConfig+0x260>)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80037d4:	f7fe f92c 	bl	8001a30 <HAL_GetTick>
 80037d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037da:	e00a      	b.n	80037f2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037dc:	f7fe f928 	bl	8001a30 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e03b      	b.n	800386a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037f2:	4b20      	ldr	r3, [pc, #128]	@ (8003874 <HAL_RCC_ClockConfig+0x260>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 030f 	and.w	r3, r3, #15
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d1ed      	bne.n	80037dc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b00      	cmp	r3, #0
 800380a:	d008      	beq.n	800381e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800380c:	4b1a      	ldr	r3, [pc, #104]	@ (8003878 <HAL_RCC_ClockConfig+0x264>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	4917      	ldr	r1, [pc, #92]	@ (8003878 <HAL_RCC_ClockConfig+0x264>)
 800381a:	4313      	orrs	r3, r2
 800381c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0308 	and.w	r3, r3, #8
 8003826:	2b00      	cmp	r3, #0
 8003828:	d009      	beq.n	800383e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800382a:	4b13      	ldr	r3, [pc, #76]	@ (8003878 <HAL_RCC_ClockConfig+0x264>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	490f      	ldr	r1, [pc, #60]	@ (8003878 <HAL_RCC_ClockConfig+0x264>)
 800383a:	4313      	orrs	r3, r2
 800383c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800383e:	f000 f825 	bl	800388c <HAL_RCC_GetSysClockFreq>
 8003842:	4602      	mov	r2, r0
 8003844:	4b0c      	ldr	r3, [pc, #48]	@ (8003878 <HAL_RCC_ClockConfig+0x264>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	091b      	lsrs	r3, r3, #4
 800384a:	f003 030f 	and.w	r3, r3, #15
 800384e:	490c      	ldr	r1, [pc, #48]	@ (8003880 <HAL_RCC_ClockConfig+0x26c>)
 8003850:	5ccb      	ldrb	r3, [r1, r3]
 8003852:	f003 031f 	and.w	r3, r3, #31
 8003856:	fa22 f303 	lsr.w	r3, r2, r3
 800385a:	4a0a      	ldr	r2, [pc, #40]	@ (8003884 <HAL_RCC_ClockConfig+0x270>)
 800385c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800385e:	4b0a      	ldr	r3, [pc, #40]	@ (8003888 <HAL_RCC_ClockConfig+0x274>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4618      	mov	r0, r3
 8003864:	f7fe f898 	bl	8001998 <HAL_InitTick>
 8003868:	4603      	mov	r3, r0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3718      	adds	r7, #24
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40022000 	.word	0x40022000
 8003878:	40021000 	.word	0x40021000
 800387c:	04c4b400 	.word	0x04c4b400
 8003880:	08006d74 	.word	0x08006d74
 8003884:	2000001c 	.word	0x2000001c
 8003888:	20000020 	.word	0x20000020

0800388c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800388c:	b480      	push	{r7}
 800388e:	b087      	sub	sp, #28
 8003890:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003892:	4b2c      	ldr	r3, [pc, #176]	@ (8003944 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 030c 	and.w	r3, r3, #12
 800389a:	2b04      	cmp	r3, #4
 800389c:	d102      	bne.n	80038a4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800389e:	4b2a      	ldr	r3, [pc, #168]	@ (8003948 <HAL_RCC_GetSysClockFreq+0xbc>)
 80038a0:	613b      	str	r3, [r7, #16]
 80038a2:	e047      	b.n	8003934 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80038a4:	4b27      	ldr	r3, [pc, #156]	@ (8003944 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f003 030c 	and.w	r3, r3, #12
 80038ac:	2b08      	cmp	r3, #8
 80038ae:	d102      	bne.n	80038b6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038b0:	4b26      	ldr	r3, [pc, #152]	@ (800394c <HAL_RCC_GetSysClockFreq+0xc0>)
 80038b2:	613b      	str	r3, [r7, #16]
 80038b4:	e03e      	b.n	8003934 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80038b6:	4b23      	ldr	r3, [pc, #140]	@ (8003944 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f003 030c 	and.w	r3, r3, #12
 80038be:	2b0c      	cmp	r3, #12
 80038c0:	d136      	bne.n	8003930 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038c2:	4b20      	ldr	r3, [pc, #128]	@ (8003944 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	f003 0303 	and.w	r3, r3, #3
 80038ca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038cc:	4b1d      	ldr	r3, [pc, #116]	@ (8003944 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	091b      	lsrs	r3, r3, #4
 80038d2:	f003 030f 	and.w	r3, r3, #15
 80038d6:	3301      	adds	r3, #1
 80038d8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2b03      	cmp	r3, #3
 80038de:	d10c      	bne.n	80038fa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038e0:	4a1a      	ldr	r2, [pc, #104]	@ (800394c <HAL_RCC_GetSysClockFreq+0xc0>)
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e8:	4a16      	ldr	r2, [pc, #88]	@ (8003944 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038ea:	68d2      	ldr	r2, [r2, #12]
 80038ec:	0a12      	lsrs	r2, r2, #8
 80038ee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80038f2:	fb02 f303 	mul.w	r3, r2, r3
 80038f6:	617b      	str	r3, [r7, #20]
      break;
 80038f8:	e00c      	b.n	8003914 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038fa:	4a13      	ldr	r2, [pc, #76]	@ (8003948 <HAL_RCC_GetSysClockFreq+0xbc>)
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003902:	4a10      	ldr	r2, [pc, #64]	@ (8003944 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003904:	68d2      	ldr	r2, [r2, #12]
 8003906:	0a12      	lsrs	r2, r2, #8
 8003908:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800390c:	fb02 f303 	mul.w	r3, r2, r3
 8003910:	617b      	str	r3, [r7, #20]
      break;
 8003912:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003914:	4b0b      	ldr	r3, [pc, #44]	@ (8003944 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	0e5b      	lsrs	r3, r3, #25
 800391a:	f003 0303 	and.w	r3, r3, #3
 800391e:	3301      	adds	r3, #1
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003924:	697a      	ldr	r2, [r7, #20]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	fbb2 f3f3 	udiv	r3, r2, r3
 800392c:	613b      	str	r3, [r7, #16]
 800392e:	e001      	b.n	8003934 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003930:	2300      	movs	r3, #0
 8003932:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003934:	693b      	ldr	r3, [r7, #16]
}
 8003936:	4618      	mov	r0, r3
 8003938:	371c      	adds	r7, #28
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	40021000 	.word	0x40021000
 8003948:	00f42400 	.word	0x00f42400
 800394c:	007a1200 	.word	0x007a1200

08003950 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003954:	4b03      	ldr	r3, [pc, #12]	@ (8003964 <HAL_RCC_GetHCLKFreq+0x14>)
 8003956:	681b      	ldr	r3, [r3, #0]
}
 8003958:	4618      	mov	r0, r3
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	2000001c 	.word	0x2000001c

08003968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800396c:	f7ff fff0 	bl	8003950 <HAL_RCC_GetHCLKFreq>
 8003970:	4602      	mov	r2, r0
 8003972:	4b06      	ldr	r3, [pc, #24]	@ (800398c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	0a1b      	lsrs	r3, r3, #8
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	4904      	ldr	r1, [pc, #16]	@ (8003990 <HAL_RCC_GetPCLK1Freq+0x28>)
 800397e:	5ccb      	ldrb	r3, [r1, r3]
 8003980:	f003 031f 	and.w	r3, r3, #31
 8003984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003988:	4618      	mov	r0, r3
 800398a:	bd80      	pop	{r7, pc}
 800398c:	40021000 	.word	0x40021000
 8003990:	08006d84 	.word	0x08006d84

08003994 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003998:	f7ff ffda 	bl	8003950 <HAL_RCC_GetHCLKFreq>
 800399c:	4602      	mov	r2, r0
 800399e:	4b06      	ldr	r3, [pc, #24]	@ (80039b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	0adb      	lsrs	r3, r3, #11
 80039a4:	f003 0307 	and.w	r3, r3, #7
 80039a8:	4904      	ldr	r1, [pc, #16]	@ (80039bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80039aa:	5ccb      	ldrb	r3, [r1, r3]
 80039ac:	f003 031f 	and.w	r3, r3, #31
 80039b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	40021000 	.word	0x40021000
 80039bc:	08006d84 	.word	0x08006d84

080039c0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b087      	sub	sp, #28
 80039c4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039c6:	4b1e      	ldr	r3, [pc, #120]	@ (8003a40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003a40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	091b      	lsrs	r3, r3, #4
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	3301      	adds	r3, #1
 80039dc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	2b03      	cmp	r3, #3
 80039e2:	d10c      	bne.n	80039fe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039e4:	4a17      	ldr	r2, [pc, #92]	@ (8003a44 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ec:	4a14      	ldr	r2, [pc, #80]	@ (8003a40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039ee:	68d2      	ldr	r2, [r2, #12]
 80039f0:	0a12      	lsrs	r2, r2, #8
 80039f2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80039f6:	fb02 f303 	mul.w	r3, r2, r3
 80039fa:	617b      	str	r3, [r7, #20]
    break;
 80039fc:	e00c      	b.n	8003a18 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039fe:	4a12      	ldr	r2, [pc, #72]	@ (8003a48 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a06:	4a0e      	ldr	r2, [pc, #56]	@ (8003a40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a08:	68d2      	ldr	r2, [r2, #12]
 8003a0a:	0a12      	lsrs	r2, r2, #8
 8003a0c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a10:	fb02 f303 	mul.w	r3, r2, r3
 8003a14:	617b      	str	r3, [r7, #20]
    break;
 8003a16:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a18:	4b09      	ldr	r3, [pc, #36]	@ (8003a40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	0e5b      	lsrs	r3, r3, #25
 8003a1e:	f003 0303 	and.w	r3, r3, #3
 8003a22:	3301      	adds	r3, #1
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a30:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003a32:	687b      	ldr	r3, [r7, #4]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	371c      	adds	r7, #28
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	40021000 	.word	0x40021000
 8003a44:	007a1200 	.word	0x007a1200
 8003a48:	00f42400 	.word	0x00f42400

08003a4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a54:	2300      	movs	r3, #0
 8003a56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a58:	2300      	movs	r3, #0
 8003a5a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 8098 	beq.w	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a6e:	4b43      	ldr	r3, [pc, #268]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10d      	bne.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a7a:	4b40      	ldr	r3, [pc, #256]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a7e:	4a3f      	ldr	r2, [pc, #252]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a84:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a86:	4b3d      	ldr	r3, [pc, #244]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a8e:	60bb      	str	r3, [r7, #8]
 8003a90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a92:	2301      	movs	r3, #1
 8003a94:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a96:	4b3a      	ldr	r3, [pc, #232]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a39      	ldr	r2, [pc, #228]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aa0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003aa2:	f7fd ffc5 	bl	8001a30 <HAL_GetTick>
 8003aa6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003aa8:	e009      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aaa:	f7fd ffc1 	bl	8001a30 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d902      	bls.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	74fb      	strb	r3, [r7, #19]
        break;
 8003abc:	e005      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003abe:	4b30      	ldr	r3, [pc, #192]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d0ef      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003aca:	7cfb      	ldrb	r3, [r7, #19]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d159      	bne.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ad0:	4b2a      	ldr	r3, [pc, #168]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ad6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ada:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d01e      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d019      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003aec:	4b23      	ldr	r3, [pc, #140]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003af2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003af6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003af8:	4b20      	ldr	r3, [pc, #128]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003afe:	4a1f      	ldr	r2, [pc, #124]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b08:	4b1c      	ldr	r3, [pc, #112]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b0e:	4a1b      	ldr	r2, [pc, #108]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b18:	4a18      	ldr	r2, [pc, #96]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d016      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2a:	f7fd ff81 	bl	8001a30 <HAL_GetTick>
 8003b2e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b30:	e00b      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b32:	f7fd ff7d 	bl	8001a30 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d902      	bls.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	74fb      	strb	r3, [r7, #19]
            break;
 8003b48:	e006      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0ec      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003b58:	7cfb      	ldrb	r3, [r7, #19]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10b      	bne.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b5e:	4b07      	ldr	r3, [pc, #28]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b6c:	4903      	ldr	r1, [pc, #12]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003b74:	e008      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b76:	7cfb      	ldrb	r3, [r7, #19]
 8003b78:	74bb      	strb	r3, [r7, #18]
 8003b7a:	e005      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b84:	7cfb      	ldrb	r3, [r7, #19]
 8003b86:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b88:	7c7b      	ldrb	r3, [r7, #17]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d105      	bne.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b8e:	4ba7      	ldr	r3, [pc, #668]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b92:	4aa6      	ldr	r2, [pc, #664]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b98:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00a      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ba6:	4ba1      	ldr	r3, [pc, #644]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bac:	f023 0203 	bic.w	r2, r3, #3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	499d      	ldr	r1, [pc, #628]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00a      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bc8:	4b98      	ldr	r3, [pc, #608]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bce:	f023 020c 	bic.w	r2, r3, #12
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	4995      	ldr	r1, [pc, #596]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0304 	and.w	r3, r3, #4
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00a      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bea:	4b90      	ldr	r3, [pc, #576]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bf0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	498c      	ldr	r1, [pc, #560]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0308 	and.w	r3, r3, #8
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00a      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c0c:	4b87      	ldr	r3, [pc, #540]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c12:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	4984      	ldr	r1, [pc, #528]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0310 	and.w	r3, r3, #16
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00a      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c2e:	4b7f      	ldr	r3, [pc, #508]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	497b      	ldr	r1, [pc, #492]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0320 	and.w	r3, r3, #32
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00a      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c50:	4b76      	ldr	r3, [pc, #472]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c56:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	4973      	ldr	r1, [pc, #460]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00a      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c72:	4b6e      	ldr	r3, [pc, #440]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c78:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	496a      	ldr	r1, [pc, #424]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00a      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c94:	4b65      	ldr	r3, [pc, #404]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c9a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	4962      	ldr	r1, [pc, #392]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00a      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cb6:	4b5d      	ldr	r3, [pc, #372]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cbc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc4:	4959      	ldr	r1, [pc, #356]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00a      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003cd8:	4b54      	ldr	r3, [pc, #336]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cda:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003cde:	f023 0203 	bic.w	r2, r3, #3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce6:	4951      	ldr	r1, [pc, #324]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00a      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cfa:	4b4c      	ldr	r3, [pc, #304]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d00:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d08:	4948      	ldr	r1, [pc, #288]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d015      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d1c:	4b43      	ldr	r3, [pc, #268]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d22:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d2a:	4940      	ldr	r1, [pc, #256]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d3a:	d105      	bne.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d3c:	4b3b      	ldr	r3, [pc, #236]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	4a3a      	ldr	r2, [pc, #232]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d46:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d015      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d54:	4b35      	ldr	r3, [pc, #212]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d5a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d62:	4932      	ldr	r1, [pc, #200]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d72:	d105      	bne.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d74:	4b2d      	ldr	r3, [pc, #180]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	4a2c      	ldr	r2, [pc, #176]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d7e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d015      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d8c:	4b27      	ldr	r3, [pc, #156]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d92:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d9a:	4924      	ldr	r1, [pc, #144]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003daa:	d105      	bne.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dac:	4b1f      	ldr	r3, [pc, #124]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	4a1e      	ldr	r2, [pc, #120]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003db2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003db6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d015      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dc4:	4b19      	ldr	r3, [pc, #100]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dd2:	4916      	ldr	r1, [pc, #88]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dde:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003de2:	d105      	bne.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003de4:	4b11      	ldr	r3, [pc, #68]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	4a10      	ldr	r2, [pc, #64]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003dee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d019      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e02:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0a:	4908      	ldr	r1, [pc, #32]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e1a:	d109      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e1c:	4b03      	ldr	r3, [pc, #12]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	4a02      	ldr	r2, [pc, #8]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e26:	60d3      	str	r3, [r2, #12]
 8003e28:	e002      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003e2a:	bf00      	nop
 8003e2c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d015      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e3c:	4b29      	ldr	r3, [pc, #164]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e42:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e4a:	4926      	ldr	r1, [pc, #152]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e5a:	d105      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003e5c:	4b21      	ldr	r3, [pc, #132]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	4a20      	ldr	r2, [pc, #128]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e66:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d015      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003e74:	4b1b      	ldr	r3, [pc, #108]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e7a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e82:	4918      	ldr	r1, [pc, #96]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e92:	d105      	bne.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003e94:	4b13      	ldr	r3, [pc, #76]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	4a12      	ldr	r2, [pc, #72]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e9e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d015      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003eac:	4b0d      	ldr	r3, [pc, #52]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003eae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003eb2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eba:	490a      	ldr	r1, [pc, #40]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ec6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003eca:	d105      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ecc:	4b05      	ldr	r3, [pc, #20]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	4a04      	ldr	r2, [pc, #16]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ed2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ed6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003ed8:	7cbb      	ldrb	r3, [r7, #18]
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3718      	adds	r7, #24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	40021000 	.word	0x40021000

08003ee8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e049      	b.n	8003f8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d106      	bne.n	8003f14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7fd fb88 	bl	8001624 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2202      	movs	r2, #2
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3304      	adds	r3, #4
 8003f24:	4619      	mov	r1, r3
 8003f26:	4610      	mov	r0, r2
 8003f28:	f000 fa26 	bl	8004378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
	...

08003f98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d001      	beq.n	8003fb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e054      	b.n	800405a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68da      	ldr	r2, [r3, #12]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 0201 	orr.w	r2, r2, #1
 8003fc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a26      	ldr	r2, [pc, #152]	@ (8004068 <HAL_TIM_Base_Start_IT+0xd0>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d022      	beq.n	8004018 <HAL_TIM_Base_Start_IT+0x80>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fda:	d01d      	beq.n	8004018 <HAL_TIM_Base_Start_IT+0x80>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a22      	ldr	r2, [pc, #136]	@ (800406c <HAL_TIM_Base_Start_IT+0xd4>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d018      	beq.n	8004018 <HAL_TIM_Base_Start_IT+0x80>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a21      	ldr	r2, [pc, #132]	@ (8004070 <HAL_TIM_Base_Start_IT+0xd8>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d013      	beq.n	8004018 <HAL_TIM_Base_Start_IT+0x80>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a1f      	ldr	r2, [pc, #124]	@ (8004074 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d00e      	beq.n	8004018 <HAL_TIM_Base_Start_IT+0x80>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a1e      	ldr	r2, [pc, #120]	@ (8004078 <HAL_TIM_Base_Start_IT+0xe0>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d009      	beq.n	8004018 <HAL_TIM_Base_Start_IT+0x80>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a1c      	ldr	r2, [pc, #112]	@ (800407c <HAL_TIM_Base_Start_IT+0xe4>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d004      	beq.n	8004018 <HAL_TIM_Base_Start_IT+0x80>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a1b      	ldr	r2, [pc, #108]	@ (8004080 <HAL_TIM_Base_Start_IT+0xe8>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d115      	bne.n	8004044 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689a      	ldr	r2, [r3, #8]
 800401e:	4b19      	ldr	r3, [pc, #100]	@ (8004084 <HAL_TIM_Base_Start_IT+0xec>)
 8004020:	4013      	ands	r3, r2
 8004022:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2b06      	cmp	r3, #6
 8004028:	d015      	beq.n	8004056 <HAL_TIM_Base_Start_IT+0xbe>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004030:	d011      	beq.n	8004056 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f042 0201 	orr.w	r2, r2, #1
 8004040:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004042:	e008      	b.n	8004056 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 0201 	orr.w	r2, r2, #1
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	e000      	b.n	8004058 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004056:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	40012c00 	.word	0x40012c00
 800406c:	40000400 	.word	0x40000400
 8004070:	40000800 	.word	0x40000800
 8004074:	40000c00 	.word	0x40000c00
 8004078:	40013400 	.word	0x40013400
 800407c:	40014000 	.word	0x40014000
 8004080:	40015000 	.word	0x40015000
 8004084:	00010007 	.word	0x00010007

08004088 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d020      	beq.n	80040ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d01b      	beq.n	80040ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f06f 0202 	mvn.w	r2, #2
 80040bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	f003 0303 	and.w	r3, r3, #3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f931 	bl	800433a <HAL_TIM_IC_CaptureCallback>
 80040d8:	e005      	b.n	80040e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f923 	bl	8004326 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f934 	bl	800434e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	f003 0304 	and.w	r3, r3, #4
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d020      	beq.n	8004138 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d01b      	beq.n	8004138 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f06f 0204 	mvn.w	r2, #4
 8004108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2202      	movs	r2, #2
 800410e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f90b 	bl	800433a <HAL_TIM_IC_CaptureCallback>
 8004124:	e005      	b.n	8004132 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f8fd 	bl	8004326 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 f90e 	bl	800434e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	f003 0308 	and.w	r3, r3, #8
 800413e:	2b00      	cmp	r3, #0
 8004140:	d020      	beq.n	8004184 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f003 0308 	and.w	r3, r3, #8
 8004148:	2b00      	cmp	r3, #0
 800414a:	d01b      	beq.n	8004184 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f06f 0208 	mvn.w	r2, #8
 8004154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2204      	movs	r2, #4
 800415a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f8e5 	bl	800433a <HAL_TIM_IC_CaptureCallback>
 8004170:	e005      	b.n	800417e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f8d7 	bl	8004326 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 f8e8 	bl	800434e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	f003 0310 	and.w	r3, r3, #16
 800418a:	2b00      	cmp	r3, #0
 800418c:	d020      	beq.n	80041d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f003 0310 	and.w	r3, r3, #16
 8004194:	2b00      	cmp	r3, #0
 8004196:	d01b      	beq.n	80041d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f06f 0210 	mvn.w	r2, #16
 80041a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2208      	movs	r2, #8
 80041a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d003      	beq.n	80041be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f8bf 	bl	800433a <HAL_TIM_IC_CaptureCallback>
 80041bc:	e005      	b.n	80041ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f8b1 	bl	8004326 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 f8c2 	bl	800434e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00c      	beq.n	80041f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d007      	beq.n	80041f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f06f 0201 	mvn.w	r2, #1
 80041ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7fc fdfe 	bl	8000df0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d104      	bne.n	8004208 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00c      	beq.n	8004222 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800420e:	2b00      	cmp	r3, #0
 8004210:	d007      	beq.n	8004222 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800421a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 f9ff 	bl	8004620 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00c      	beq.n	8004246 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004232:	2b00      	cmp	r3, #0
 8004234:	d007      	beq.n	8004246 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800423e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 f9f7 	bl	8004634 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00c      	beq.n	800426a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004256:	2b00      	cmp	r3, #0
 8004258:	d007      	beq.n	800426a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 f87c 	bl	8004362 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	f003 0320 	and.w	r3, r3, #32
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00c      	beq.n	800428e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f003 0320 	and.w	r3, r3, #32
 800427a:	2b00      	cmp	r3, #0
 800427c:	d007      	beq.n	800428e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f06f 0220 	mvn.w	r2, #32
 8004286:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 f9bf 	bl	800460c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00c      	beq.n	80042b2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d007      	beq.n	80042b2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80042aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 f9cb 	bl	8004648 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00c      	beq.n	80042d6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d007      	beq.n	80042d6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80042ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 f9c3 	bl	800465c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00c      	beq.n	80042fa <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d007      	beq.n	80042fa <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80042f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 f9bb 	bl	8004670 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00c      	beq.n	800431e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d007      	beq.n	800431e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004316:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 f9b3 	bl	8004684 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800431e:	bf00      	nop
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004326:	b480      	push	{r7}
 8004328:	b083      	sub	sp, #12
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800432e:	bf00      	nop
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr

0800433a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800433a:	b480      	push	{r7}
 800433c:	b083      	sub	sp, #12
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004342:	bf00      	nop
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr

0800434e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800434e:	b480      	push	{r7}
 8004350:	b083      	sub	sp, #12
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004356:	bf00      	nop
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr

08004362 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004362:	b480      	push	{r7}
 8004364:	b083      	sub	sp, #12
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800436a:	bf00      	nop
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
	...

08004378 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a4c      	ldr	r2, [pc, #304]	@ (80044bc <TIM_Base_SetConfig+0x144>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d017      	beq.n	80043c0 <TIM_Base_SetConfig+0x48>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004396:	d013      	beq.n	80043c0 <TIM_Base_SetConfig+0x48>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a49      	ldr	r2, [pc, #292]	@ (80044c0 <TIM_Base_SetConfig+0x148>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d00f      	beq.n	80043c0 <TIM_Base_SetConfig+0x48>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a48      	ldr	r2, [pc, #288]	@ (80044c4 <TIM_Base_SetConfig+0x14c>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d00b      	beq.n	80043c0 <TIM_Base_SetConfig+0x48>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a47      	ldr	r2, [pc, #284]	@ (80044c8 <TIM_Base_SetConfig+0x150>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d007      	beq.n	80043c0 <TIM_Base_SetConfig+0x48>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a46      	ldr	r2, [pc, #280]	@ (80044cc <TIM_Base_SetConfig+0x154>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d003      	beq.n	80043c0 <TIM_Base_SetConfig+0x48>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a45      	ldr	r2, [pc, #276]	@ (80044d0 <TIM_Base_SetConfig+0x158>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d108      	bne.n	80043d2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a39      	ldr	r2, [pc, #228]	@ (80044bc <TIM_Base_SetConfig+0x144>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d023      	beq.n	8004422 <TIM_Base_SetConfig+0xaa>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043e0:	d01f      	beq.n	8004422 <TIM_Base_SetConfig+0xaa>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a36      	ldr	r2, [pc, #216]	@ (80044c0 <TIM_Base_SetConfig+0x148>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d01b      	beq.n	8004422 <TIM_Base_SetConfig+0xaa>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a35      	ldr	r2, [pc, #212]	@ (80044c4 <TIM_Base_SetConfig+0x14c>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d017      	beq.n	8004422 <TIM_Base_SetConfig+0xaa>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a34      	ldr	r2, [pc, #208]	@ (80044c8 <TIM_Base_SetConfig+0x150>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d013      	beq.n	8004422 <TIM_Base_SetConfig+0xaa>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a33      	ldr	r2, [pc, #204]	@ (80044cc <TIM_Base_SetConfig+0x154>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d00f      	beq.n	8004422 <TIM_Base_SetConfig+0xaa>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a33      	ldr	r2, [pc, #204]	@ (80044d4 <TIM_Base_SetConfig+0x15c>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d00b      	beq.n	8004422 <TIM_Base_SetConfig+0xaa>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a32      	ldr	r2, [pc, #200]	@ (80044d8 <TIM_Base_SetConfig+0x160>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d007      	beq.n	8004422 <TIM_Base_SetConfig+0xaa>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a31      	ldr	r2, [pc, #196]	@ (80044dc <TIM_Base_SetConfig+0x164>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d003      	beq.n	8004422 <TIM_Base_SetConfig+0xaa>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a2c      	ldr	r2, [pc, #176]	@ (80044d0 <TIM_Base_SetConfig+0x158>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d108      	bne.n	8004434 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004428:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	4313      	orrs	r3, r2
 8004432:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	4313      	orrs	r3, r2
 8004440:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	689a      	ldr	r2, [r3, #8]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a18      	ldr	r2, [pc, #96]	@ (80044bc <TIM_Base_SetConfig+0x144>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d013      	beq.n	8004488 <TIM_Base_SetConfig+0x110>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a1a      	ldr	r2, [pc, #104]	@ (80044cc <TIM_Base_SetConfig+0x154>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d00f      	beq.n	8004488 <TIM_Base_SetConfig+0x110>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a1a      	ldr	r2, [pc, #104]	@ (80044d4 <TIM_Base_SetConfig+0x15c>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d00b      	beq.n	8004488 <TIM_Base_SetConfig+0x110>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a19      	ldr	r2, [pc, #100]	@ (80044d8 <TIM_Base_SetConfig+0x160>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d007      	beq.n	8004488 <TIM_Base_SetConfig+0x110>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a18      	ldr	r2, [pc, #96]	@ (80044dc <TIM_Base_SetConfig+0x164>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d003      	beq.n	8004488 <TIM_Base_SetConfig+0x110>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a13      	ldr	r2, [pc, #76]	@ (80044d0 <TIM_Base_SetConfig+0x158>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d103      	bne.n	8004490 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	691a      	ldr	r2, [r3, #16]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d105      	bne.n	80044ae <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	f023 0201 	bic.w	r2, r3, #1
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	611a      	str	r2, [r3, #16]
  }
}
 80044ae:	bf00      	nop
 80044b0:	3714      	adds	r7, #20
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	40012c00 	.word	0x40012c00
 80044c0:	40000400 	.word	0x40000400
 80044c4:	40000800 	.word	0x40000800
 80044c8:	40000c00 	.word	0x40000c00
 80044cc:	40013400 	.word	0x40013400
 80044d0:	40015000 	.word	0x40015000
 80044d4:	40014000 	.word	0x40014000
 80044d8:	40014400 	.word	0x40014400
 80044dc:	40014800 	.word	0x40014800

080044e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d101      	bne.n	80044f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044f4:	2302      	movs	r3, #2
 80044f6:	e074      	b.n	80045e2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2202      	movs	r2, #2
 8004504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a34      	ldr	r2, [pc, #208]	@ (80045f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d009      	beq.n	8004536 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a33      	ldr	r2, [pc, #204]	@ (80045f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d004      	beq.n	8004536 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a31      	ldr	r2, [pc, #196]	@ (80045f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d108      	bne.n	8004548 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800453c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	4313      	orrs	r3, r2
 8004546:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800454e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004552:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	4313      	orrs	r3, r2
 800455c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a21      	ldr	r2, [pc, #132]	@ (80045f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d022      	beq.n	80045b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004578:	d01d      	beq.n	80045b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a1f      	ldr	r2, [pc, #124]	@ (80045fc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d018      	beq.n	80045b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a1d      	ldr	r2, [pc, #116]	@ (8004600 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d013      	beq.n	80045b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a1c      	ldr	r2, [pc, #112]	@ (8004604 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d00e      	beq.n	80045b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a15      	ldr	r2, [pc, #84]	@ (80045f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d009      	beq.n	80045b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a18      	ldr	r2, [pc, #96]	@ (8004608 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d004      	beq.n	80045b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a11      	ldr	r2, [pc, #68]	@ (80045f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d10c      	bne.n	80045d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68ba      	ldr	r2, [r7, #8]
 80045ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3714      	adds	r7, #20
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	40012c00 	.word	0x40012c00
 80045f4:	40013400 	.word	0x40013400
 80045f8:	40015000 	.word	0x40015000
 80045fc:	40000400 	.word	0x40000400
 8004600:	40000800 	.word	0x40000800
 8004604:	40000c00 	.word	0x40000c00
 8004608:	40014000 	.word	0x40014000

0800460c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e042      	b.n	8004730 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d106      	bne.n	80046c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f7fc ffd7 	bl	8001670 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2224      	movs	r2, #36	@ 0x24
 80046c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f022 0201 	bic.w	r2, r2, #1
 80046d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d002      	beq.n	80046e8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 fef6 	bl	80054d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 fbf7 	bl	8004edc <UART_SetConfig>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d101      	bne.n	80046f8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e01b      	b.n	8004730 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	685a      	ldr	r2, [r3, #4]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004706:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689a      	ldr	r2, [r3, #8]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004716:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f042 0201 	orr.w	r2, r2, #1
 8004726:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 ff75 	bl	8005618 <UART_CheckIdleState>
 800472e:	4603      	mov	r3, r0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3708      	adds	r7, #8
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b08a      	sub	sp, #40	@ 0x28
 800473c:	af02      	add	r7, sp, #8
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	603b      	str	r3, [r7, #0]
 8004744:	4613      	mov	r3, r2
 8004746:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800474e:	2b20      	cmp	r3, #32
 8004750:	d17b      	bne.n	800484a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d002      	beq.n	800475e <HAL_UART_Transmit+0x26>
 8004758:	88fb      	ldrh	r3, [r7, #6]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e074      	b.n	800484c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2221      	movs	r2, #33	@ 0x21
 800476e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004772:	f7fd f95d 	bl	8001a30 <HAL_GetTick>
 8004776:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	88fa      	ldrh	r2, [r7, #6]
 800477c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	88fa      	ldrh	r2, [r7, #6]
 8004784:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004790:	d108      	bne.n	80047a4 <HAL_UART_Transmit+0x6c>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d104      	bne.n	80047a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800479a:	2300      	movs	r3, #0
 800479c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	61bb      	str	r3, [r7, #24]
 80047a2:	e003      	b.n	80047ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047a8:	2300      	movs	r3, #0
 80047aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80047ac:	e030      	b.n	8004810 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	2200      	movs	r2, #0
 80047b6:	2180      	movs	r1, #128	@ 0x80
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f000 ffd7 	bl	800576c <UART_WaitOnFlagUntilTimeout>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d005      	beq.n	80047d0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2220      	movs	r2, #32
 80047c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e03d      	b.n	800484c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10b      	bne.n	80047ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	881b      	ldrh	r3, [r3, #0]
 80047da:	461a      	mov	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047e4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	3302      	adds	r3, #2
 80047ea:	61bb      	str	r3, [r7, #24]
 80047ec:	e007      	b.n	80047fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	781a      	ldrb	r2, [r3, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	3301      	adds	r3, #1
 80047fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004804:	b29b      	uxth	r3, r3
 8004806:	3b01      	subs	r3, #1
 8004808:	b29a      	uxth	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004816:	b29b      	uxth	r3, r3
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1c8      	bne.n	80047ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	9300      	str	r3, [sp, #0]
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	2200      	movs	r2, #0
 8004824:	2140      	movs	r1, #64	@ 0x40
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f000 ffa0 	bl	800576c <UART_WaitOnFlagUntilTimeout>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d005      	beq.n	800483e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2220      	movs	r2, #32
 8004836:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e006      	b.n	800484c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2220      	movs	r2, #32
 8004842:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004846:	2300      	movs	r3, #0
 8004848:	e000      	b.n	800484c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800484a:	2302      	movs	r3, #2
  }
}
 800484c:	4618      	mov	r0, r3
 800484e:	3720      	adds	r7, #32
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b0ba      	sub	sp, #232	@ 0xe8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	69db      	ldr	r3, [r3, #28]
 8004862:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800487a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800487e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004882:	4013      	ands	r3, r2
 8004884:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004888:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800488c:	2b00      	cmp	r3, #0
 800488e:	d11b      	bne.n	80048c8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004894:	f003 0320 	and.w	r3, r3, #32
 8004898:	2b00      	cmp	r3, #0
 800489a:	d015      	beq.n	80048c8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800489c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048a0:	f003 0320 	and.w	r3, r3, #32
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d105      	bne.n	80048b4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80048a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d009      	beq.n	80048c8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f000 82e3 	beq.w	8004e84 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	4798      	blx	r3
      }
      return;
 80048c6:	e2dd      	b.n	8004e84 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80048c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f000 8123 	beq.w	8004b18 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80048d2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80048d6:	4b8d      	ldr	r3, [pc, #564]	@ (8004b0c <HAL_UART_IRQHandler+0x2b8>)
 80048d8:	4013      	ands	r3, r2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d106      	bne.n	80048ec <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80048de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80048e2:	4b8b      	ldr	r3, [pc, #556]	@ (8004b10 <HAL_UART_IRQHandler+0x2bc>)
 80048e4:	4013      	ands	r3, r2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f000 8116 	beq.w	8004b18 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80048ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048f0:	f003 0301 	and.w	r3, r3, #1
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d011      	beq.n	800491c <HAL_UART_IRQHandler+0xc8>
 80048f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00b      	beq.n	800491c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2201      	movs	r2, #1
 800490a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004912:	f043 0201 	orr.w	r2, r3, #1
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800491c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d011      	beq.n	800494c <HAL_UART_IRQHandler+0xf8>
 8004928:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00b      	beq.n	800494c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2202      	movs	r2, #2
 800493a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004942:	f043 0204 	orr.w	r2, r3, #4
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800494c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004950:	f003 0304 	and.w	r3, r3, #4
 8004954:	2b00      	cmp	r3, #0
 8004956:	d011      	beq.n	800497c <HAL_UART_IRQHandler+0x128>
 8004958:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00b      	beq.n	800497c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2204      	movs	r2, #4
 800496a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004972:	f043 0202 	orr.w	r2, r3, #2
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800497c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004980:	f003 0308 	and.w	r3, r3, #8
 8004984:	2b00      	cmp	r3, #0
 8004986:	d017      	beq.n	80049b8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800498c:	f003 0320 	and.w	r3, r3, #32
 8004990:	2b00      	cmp	r3, #0
 8004992:	d105      	bne.n	80049a0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004994:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004998:	4b5c      	ldr	r3, [pc, #368]	@ (8004b0c <HAL_UART_IRQHandler+0x2b8>)
 800499a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00b      	beq.n	80049b8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2208      	movs	r2, #8
 80049a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ae:	f043 0208 	orr.w	r2, r3, #8
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80049b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d012      	beq.n	80049ea <HAL_UART_IRQHandler+0x196>
 80049c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00c      	beq.n	80049ea <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80049d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049e0:	f043 0220 	orr.w	r2, r3, #32
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 8249 	beq.w	8004e88 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80049f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049fa:	f003 0320 	and.w	r3, r3, #32
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d013      	beq.n	8004a2a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004a02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a06:	f003 0320 	and.w	r3, r3, #32
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d105      	bne.n	8004a1a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004a0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d007      	beq.n	8004a2a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d003      	beq.n	8004a2a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a30:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a3e:	2b40      	cmp	r3, #64	@ 0x40
 8004a40:	d005      	beq.n	8004a4e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004a42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a46:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d054      	beq.n	8004af8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 fef9 	bl	8005846 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a5e:	2b40      	cmp	r3, #64	@ 0x40
 8004a60:	d146      	bne.n	8004af0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	3308      	adds	r3, #8
 8004a68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004a70:	e853 3f00 	ldrex	r3, [r3]
 8004a74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004a78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	3308      	adds	r3, #8
 8004a8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004a8e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004a92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004a9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004a9e:	e841 2300 	strex	r3, r2, [r1]
 8004aa2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004aa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1d9      	bne.n	8004a62 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d017      	beq.n	8004ae8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004abe:	4a15      	ldr	r2, [pc, #84]	@ (8004b14 <HAL_UART_IRQHandler+0x2c0>)
 8004ac0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7fd f925 	bl	8001d18 <HAL_DMA_Abort_IT>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d019      	beq.n	8004b08 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004ae2:	4610      	mov	r0, r2
 8004ae4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae6:	e00f      	b.n	8004b08 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 f9e1 	bl	8004eb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aee:	e00b      	b.n	8004b08 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 f9dd 	bl	8004eb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004af6:	e007      	b.n	8004b08 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 f9d9 	bl	8004eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004b06:	e1bf      	b.n	8004e88 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b08:	bf00      	nop
    return;
 8004b0a:	e1bd      	b.n	8004e88 <HAL_UART_IRQHandler+0x634>
 8004b0c:	10000001 	.word	0x10000001
 8004b10:	04000120 	.word	0x04000120
 8004b14:	08005913 	.word	0x08005913

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	f040 8153 	bne.w	8004dc8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b26:	f003 0310 	and.w	r3, r3, #16
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f000 814c 	beq.w	8004dc8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b34:	f003 0310 	and.w	r3, r3, #16
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 8145 	beq.w	8004dc8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2210      	movs	r2, #16
 8004b44:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b50:	2b40      	cmp	r3, #64	@ 0x40
 8004b52:	f040 80bb 	bne.w	8004ccc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f000 818f 	beq.w	8004e8c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004b74:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	f080 8187 	bcs.w	8004e8c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b84:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0320 	and.w	r3, r3, #32
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f040 8087 	bne.w	8004caa <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ba8:	e853 3f00 	ldrex	r3, [r3]
 8004bac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004bb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004bb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004bc6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004bca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004bd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004bd6:	e841 2300 	strex	r3, r2, [r1]
 8004bda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004bde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1da      	bne.n	8004b9c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	3308      	adds	r3, #8
 8004bec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bf0:	e853 3f00 	ldrex	r3, [r3]
 8004bf4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004bf6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004bf8:	f023 0301 	bic.w	r3, r3, #1
 8004bfc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	3308      	adds	r3, #8
 8004c06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004c0a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004c0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c10:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004c12:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004c16:	e841 2300 	strex	r3, r2, [r1]
 8004c1a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004c1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1e1      	bne.n	8004be6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	3308      	adds	r3, #8
 8004c28:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c2c:	e853 3f00 	ldrex	r3, [r3]
 8004c30:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004c32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	3308      	adds	r3, #8
 8004c42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004c46:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004c48:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004c4c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004c4e:	e841 2300 	strex	r3, r2, [r1]
 8004c52:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004c54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1e3      	bne.n	8004c22 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2220      	movs	r2, #32
 8004c5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c70:	e853 3f00 	ldrex	r3, [r3]
 8004c74:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004c76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c78:	f023 0310 	bic.w	r3, r3, #16
 8004c7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	461a      	mov	r2, r3
 8004c86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c8a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004c8c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004c90:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004c92:	e841 2300 	strex	r3, r2, [r1]
 8004c96:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004c98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1e4      	bne.n	8004c68 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f7fc ffde 	bl	8001c66 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2202      	movs	r2, #2
 8004cae:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 f8fd 	bl	8004ec4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004cca:	e0df      	b.n	8004e8c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 80d1 	beq.w	8004e90 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004cee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f000 80cc 	beq.w	8004e90 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d00:	e853 3f00 	ldrex	r3, [r3]
 8004d04:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d0c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	461a      	mov	r2, r3
 8004d16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004d1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d1c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d22:	e841 2300 	strex	r3, r2, [r1]
 8004d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1e4      	bne.n	8004cf8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	3308      	adds	r3, #8
 8004d34:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d38:	e853 3f00 	ldrex	r3, [r3]
 8004d3c:	623b      	str	r3, [r7, #32]
   return(result);
 8004d3e:	6a3b      	ldr	r3, [r7, #32]
 8004d40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d44:	f023 0301 	bic.w	r3, r3, #1
 8004d48:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	3308      	adds	r3, #8
 8004d52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004d56:	633a      	str	r2, [r7, #48]	@ 0x30
 8004d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d5e:	e841 2300 	strex	r3, r2, [r1]
 8004d62:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1e1      	bne.n	8004d2e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2220      	movs	r2, #32
 8004d6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	e853 3f00 	ldrex	r3, [r3]
 8004d8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f023 0310 	bic.w	r3, r3, #16
 8004d92:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004da0:	61fb      	str	r3, [r7, #28]
 8004da2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da4:	69b9      	ldr	r1, [r7, #24]
 8004da6:	69fa      	ldr	r2, [r7, #28]
 8004da8:	e841 2300 	strex	r3, r2, [r1]
 8004dac:	617b      	str	r3, [r7, #20]
   return(result);
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1e4      	bne.n	8004d7e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2202      	movs	r2, #2
 8004db8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004dba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 f87f 	bl	8004ec4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004dc6:	e063      	b.n	8004e90 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dcc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00e      	beq.n	8004df2 <HAL_UART_IRQHandler+0x59e>
 8004dd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d008      	beq.n	8004df2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004de8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 fdd2 	bl	8005994 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004df0:	e051      	b.n	8004e96 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004df6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d014      	beq.n	8004e28 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004dfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d105      	bne.n	8004e16 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004e0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d008      	beq.n	8004e28 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d03a      	beq.n	8004e94 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	4798      	blx	r3
    }
    return;
 8004e26:	e035      	b.n	8004e94 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d009      	beq.n	8004e48 <HAL_UART_IRQHandler+0x5f4>
 8004e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d003      	beq.n	8004e48 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 fd7c 	bl	800593e <UART_EndTransmit_IT>
    return;
 8004e46:	e026      	b.n	8004e96 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d009      	beq.n	8004e68 <HAL_UART_IRQHandler+0x614>
 8004e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e58:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d003      	beq.n	8004e68 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 fdab 	bl	80059bc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e66:	e016      	b.n	8004e96 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d010      	beq.n	8004e96 <HAL_UART_IRQHandler+0x642>
 8004e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	da0c      	bge.n	8004e96 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 fd93 	bl	80059a8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e82:	e008      	b.n	8004e96 <HAL_UART_IRQHandler+0x642>
      return;
 8004e84:	bf00      	nop
 8004e86:	e006      	b.n	8004e96 <HAL_UART_IRQHandler+0x642>
    return;
 8004e88:	bf00      	nop
 8004e8a:	e004      	b.n	8004e96 <HAL_UART_IRQHandler+0x642>
      return;
 8004e8c:	bf00      	nop
 8004e8e:	e002      	b.n	8004e96 <HAL_UART_IRQHandler+0x642>
      return;
 8004e90:	bf00      	nop
 8004e92:	e000      	b.n	8004e96 <HAL_UART_IRQHandler+0x642>
    return;
 8004e94:	bf00      	nop
  }
}
 8004e96:	37e8      	adds	r7, #232	@ 0xe8
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	460b      	mov	r3, r1
 8004ece:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ed0:	bf00      	nop
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004edc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ee0:	b08c      	sub	sp, #48	@ 0x30
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	689a      	ldr	r2, [r3, #8]
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	431a      	orrs	r2, r3
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	69db      	ldr	r3, [r3, #28]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	4baa      	ldr	r3, [pc, #680]	@ (80051b4 <UART_SetConfig+0x2d8>)
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	6812      	ldr	r2, [r2, #0]
 8004f12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f14:	430b      	orrs	r3, r1
 8004f16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	68da      	ldr	r2, [r3, #12]
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a9f      	ldr	r2, [pc, #636]	@ (80051b8 <UART_SetConfig+0x2dc>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d004      	beq.n	8004f48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f44:	4313      	orrs	r3, r2
 8004f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004f52:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	6812      	ldr	r2, [r2, #0]
 8004f5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f5c:	430b      	orrs	r3, r1
 8004f5e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f66:	f023 010f 	bic.w	r1, r3, #15
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	430a      	orrs	r2, r1
 8004f74:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a90      	ldr	r2, [pc, #576]	@ (80051bc <UART_SetConfig+0x2e0>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d125      	bne.n	8004fcc <UART_SetConfig+0xf0>
 8004f80:	4b8f      	ldr	r3, [pc, #572]	@ (80051c0 <UART_SetConfig+0x2e4>)
 8004f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f86:	f003 0303 	and.w	r3, r3, #3
 8004f8a:	2b03      	cmp	r3, #3
 8004f8c:	d81a      	bhi.n	8004fc4 <UART_SetConfig+0xe8>
 8004f8e:	a201      	add	r2, pc, #4	@ (adr r2, 8004f94 <UART_SetConfig+0xb8>)
 8004f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f94:	08004fa5 	.word	0x08004fa5
 8004f98:	08004fb5 	.word	0x08004fb5
 8004f9c:	08004fad 	.word	0x08004fad
 8004fa0:	08004fbd 	.word	0x08004fbd
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004faa:	e116      	b.n	80051da <UART_SetConfig+0x2fe>
 8004fac:	2302      	movs	r3, #2
 8004fae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fb2:	e112      	b.n	80051da <UART_SetConfig+0x2fe>
 8004fb4:	2304      	movs	r3, #4
 8004fb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fba:	e10e      	b.n	80051da <UART_SetConfig+0x2fe>
 8004fbc:	2308      	movs	r3, #8
 8004fbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fc2:	e10a      	b.n	80051da <UART_SetConfig+0x2fe>
 8004fc4:	2310      	movs	r3, #16
 8004fc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fca:	e106      	b.n	80051da <UART_SetConfig+0x2fe>
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a7c      	ldr	r2, [pc, #496]	@ (80051c4 <UART_SetConfig+0x2e8>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d138      	bne.n	8005048 <UART_SetConfig+0x16c>
 8004fd6:	4b7a      	ldr	r3, [pc, #488]	@ (80051c0 <UART_SetConfig+0x2e4>)
 8004fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fdc:	f003 030c 	and.w	r3, r3, #12
 8004fe0:	2b0c      	cmp	r3, #12
 8004fe2:	d82d      	bhi.n	8005040 <UART_SetConfig+0x164>
 8004fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8004fec <UART_SetConfig+0x110>)
 8004fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fea:	bf00      	nop
 8004fec:	08005021 	.word	0x08005021
 8004ff0:	08005041 	.word	0x08005041
 8004ff4:	08005041 	.word	0x08005041
 8004ff8:	08005041 	.word	0x08005041
 8004ffc:	08005031 	.word	0x08005031
 8005000:	08005041 	.word	0x08005041
 8005004:	08005041 	.word	0x08005041
 8005008:	08005041 	.word	0x08005041
 800500c:	08005029 	.word	0x08005029
 8005010:	08005041 	.word	0x08005041
 8005014:	08005041 	.word	0x08005041
 8005018:	08005041 	.word	0x08005041
 800501c:	08005039 	.word	0x08005039
 8005020:	2300      	movs	r3, #0
 8005022:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005026:	e0d8      	b.n	80051da <UART_SetConfig+0x2fe>
 8005028:	2302      	movs	r3, #2
 800502a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800502e:	e0d4      	b.n	80051da <UART_SetConfig+0x2fe>
 8005030:	2304      	movs	r3, #4
 8005032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005036:	e0d0      	b.n	80051da <UART_SetConfig+0x2fe>
 8005038:	2308      	movs	r3, #8
 800503a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800503e:	e0cc      	b.n	80051da <UART_SetConfig+0x2fe>
 8005040:	2310      	movs	r3, #16
 8005042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005046:	e0c8      	b.n	80051da <UART_SetConfig+0x2fe>
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a5e      	ldr	r2, [pc, #376]	@ (80051c8 <UART_SetConfig+0x2ec>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d125      	bne.n	800509e <UART_SetConfig+0x1c2>
 8005052:	4b5b      	ldr	r3, [pc, #364]	@ (80051c0 <UART_SetConfig+0x2e4>)
 8005054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005058:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800505c:	2b30      	cmp	r3, #48	@ 0x30
 800505e:	d016      	beq.n	800508e <UART_SetConfig+0x1b2>
 8005060:	2b30      	cmp	r3, #48	@ 0x30
 8005062:	d818      	bhi.n	8005096 <UART_SetConfig+0x1ba>
 8005064:	2b20      	cmp	r3, #32
 8005066:	d00a      	beq.n	800507e <UART_SetConfig+0x1a2>
 8005068:	2b20      	cmp	r3, #32
 800506a:	d814      	bhi.n	8005096 <UART_SetConfig+0x1ba>
 800506c:	2b00      	cmp	r3, #0
 800506e:	d002      	beq.n	8005076 <UART_SetConfig+0x19a>
 8005070:	2b10      	cmp	r3, #16
 8005072:	d008      	beq.n	8005086 <UART_SetConfig+0x1aa>
 8005074:	e00f      	b.n	8005096 <UART_SetConfig+0x1ba>
 8005076:	2300      	movs	r3, #0
 8005078:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800507c:	e0ad      	b.n	80051da <UART_SetConfig+0x2fe>
 800507e:	2302      	movs	r3, #2
 8005080:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005084:	e0a9      	b.n	80051da <UART_SetConfig+0x2fe>
 8005086:	2304      	movs	r3, #4
 8005088:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800508c:	e0a5      	b.n	80051da <UART_SetConfig+0x2fe>
 800508e:	2308      	movs	r3, #8
 8005090:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005094:	e0a1      	b.n	80051da <UART_SetConfig+0x2fe>
 8005096:	2310      	movs	r3, #16
 8005098:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800509c:	e09d      	b.n	80051da <UART_SetConfig+0x2fe>
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a4a      	ldr	r2, [pc, #296]	@ (80051cc <UART_SetConfig+0x2f0>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d125      	bne.n	80050f4 <UART_SetConfig+0x218>
 80050a8:	4b45      	ldr	r3, [pc, #276]	@ (80051c0 <UART_SetConfig+0x2e4>)
 80050aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050ae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80050b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80050b4:	d016      	beq.n	80050e4 <UART_SetConfig+0x208>
 80050b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80050b8:	d818      	bhi.n	80050ec <UART_SetConfig+0x210>
 80050ba:	2b80      	cmp	r3, #128	@ 0x80
 80050bc:	d00a      	beq.n	80050d4 <UART_SetConfig+0x1f8>
 80050be:	2b80      	cmp	r3, #128	@ 0x80
 80050c0:	d814      	bhi.n	80050ec <UART_SetConfig+0x210>
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d002      	beq.n	80050cc <UART_SetConfig+0x1f0>
 80050c6:	2b40      	cmp	r3, #64	@ 0x40
 80050c8:	d008      	beq.n	80050dc <UART_SetConfig+0x200>
 80050ca:	e00f      	b.n	80050ec <UART_SetConfig+0x210>
 80050cc:	2300      	movs	r3, #0
 80050ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050d2:	e082      	b.n	80051da <UART_SetConfig+0x2fe>
 80050d4:	2302      	movs	r3, #2
 80050d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050da:	e07e      	b.n	80051da <UART_SetConfig+0x2fe>
 80050dc:	2304      	movs	r3, #4
 80050de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050e2:	e07a      	b.n	80051da <UART_SetConfig+0x2fe>
 80050e4:	2308      	movs	r3, #8
 80050e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050ea:	e076      	b.n	80051da <UART_SetConfig+0x2fe>
 80050ec:	2310      	movs	r3, #16
 80050ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050f2:	e072      	b.n	80051da <UART_SetConfig+0x2fe>
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a35      	ldr	r2, [pc, #212]	@ (80051d0 <UART_SetConfig+0x2f4>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d12a      	bne.n	8005154 <UART_SetConfig+0x278>
 80050fe:	4b30      	ldr	r3, [pc, #192]	@ (80051c0 <UART_SetConfig+0x2e4>)
 8005100:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005104:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005108:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800510c:	d01a      	beq.n	8005144 <UART_SetConfig+0x268>
 800510e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005112:	d81b      	bhi.n	800514c <UART_SetConfig+0x270>
 8005114:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005118:	d00c      	beq.n	8005134 <UART_SetConfig+0x258>
 800511a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800511e:	d815      	bhi.n	800514c <UART_SetConfig+0x270>
 8005120:	2b00      	cmp	r3, #0
 8005122:	d003      	beq.n	800512c <UART_SetConfig+0x250>
 8005124:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005128:	d008      	beq.n	800513c <UART_SetConfig+0x260>
 800512a:	e00f      	b.n	800514c <UART_SetConfig+0x270>
 800512c:	2300      	movs	r3, #0
 800512e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005132:	e052      	b.n	80051da <UART_SetConfig+0x2fe>
 8005134:	2302      	movs	r3, #2
 8005136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800513a:	e04e      	b.n	80051da <UART_SetConfig+0x2fe>
 800513c:	2304      	movs	r3, #4
 800513e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005142:	e04a      	b.n	80051da <UART_SetConfig+0x2fe>
 8005144:	2308      	movs	r3, #8
 8005146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800514a:	e046      	b.n	80051da <UART_SetConfig+0x2fe>
 800514c:	2310      	movs	r3, #16
 800514e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005152:	e042      	b.n	80051da <UART_SetConfig+0x2fe>
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a17      	ldr	r2, [pc, #92]	@ (80051b8 <UART_SetConfig+0x2dc>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d13a      	bne.n	80051d4 <UART_SetConfig+0x2f8>
 800515e:	4b18      	ldr	r3, [pc, #96]	@ (80051c0 <UART_SetConfig+0x2e4>)
 8005160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005164:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005168:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800516c:	d01a      	beq.n	80051a4 <UART_SetConfig+0x2c8>
 800516e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005172:	d81b      	bhi.n	80051ac <UART_SetConfig+0x2d0>
 8005174:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005178:	d00c      	beq.n	8005194 <UART_SetConfig+0x2b8>
 800517a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800517e:	d815      	bhi.n	80051ac <UART_SetConfig+0x2d0>
 8005180:	2b00      	cmp	r3, #0
 8005182:	d003      	beq.n	800518c <UART_SetConfig+0x2b0>
 8005184:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005188:	d008      	beq.n	800519c <UART_SetConfig+0x2c0>
 800518a:	e00f      	b.n	80051ac <UART_SetConfig+0x2d0>
 800518c:	2300      	movs	r3, #0
 800518e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005192:	e022      	b.n	80051da <UART_SetConfig+0x2fe>
 8005194:	2302      	movs	r3, #2
 8005196:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800519a:	e01e      	b.n	80051da <UART_SetConfig+0x2fe>
 800519c:	2304      	movs	r3, #4
 800519e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051a2:	e01a      	b.n	80051da <UART_SetConfig+0x2fe>
 80051a4:	2308      	movs	r3, #8
 80051a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051aa:	e016      	b.n	80051da <UART_SetConfig+0x2fe>
 80051ac:	2310      	movs	r3, #16
 80051ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051b2:	e012      	b.n	80051da <UART_SetConfig+0x2fe>
 80051b4:	cfff69f3 	.word	0xcfff69f3
 80051b8:	40008000 	.word	0x40008000
 80051bc:	40013800 	.word	0x40013800
 80051c0:	40021000 	.word	0x40021000
 80051c4:	40004400 	.word	0x40004400
 80051c8:	40004800 	.word	0x40004800
 80051cc:	40004c00 	.word	0x40004c00
 80051d0:	40005000 	.word	0x40005000
 80051d4:	2310      	movs	r3, #16
 80051d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4aae      	ldr	r2, [pc, #696]	@ (8005498 <UART_SetConfig+0x5bc>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	f040 8097 	bne.w	8005314 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80051e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80051ea:	2b08      	cmp	r3, #8
 80051ec:	d823      	bhi.n	8005236 <UART_SetConfig+0x35a>
 80051ee:	a201      	add	r2, pc, #4	@ (adr r2, 80051f4 <UART_SetConfig+0x318>)
 80051f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f4:	08005219 	.word	0x08005219
 80051f8:	08005237 	.word	0x08005237
 80051fc:	08005221 	.word	0x08005221
 8005200:	08005237 	.word	0x08005237
 8005204:	08005227 	.word	0x08005227
 8005208:	08005237 	.word	0x08005237
 800520c:	08005237 	.word	0x08005237
 8005210:	08005237 	.word	0x08005237
 8005214:	0800522f 	.word	0x0800522f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005218:	f7fe fba6 	bl	8003968 <HAL_RCC_GetPCLK1Freq>
 800521c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800521e:	e010      	b.n	8005242 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005220:	4b9e      	ldr	r3, [pc, #632]	@ (800549c <UART_SetConfig+0x5c0>)
 8005222:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005224:	e00d      	b.n	8005242 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005226:	f7fe fb31 	bl	800388c <HAL_RCC_GetSysClockFreq>
 800522a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800522c:	e009      	b.n	8005242 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800522e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005232:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005234:	e005      	b.n	8005242 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005236:	2300      	movs	r3, #0
 8005238:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005240:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 8130 	beq.w	80054aa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524e:	4a94      	ldr	r2, [pc, #592]	@ (80054a0 <UART_SetConfig+0x5c4>)
 8005250:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005254:	461a      	mov	r2, r3
 8005256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005258:	fbb3 f3f2 	udiv	r3, r3, r2
 800525c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	685a      	ldr	r2, [r3, #4]
 8005262:	4613      	mov	r3, r2
 8005264:	005b      	lsls	r3, r3, #1
 8005266:	4413      	add	r3, r2
 8005268:	69ba      	ldr	r2, [r7, #24]
 800526a:	429a      	cmp	r2, r3
 800526c:	d305      	bcc.n	800527a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005274:	69ba      	ldr	r2, [r7, #24]
 8005276:	429a      	cmp	r2, r3
 8005278:	d903      	bls.n	8005282 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005280:	e113      	b.n	80054aa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005284:	2200      	movs	r2, #0
 8005286:	60bb      	str	r3, [r7, #8]
 8005288:	60fa      	str	r2, [r7, #12]
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800528e:	4a84      	ldr	r2, [pc, #528]	@ (80054a0 <UART_SetConfig+0x5c4>)
 8005290:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005294:	b29b      	uxth	r3, r3
 8005296:	2200      	movs	r2, #0
 8005298:	603b      	str	r3, [r7, #0]
 800529a:	607a      	str	r2, [r7, #4]
 800529c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80052a4:	f7fb fc2a 	bl	8000afc <__aeabi_uldivmod>
 80052a8:	4602      	mov	r2, r0
 80052aa:	460b      	mov	r3, r1
 80052ac:	4610      	mov	r0, r2
 80052ae:	4619      	mov	r1, r3
 80052b0:	f04f 0200 	mov.w	r2, #0
 80052b4:	f04f 0300 	mov.w	r3, #0
 80052b8:	020b      	lsls	r3, r1, #8
 80052ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80052be:	0202      	lsls	r2, r0, #8
 80052c0:	6979      	ldr	r1, [r7, #20]
 80052c2:	6849      	ldr	r1, [r1, #4]
 80052c4:	0849      	lsrs	r1, r1, #1
 80052c6:	2000      	movs	r0, #0
 80052c8:	460c      	mov	r4, r1
 80052ca:	4605      	mov	r5, r0
 80052cc:	eb12 0804 	adds.w	r8, r2, r4
 80052d0:	eb43 0905 	adc.w	r9, r3, r5
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	469a      	mov	sl, r3
 80052dc:	4693      	mov	fp, r2
 80052de:	4652      	mov	r2, sl
 80052e0:	465b      	mov	r3, fp
 80052e2:	4640      	mov	r0, r8
 80052e4:	4649      	mov	r1, r9
 80052e6:	f7fb fc09 	bl	8000afc <__aeabi_uldivmod>
 80052ea:	4602      	mov	r2, r0
 80052ec:	460b      	mov	r3, r1
 80052ee:	4613      	mov	r3, r2
 80052f0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80052f2:	6a3b      	ldr	r3, [r7, #32]
 80052f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052f8:	d308      	bcc.n	800530c <UART_SetConfig+0x430>
 80052fa:	6a3b      	ldr	r3, [r7, #32]
 80052fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005300:	d204      	bcs.n	800530c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	6a3a      	ldr	r2, [r7, #32]
 8005308:	60da      	str	r2, [r3, #12]
 800530a:	e0ce      	b.n	80054aa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005312:	e0ca      	b.n	80054aa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	69db      	ldr	r3, [r3, #28]
 8005318:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800531c:	d166      	bne.n	80053ec <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800531e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005322:	2b08      	cmp	r3, #8
 8005324:	d827      	bhi.n	8005376 <UART_SetConfig+0x49a>
 8005326:	a201      	add	r2, pc, #4	@ (adr r2, 800532c <UART_SetConfig+0x450>)
 8005328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800532c:	08005351 	.word	0x08005351
 8005330:	08005359 	.word	0x08005359
 8005334:	08005361 	.word	0x08005361
 8005338:	08005377 	.word	0x08005377
 800533c:	08005367 	.word	0x08005367
 8005340:	08005377 	.word	0x08005377
 8005344:	08005377 	.word	0x08005377
 8005348:	08005377 	.word	0x08005377
 800534c:	0800536f 	.word	0x0800536f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005350:	f7fe fb0a 	bl	8003968 <HAL_RCC_GetPCLK1Freq>
 8005354:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005356:	e014      	b.n	8005382 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005358:	f7fe fb1c 	bl	8003994 <HAL_RCC_GetPCLK2Freq>
 800535c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800535e:	e010      	b.n	8005382 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005360:	4b4e      	ldr	r3, [pc, #312]	@ (800549c <UART_SetConfig+0x5c0>)
 8005362:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005364:	e00d      	b.n	8005382 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005366:	f7fe fa91 	bl	800388c <HAL_RCC_GetSysClockFreq>
 800536a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800536c:	e009      	b.n	8005382 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800536e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005372:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005374:	e005      	b.n	8005382 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005376:	2300      	movs	r3, #0
 8005378:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005380:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005384:	2b00      	cmp	r3, #0
 8005386:	f000 8090 	beq.w	80054aa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800538e:	4a44      	ldr	r2, [pc, #272]	@ (80054a0 <UART_SetConfig+0x5c4>)
 8005390:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005394:	461a      	mov	r2, r3
 8005396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005398:	fbb3 f3f2 	udiv	r3, r3, r2
 800539c:	005a      	lsls	r2, r3, #1
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	085b      	lsrs	r3, r3, #1
 80053a4:	441a      	add	r2, r3
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053b0:	6a3b      	ldr	r3, [r7, #32]
 80053b2:	2b0f      	cmp	r3, #15
 80053b4:	d916      	bls.n	80053e4 <UART_SetConfig+0x508>
 80053b6:	6a3b      	ldr	r3, [r7, #32]
 80053b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053bc:	d212      	bcs.n	80053e4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053be:	6a3b      	ldr	r3, [r7, #32]
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	f023 030f 	bic.w	r3, r3, #15
 80053c6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053c8:	6a3b      	ldr	r3, [r7, #32]
 80053ca:	085b      	lsrs	r3, r3, #1
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	f003 0307 	and.w	r3, r3, #7
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	8bfb      	ldrh	r3, [r7, #30]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	8bfa      	ldrh	r2, [r7, #30]
 80053e0:	60da      	str	r2, [r3, #12]
 80053e2:	e062      	b.n	80054aa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80053ea:	e05e      	b.n	80054aa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053ec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80053f0:	2b08      	cmp	r3, #8
 80053f2:	d828      	bhi.n	8005446 <UART_SetConfig+0x56a>
 80053f4:	a201      	add	r2, pc, #4	@ (adr r2, 80053fc <UART_SetConfig+0x520>)
 80053f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053fa:	bf00      	nop
 80053fc:	08005421 	.word	0x08005421
 8005400:	08005429 	.word	0x08005429
 8005404:	08005431 	.word	0x08005431
 8005408:	08005447 	.word	0x08005447
 800540c:	08005437 	.word	0x08005437
 8005410:	08005447 	.word	0x08005447
 8005414:	08005447 	.word	0x08005447
 8005418:	08005447 	.word	0x08005447
 800541c:	0800543f 	.word	0x0800543f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005420:	f7fe faa2 	bl	8003968 <HAL_RCC_GetPCLK1Freq>
 8005424:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005426:	e014      	b.n	8005452 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005428:	f7fe fab4 	bl	8003994 <HAL_RCC_GetPCLK2Freq>
 800542c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800542e:	e010      	b.n	8005452 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005430:	4b1a      	ldr	r3, [pc, #104]	@ (800549c <UART_SetConfig+0x5c0>)
 8005432:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005434:	e00d      	b.n	8005452 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005436:	f7fe fa29 	bl	800388c <HAL_RCC_GetSysClockFreq>
 800543a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800543c:	e009      	b.n	8005452 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800543e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005442:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005444:	e005      	b.n	8005452 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005446:	2300      	movs	r3, #0
 8005448:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005450:	bf00      	nop
    }

    if (pclk != 0U)
 8005452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005454:	2b00      	cmp	r3, #0
 8005456:	d028      	beq.n	80054aa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800545c:	4a10      	ldr	r2, [pc, #64]	@ (80054a0 <UART_SetConfig+0x5c4>)
 800545e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005462:	461a      	mov	r2, r3
 8005464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005466:	fbb3 f2f2 	udiv	r2, r3, r2
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	085b      	lsrs	r3, r3, #1
 8005470:	441a      	add	r2, r3
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	fbb2 f3f3 	udiv	r3, r2, r3
 800547a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800547c:	6a3b      	ldr	r3, [r7, #32]
 800547e:	2b0f      	cmp	r3, #15
 8005480:	d910      	bls.n	80054a4 <UART_SetConfig+0x5c8>
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005488:	d20c      	bcs.n	80054a4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800548a:	6a3b      	ldr	r3, [r7, #32]
 800548c:	b29a      	uxth	r2, r3
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	60da      	str	r2, [r3, #12]
 8005494:	e009      	b.n	80054aa <UART_SetConfig+0x5ce>
 8005496:	bf00      	nop
 8005498:	40008000 	.word	0x40008000
 800549c:	00f42400 	.word	0x00f42400
 80054a0:	08006d9c 	.word	0x08006d9c
      }
      else
      {
        ret = HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	2200      	movs	r2, #0
 80054be:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	2200      	movs	r2, #0
 80054c4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80054c6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3730      	adds	r7, #48	@ 0x30
 80054ce:	46bd      	mov	sp, r7
 80054d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080054d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e0:	f003 0308 	and.w	r3, r3, #8
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00a      	beq.n	80054fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	430a      	orrs	r2, r1
 80054fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00a      	beq.n	8005520 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	430a      	orrs	r2, r1
 800551e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005524:	f003 0302 	and.w	r3, r3, #2
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00a      	beq.n	8005542 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	430a      	orrs	r2, r1
 8005540:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005546:	f003 0304 	and.w	r3, r3, #4
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00a      	beq.n	8005564 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	430a      	orrs	r2, r1
 8005562:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005568:	f003 0310 	and.w	r3, r3, #16
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00a      	beq.n	8005586 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800558a:	f003 0320 	and.w	r3, r3, #32
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00a      	beq.n	80055a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	430a      	orrs	r2, r1
 80055a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d01a      	beq.n	80055ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	430a      	orrs	r2, r1
 80055c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055d2:	d10a      	bne.n	80055ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	430a      	orrs	r2, r1
 80055e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00a      	beq.n	800560c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	430a      	orrs	r2, r1
 800560a:	605a      	str	r2, [r3, #4]
  }
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b098      	sub	sp, #96	@ 0x60
 800561c:	af02      	add	r7, sp, #8
 800561e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005628:	f7fc fa02 	bl	8001a30 <HAL_GetTick>
 800562c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0308 	and.w	r3, r3, #8
 8005638:	2b08      	cmp	r3, #8
 800563a:	d12f      	bne.n	800569c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800563c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005640:	9300      	str	r3, [sp, #0]
 8005642:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005644:	2200      	movs	r2, #0
 8005646:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f88e 	bl	800576c <UART_WaitOnFlagUntilTimeout>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d022      	beq.n	800569c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800565e:	e853 3f00 	ldrex	r3, [r3]
 8005662:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005666:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800566a:	653b      	str	r3, [r7, #80]	@ 0x50
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	461a      	mov	r2, r3
 8005672:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005674:	647b      	str	r3, [r7, #68]	@ 0x44
 8005676:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005678:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800567a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800567c:	e841 2300 	strex	r3, r2, [r1]
 8005680:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1e6      	bne.n	8005656 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2220      	movs	r2, #32
 800568c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e063      	b.n	8005764 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0304 	and.w	r3, r3, #4
 80056a6:	2b04      	cmp	r3, #4
 80056a8:	d149      	bne.n	800573e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056aa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056b2:	2200      	movs	r2, #0
 80056b4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 f857 	bl	800576c <UART_WaitOnFlagUntilTimeout>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d03c      	beq.n	800573e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056cc:	e853 3f00 	ldrex	r3, [r3]
 80056d0:	623b      	str	r3, [r7, #32]
   return(result);
 80056d2:	6a3b      	ldr	r3, [r7, #32]
 80056d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	461a      	mov	r2, r3
 80056e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80056e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056ea:	e841 2300 	strex	r3, r2, [r1]
 80056ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1e6      	bne.n	80056c4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	3308      	adds	r3, #8
 80056fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	e853 3f00 	ldrex	r3, [r3]
 8005704:	60fb      	str	r3, [r7, #12]
   return(result);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f023 0301 	bic.w	r3, r3, #1
 800570c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	3308      	adds	r3, #8
 8005714:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005716:	61fa      	str	r2, [r7, #28]
 8005718:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571a:	69b9      	ldr	r1, [r7, #24]
 800571c:	69fa      	ldr	r2, [r7, #28]
 800571e:	e841 2300 	strex	r3, r2, [r1]
 8005722:	617b      	str	r3, [r7, #20]
   return(result);
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1e5      	bne.n	80056f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2220      	movs	r2, #32
 800572e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e012      	b.n	8005764 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2220      	movs	r2, #32
 8005742:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2220      	movs	r2, #32
 800574a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3758      	adds	r7, #88	@ 0x58
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	603b      	str	r3, [r7, #0]
 8005778:	4613      	mov	r3, r2
 800577a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800577c:	e04f      	b.n	800581e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005784:	d04b      	beq.n	800581e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005786:	f7fc f953 	bl	8001a30 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	69ba      	ldr	r2, [r7, #24]
 8005792:	429a      	cmp	r2, r3
 8005794:	d302      	bcc.n	800579c <UART_WaitOnFlagUntilTimeout+0x30>
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d101      	bne.n	80057a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e04e      	b.n	800583e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0304 	and.w	r3, r3, #4
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d037      	beq.n	800581e <UART_WaitOnFlagUntilTimeout+0xb2>
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	2b80      	cmp	r3, #128	@ 0x80
 80057b2:	d034      	beq.n	800581e <UART_WaitOnFlagUntilTimeout+0xb2>
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	2b40      	cmp	r3, #64	@ 0x40
 80057b8:	d031      	beq.n	800581e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	69db      	ldr	r3, [r3, #28]
 80057c0:	f003 0308 	and.w	r3, r3, #8
 80057c4:	2b08      	cmp	r3, #8
 80057c6:	d110      	bne.n	80057ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2208      	movs	r2, #8
 80057ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f000 f838 	bl	8005846 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2208      	movs	r2, #8
 80057da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e029      	b.n	800583e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	69db      	ldr	r3, [r3, #28]
 80057f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057f8:	d111      	bne.n	800581e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005802:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	f000 f81e 	bl	8005846 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2220      	movs	r2, #32
 800580e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e00f      	b.n	800583e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	69da      	ldr	r2, [r3, #28]
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	4013      	ands	r3, r2
 8005828:	68ba      	ldr	r2, [r7, #8]
 800582a:	429a      	cmp	r2, r3
 800582c:	bf0c      	ite	eq
 800582e:	2301      	moveq	r3, #1
 8005830:	2300      	movne	r3, #0
 8005832:	b2db      	uxtb	r3, r3
 8005834:	461a      	mov	r2, r3
 8005836:	79fb      	ldrb	r3, [r7, #7]
 8005838:	429a      	cmp	r2, r3
 800583a:	d0a0      	beq.n	800577e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005846:	b480      	push	{r7}
 8005848:	b095      	sub	sp, #84	@ 0x54
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005856:	e853 3f00 	ldrex	r3, [r3]
 800585a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800585c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800585e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005862:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	461a      	mov	r2, r3
 800586a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800586c:	643b      	str	r3, [r7, #64]	@ 0x40
 800586e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005870:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005872:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005874:	e841 2300 	strex	r3, r2, [r1]
 8005878:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800587a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1e6      	bne.n	800584e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	3308      	adds	r3, #8
 8005886:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005888:	6a3b      	ldr	r3, [r7, #32]
 800588a:	e853 3f00 	ldrex	r3, [r3]
 800588e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005896:	f023 0301 	bic.w	r3, r3, #1
 800589a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	3308      	adds	r3, #8
 80058a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058ac:	e841 2300 	strex	r3, r2, [r1]
 80058b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80058b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1e3      	bne.n	8005880 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d118      	bne.n	80058f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	e853 3f00 	ldrex	r3, [r3]
 80058cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	f023 0310 	bic.w	r3, r3, #16
 80058d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	461a      	mov	r2, r3
 80058dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058de:	61bb      	str	r3, [r7, #24]
 80058e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e2:	6979      	ldr	r1, [r7, #20]
 80058e4:	69ba      	ldr	r2, [r7, #24]
 80058e6:	e841 2300 	strex	r3, r2, [r1]
 80058ea:	613b      	str	r3, [r7, #16]
   return(result);
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1e6      	bne.n	80058c0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2220      	movs	r2, #32
 80058f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005906:	bf00      	nop
 8005908:	3754      	adds	r7, #84	@ 0x54
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr

08005912 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005912:	b580      	push	{r7, lr}
 8005914:	b084      	sub	sp, #16
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800591e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f7ff fabd 	bl	8004eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005936:	bf00      	nop
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b088      	sub	sp, #32
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	e853 3f00 	ldrex	r3, [r3]
 8005952:	60bb      	str	r3, [r7, #8]
   return(result);
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800595a:	61fb      	str	r3, [r7, #28]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	461a      	mov	r2, r3
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	61bb      	str	r3, [r7, #24]
 8005966:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005968:	6979      	ldr	r1, [r7, #20]
 800596a:	69ba      	ldr	r2, [r7, #24]
 800596c:	e841 2300 	strex	r3, r2, [r1]
 8005970:	613b      	str	r3, [r7, #16]
   return(result);
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d1e6      	bne.n	8005946 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2220      	movs	r2, #32
 800597c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f7ff fa88 	bl	8004e9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800598c:	bf00      	nop
 800598e:	3720      	adds	r7, #32
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80059b0:	bf00      	nop
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d101      	bne.n	80059e6 <HAL_UARTEx_DisableFifoMode+0x16>
 80059e2:	2302      	movs	r3, #2
 80059e4:	e027      	b.n	8005a36 <HAL_UARTEx_DisableFifoMode+0x66>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2224      	movs	r2, #36	@ 0x24
 80059f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f022 0201 	bic.w	r2, r2, #1
 8005a0c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005a14:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2220      	movs	r2, #32
 8005a28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3714      	adds	r7, #20
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b084      	sub	sp, #16
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
 8005a4a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d101      	bne.n	8005a5a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005a56:	2302      	movs	r3, #2
 8005a58:	e02d      	b.n	8005ab6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2224      	movs	r2, #36	@ 0x24
 8005a66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f022 0201 	bic.w	r2, r2, #1
 8005a80:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	683a      	ldr	r2, [r7, #0]
 8005a92:	430a      	orrs	r2, r1
 8005a94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 f850 	bl	8005b3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2220      	movs	r2, #32
 8005aa8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3710      	adds	r7, #16
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b084      	sub	sp, #16
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
 8005ac6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d101      	bne.n	8005ad6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005ad2:	2302      	movs	r3, #2
 8005ad4:	e02d      	b.n	8005b32 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2224      	movs	r2, #36	@ 0x24
 8005ae2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f022 0201 	bic.w	r2, r2, #1
 8005afc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	683a      	ldr	r2, [r7, #0]
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f812 	bl	8005b3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2220      	movs	r2, #32
 8005b24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
	...

08005b3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d108      	bne.n	8005b5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005b5c:	e031      	b.n	8005bc2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005b5e:	2308      	movs	r3, #8
 8005b60:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005b62:	2308      	movs	r3, #8
 8005b64:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	0e5b      	lsrs	r3, r3, #25
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	f003 0307 	and.w	r3, r3, #7
 8005b74:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	0f5b      	lsrs	r3, r3, #29
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	f003 0307 	and.w	r3, r3, #7
 8005b84:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b86:	7bbb      	ldrb	r3, [r7, #14]
 8005b88:	7b3a      	ldrb	r2, [r7, #12]
 8005b8a:	4911      	ldr	r1, [pc, #68]	@ (8005bd0 <UARTEx_SetNbDataToProcess+0x94>)
 8005b8c:	5c8a      	ldrb	r2, [r1, r2]
 8005b8e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005b92:	7b3a      	ldrb	r2, [r7, #12]
 8005b94:	490f      	ldr	r1, [pc, #60]	@ (8005bd4 <UARTEx_SetNbDataToProcess+0x98>)
 8005b96:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b98:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ba4:	7bfb      	ldrb	r3, [r7, #15]
 8005ba6:	7b7a      	ldrb	r2, [r7, #13]
 8005ba8:	4909      	ldr	r1, [pc, #36]	@ (8005bd0 <UARTEx_SetNbDataToProcess+0x94>)
 8005baa:	5c8a      	ldrb	r2, [r1, r2]
 8005bac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005bb0:	7b7a      	ldrb	r2, [r7, #13]
 8005bb2:	4908      	ldr	r1, [pc, #32]	@ (8005bd4 <UARTEx_SetNbDataToProcess+0x98>)
 8005bb4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005bb6:	fb93 f3f2 	sdiv	r3, r3, r2
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005bc2:	bf00      	nop
 8005bc4:	3714      	adds	r7, #20
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	08006db4 	.word	0x08006db4
 8005bd4:	08006dbc 	.word	0x08006dbc

08005bd8 <std>:
 8005bd8:	2300      	movs	r3, #0
 8005bda:	b510      	push	{r4, lr}
 8005bdc:	4604      	mov	r4, r0
 8005bde:	e9c0 3300 	strd	r3, r3, [r0]
 8005be2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005be6:	6083      	str	r3, [r0, #8]
 8005be8:	8181      	strh	r1, [r0, #12]
 8005bea:	6643      	str	r3, [r0, #100]	@ 0x64
 8005bec:	81c2      	strh	r2, [r0, #14]
 8005bee:	6183      	str	r3, [r0, #24]
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	2208      	movs	r2, #8
 8005bf4:	305c      	adds	r0, #92	@ 0x5c
 8005bf6:	f000 fab5 	bl	8006164 <memset>
 8005bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8005c30 <std+0x58>)
 8005bfc:	6263      	str	r3, [r4, #36]	@ 0x24
 8005bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8005c34 <std+0x5c>)
 8005c00:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005c02:	4b0d      	ldr	r3, [pc, #52]	@ (8005c38 <std+0x60>)
 8005c04:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005c06:	4b0d      	ldr	r3, [pc, #52]	@ (8005c3c <std+0x64>)
 8005c08:	6323      	str	r3, [r4, #48]	@ 0x30
 8005c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8005c40 <std+0x68>)
 8005c0c:	6224      	str	r4, [r4, #32]
 8005c0e:	429c      	cmp	r4, r3
 8005c10:	d006      	beq.n	8005c20 <std+0x48>
 8005c12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005c16:	4294      	cmp	r4, r2
 8005c18:	d002      	beq.n	8005c20 <std+0x48>
 8005c1a:	33d0      	adds	r3, #208	@ 0xd0
 8005c1c:	429c      	cmp	r4, r3
 8005c1e:	d105      	bne.n	8005c2c <std+0x54>
 8005c20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c28:	f000 bb14 	b.w	8006254 <__retarget_lock_init_recursive>
 8005c2c:	bd10      	pop	{r4, pc}
 8005c2e:	bf00      	nop
 8005c30:	08005fb5 	.word	0x08005fb5
 8005c34:	08005fd7 	.word	0x08005fd7
 8005c38:	0800600f 	.word	0x0800600f
 8005c3c:	08006033 	.word	0x08006033
 8005c40:	2000024c 	.word	0x2000024c

08005c44 <stdio_exit_handler>:
 8005c44:	4a02      	ldr	r2, [pc, #8]	@ (8005c50 <stdio_exit_handler+0xc>)
 8005c46:	4903      	ldr	r1, [pc, #12]	@ (8005c54 <stdio_exit_handler+0x10>)
 8005c48:	4803      	ldr	r0, [pc, #12]	@ (8005c58 <stdio_exit_handler+0x14>)
 8005c4a:	f000 b869 	b.w	8005d20 <_fwalk_sglue>
 8005c4e:	bf00      	nop
 8005c50:	20000028 	.word	0x20000028
 8005c54:	08006b05 	.word	0x08006b05
 8005c58:	20000038 	.word	0x20000038

08005c5c <cleanup_stdio>:
 8005c5c:	6841      	ldr	r1, [r0, #4]
 8005c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8005c90 <cleanup_stdio+0x34>)
 8005c60:	4299      	cmp	r1, r3
 8005c62:	b510      	push	{r4, lr}
 8005c64:	4604      	mov	r4, r0
 8005c66:	d001      	beq.n	8005c6c <cleanup_stdio+0x10>
 8005c68:	f000 ff4c 	bl	8006b04 <_fflush_r>
 8005c6c:	68a1      	ldr	r1, [r4, #8]
 8005c6e:	4b09      	ldr	r3, [pc, #36]	@ (8005c94 <cleanup_stdio+0x38>)
 8005c70:	4299      	cmp	r1, r3
 8005c72:	d002      	beq.n	8005c7a <cleanup_stdio+0x1e>
 8005c74:	4620      	mov	r0, r4
 8005c76:	f000 ff45 	bl	8006b04 <_fflush_r>
 8005c7a:	68e1      	ldr	r1, [r4, #12]
 8005c7c:	4b06      	ldr	r3, [pc, #24]	@ (8005c98 <cleanup_stdio+0x3c>)
 8005c7e:	4299      	cmp	r1, r3
 8005c80:	d004      	beq.n	8005c8c <cleanup_stdio+0x30>
 8005c82:	4620      	mov	r0, r4
 8005c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c88:	f000 bf3c 	b.w	8006b04 <_fflush_r>
 8005c8c:	bd10      	pop	{r4, pc}
 8005c8e:	bf00      	nop
 8005c90:	2000024c 	.word	0x2000024c
 8005c94:	200002b4 	.word	0x200002b4
 8005c98:	2000031c 	.word	0x2000031c

08005c9c <global_stdio_init.part.0>:
 8005c9c:	b510      	push	{r4, lr}
 8005c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8005ccc <global_stdio_init.part.0+0x30>)
 8005ca0:	4c0b      	ldr	r4, [pc, #44]	@ (8005cd0 <global_stdio_init.part.0+0x34>)
 8005ca2:	4a0c      	ldr	r2, [pc, #48]	@ (8005cd4 <global_stdio_init.part.0+0x38>)
 8005ca4:	601a      	str	r2, [r3, #0]
 8005ca6:	4620      	mov	r0, r4
 8005ca8:	2200      	movs	r2, #0
 8005caa:	2104      	movs	r1, #4
 8005cac:	f7ff ff94 	bl	8005bd8 <std>
 8005cb0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	2109      	movs	r1, #9
 8005cb8:	f7ff ff8e 	bl	8005bd8 <std>
 8005cbc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005cc0:	2202      	movs	r2, #2
 8005cc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cc6:	2112      	movs	r1, #18
 8005cc8:	f7ff bf86 	b.w	8005bd8 <std>
 8005ccc:	20000384 	.word	0x20000384
 8005cd0:	2000024c 	.word	0x2000024c
 8005cd4:	08005c45 	.word	0x08005c45

08005cd8 <__sfp_lock_acquire>:
 8005cd8:	4801      	ldr	r0, [pc, #4]	@ (8005ce0 <__sfp_lock_acquire+0x8>)
 8005cda:	f000 babc 	b.w	8006256 <__retarget_lock_acquire_recursive>
 8005cde:	bf00      	nop
 8005ce0:	2000038d 	.word	0x2000038d

08005ce4 <__sfp_lock_release>:
 8005ce4:	4801      	ldr	r0, [pc, #4]	@ (8005cec <__sfp_lock_release+0x8>)
 8005ce6:	f000 bab7 	b.w	8006258 <__retarget_lock_release_recursive>
 8005cea:	bf00      	nop
 8005cec:	2000038d 	.word	0x2000038d

08005cf0 <__sinit>:
 8005cf0:	b510      	push	{r4, lr}
 8005cf2:	4604      	mov	r4, r0
 8005cf4:	f7ff fff0 	bl	8005cd8 <__sfp_lock_acquire>
 8005cf8:	6a23      	ldr	r3, [r4, #32]
 8005cfa:	b11b      	cbz	r3, 8005d04 <__sinit+0x14>
 8005cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d00:	f7ff bff0 	b.w	8005ce4 <__sfp_lock_release>
 8005d04:	4b04      	ldr	r3, [pc, #16]	@ (8005d18 <__sinit+0x28>)
 8005d06:	6223      	str	r3, [r4, #32]
 8005d08:	4b04      	ldr	r3, [pc, #16]	@ (8005d1c <__sinit+0x2c>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1f5      	bne.n	8005cfc <__sinit+0xc>
 8005d10:	f7ff ffc4 	bl	8005c9c <global_stdio_init.part.0>
 8005d14:	e7f2      	b.n	8005cfc <__sinit+0xc>
 8005d16:	bf00      	nop
 8005d18:	08005c5d 	.word	0x08005c5d
 8005d1c:	20000384 	.word	0x20000384

08005d20 <_fwalk_sglue>:
 8005d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d24:	4607      	mov	r7, r0
 8005d26:	4688      	mov	r8, r1
 8005d28:	4614      	mov	r4, r2
 8005d2a:	2600      	movs	r6, #0
 8005d2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d30:	f1b9 0901 	subs.w	r9, r9, #1
 8005d34:	d505      	bpl.n	8005d42 <_fwalk_sglue+0x22>
 8005d36:	6824      	ldr	r4, [r4, #0]
 8005d38:	2c00      	cmp	r4, #0
 8005d3a:	d1f7      	bne.n	8005d2c <_fwalk_sglue+0xc>
 8005d3c:	4630      	mov	r0, r6
 8005d3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d42:	89ab      	ldrh	r3, [r5, #12]
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d907      	bls.n	8005d58 <_fwalk_sglue+0x38>
 8005d48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	d003      	beq.n	8005d58 <_fwalk_sglue+0x38>
 8005d50:	4629      	mov	r1, r5
 8005d52:	4638      	mov	r0, r7
 8005d54:	47c0      	blx	r8
 8005d56:	4306      	orrs	r6, r0
 8005d58:	3568      	adds	r5, #104	@ 0x68
 8005d5a:	e7e9      	b.n	8005d30 <_fwalk_sglue+0x10>

08005d5c <iprintf>:
 8005d5c:	b40f      	push	{r0, r1, r2, r3}
 8005d5e:	b507      	push	{r0, r1, r2, lr}
 8005d60:	4906      	ldr	r1, [pc, #24]	@ (8005d7c <iprintf+0x20>)
 8005d62:	ab04      	add	r3, sp, #16
 8005d64:	6808      	ldr	r0, [r1, #0]
 8005d66:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d6a:	6881      	ldr	r1, [r0, #8]
 8005d6c:	9301      	str	r3, [sp, #4]
 8005d6e:	f000 fb9f 	bl	80064b0 <_vfiprintf_r>
 8005d72:	b003      	add	sp, #12
 8005d74:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d78:	b004      	add	sp, #16
 8005d7a:	4770      	bx	lr
 8005d7c:	20000034 	.word	0x20000034

08005d80 <_puts_r>:
 8005d80:	6a03      	ldr	r3, [r0, #32]
 8005d82:	b570      	push	{r4, r5, r6, lr}
 8005d84:	6884      	ldr	r4, [r0, #8]
 8005d86:	4605      	mov	r5, r0
 8005d88:	460e      	mov	r6, r1
 8005d8a:	b90b      	cbnz	r3, 8005d90 <_puts_r+0x10>
 8005d8c:	f7ff ffb0 	bl	8005cf0 <__sinit>
 8005d90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d92:	07db      	lsls	r3, r3, #31
 8005d94:	d405      	bmi.n	8005da2 <_puts_r+0x22>
 8005d96:	89a3      	ldrh	r3, [r4, #12]
 8005d98:	0598      	lsls	r0, r3, #22
 8005d9a:	d402      	bmi.n	8005da2 <_puts_r+0x22>
 8005d9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d9e:	f000 fa5a 	bl	8006256 <__retarget_lock_acquire_recursive>
 8005da2:	89a3      	ldrh	r3, [r4, #12]
 8005da4:	0719      	lsls	r1, r3, #28
 8005da6:	d502      	bpl.n	8005dae <_puts_r+0x2e>
 8005da8:	6923      	ldr	r3, [r4, #16]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d135      	bne.n	8005e1a <_puts_r+0x9a>
 8005dae:	4621      	mov	r1, r4
 8005db0:	4628      	mov	r0, r5
 8005db2:	f000 f981 	bl	80060b8 <__swsetup_r>
 8005db6:	b380      	cbz	r0, 8005e1a <_puts_r+0x9a>
 8005db8:	f04f 35ff 	mov.w	r5, #4294967295
 8005dbc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005dbe:	07da      	lsls	r2, r3, #31
 8005dc0:	d405      	bmi.n	8005dce <_puts_r+0x4e>
 8005dc2:	89a3      	ldrh	r3, [r4, #12]
 8005dc4:	059b      	lsls	r3, r3, #22
 8005dc6:	d402      	bmi.n	8005dce <_puts_r+0x4e>
 8005dc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005dca:	f000 fa45 	bl	8006258 <__retarget_lock_release_recursive>
 8005dce:	4628      	mov	r0, r5
 8005dd0:	bd70      	pop	{r4, r5, r6, pc}
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	da04      	bge.n	8005de0 <_puts_r+0x60>
 8005dd6:	69a2      	ldr	r2, [r4, #24]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	dc17      	bgt.n	8005e0c <_puts_r+0x8c>
 8005ddc:	290a      	cmp	r1, #10
 8005dde:	d015      	beq.n	8005e0c <_puts_r+0x8c>
 8005de0:	6823      	ldr	r3, [r4, #0]
 8005de2:	1c5a      	adds	r2, r3, #1
 8005de4:	6022      	str	r2, [r4, #0]
 8005de6:	7019      	strb	r1, [r3, #0]
 8005de8:	68a3      	ldr	r3, [r4, #8]
 8005dea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005dee:	3b01      	subs	r3, #1
 8005df0:	60a3      	str	r3, [r4, #8]
 8005df2:	2900      	cmp	r1, #0
 8005df4:	d1ed      	bne.n	8005dd2 <_puts_r+0x52>
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	da11      	bge.n	8005e1e <_puts_r+0x9e>
 8005dfa:	4622      	mov	r2, r4
 8005dfc:	210a      	movs	r1, #10
 8005dfe:	4628      	mov	r0, r5
 8005e00:	f000 f91b 	bl	800603a <__swbuf_r>
 8005e04:	3001      	adds	r0, #1
 8005e06:	d0d7      	beq.n	8005db8 <_puts_r+0x38>
 8005e08:	250a      	movs	r5, #10
 8005e0a:	e7d7      	b.n	8005dbc <_puts_r+0x3c>
 8005e0c:	4622      	mov	r2, r4
 8005e0e:	4628      	mov	r0, r5
 8005e10:	f000 f913 	bl	800603a <__swbuf_r>
 8005e14:	3001      	adds	r0, #1
 8005e16:	d1e7      	bne.n	8005de8 <_puts_r+0x68>
 8005e18:	e7ce      	b.n	8005db8 <_puts_r+0x38>
 8005e1a:	3e01      	subs	r6, #1
 8005e1c:	e7e4      	b.n	8005de8 <_puts_r+0x68>
 8005e1e:	6823      	ldr	r3, [r4, #0]
 8005e20:	1c5a      	adds	r2, r3, #1
 8005e22:	6022      	str	r2, [r4, #0]
 8005e24:	220a      	movs	r2, #10
 8005e26:	701a      	strb	r2, [r3, #0]
 8005e28:	e7ee      	b.n	8005e08 <_puts_r+0x88>
	...

08005e2c <puts>:
 8005e2c:	4b02      	ldr	r3, [pc, #8]	@ (8005e38 <puts+0xc>)
 8005e2e:	4601      	mov	r1, r0
 8005e30:	6818      	ldr	r0, [r3, #0]
 8005e32:	f7ff bfa5 	b.w	8005d80 <_puts_r>
 8005e36:	bf00      	nop
 8005e38:	20000034 	.word	0x20000034

08005e3c <setbuf>:
 8005e3c:	fab1 f281 	clz	r2, r1
 8005e40:	0952      	lsrs	r2, r2, #5
 8005e42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e46:	0052      	lsls	r2, r2, #1
 8005e48:	f000 b800 	b.w	8005e4c <setvbuf>

08005e4c <setvbuf>:
 8005e4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005e50:	461d      	mov	r5, r3
 8005e52:	4b57      	ldr	r3, [pc, #348]	@ (8005fb0 <setvbuf+0x164>)
 8005e54:	681f      	ldr	r7, [r3, #0]
 8005e56:	4604      	mov	r4, r0
 8005e58:	460e      	mov	r6, r1
 8005e5a:	4690      	mov	r8, r2
 8005e5c:	b127      	cbz	r7, 8005e68 <setvbuf+0x1c>
 8005e5e:	6a3b      	ldr	r3, [r7, #32]
 8005e60:	b913      	cbnz	r3, 8005e68 <setvbuf+0x1c>
 8005e62:	4638      	mov	r0, r7
 8005e64:	f7ff ff44 	bl	8005cf0 <__sinit>
 8005e68:	f1b8 0f02 	cmp.w	r8, #2
 8005e6c:	d006      	beq.n	8005e7c <setvbuf+0x30>
 8005e6e:	f1b8 0f01 	cmp.w	r8, #1
 8005e72:	f200 809a 	bhi.w	8005faa <setvbuf+0x15e>
 8005e76:	2d00      	cmp	r5, #0
 8005e78:	f2c0 8097 	blt.w	8005faa <setvbuf+0x15e>
 8005e7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005e7e:	07d9      	lsls	r1, r3, #31
 8005e80:	d405      	bmi.n	8005e8e <setvbuf+0x42>
 8005e82:	89a3      	ldrh	r3, [r4, #12]
 8005e84:	059a      	lsls	r2, r3, #22
 8005e86:	d402      	bmi.n	8005e8e <setvbuf+0x42>
 8005e88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e8a:	f000 f9e4 	bl	8006256 <__retarget_lock_acquire_recursive>
 8005e8e:	4621      	mov	r1, r4
 8005e90:	4638      	mov	r0, r7
 8005e92:	f000 fe37 	bl	8006b04 <_fflush_r>
 8005e96:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e98:	b141      	cbz	r1, 8005eac <setvbuf+0x60>
 8005e9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e9e:	4299      	cmp	r1, r3
 8005ea0:	d002      	beq.n	8005ea8 <setvbuf+0x5c>
 8005ea2:	4638      	mov	r0, r7
 8005ea4:	f000 f9da 	bl	800625c <_free_r>
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	6363      	str	r3, [r4, #52]	@ 0x34
 8005eac:	2300      	movs	r3, #0
 8005eae:	61a3      	str	r3, [r4, #24]
 8005eb0:	6063      	str	r3, [r4, #4]
 8005eb2:	89a3      	ldrh	r3, [r4, #12]
 8005eb4:	061b      	lsls	r3, r3, #24
 8005eb6:	d503      	bpl.n	8005ec0 <setvbuf+0x74>
 8005eb8:	6921      	ldr	r1, [r4, #16]
 8005eba:	4638      	mov	r0, r7
 8005ebc:	f000 f9ce 	bl	800625c <_free_r>
 8005ec0:	89a3      	ldrh	r3, [r4, #12]
 8005ec2:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8005ec6:	f023 0303 	bic.w	r3, r3, #3
 8005eca:	f1b8 0f02 	cmp.w	r8, #2
 8005ece:	81a3      	strh	r3, [r4, #12]
 8005ed0:	d061      	beq.n	8005f96 <setvbuf+0x14a>
 8005ed2:	ab01      	add	r3, sp, #4
 8005ed4:	466a      	mov	r2, sp
 8005ed6:	4621      	mov	r1, r4
 8005ed8:	4638      	mov	r0, r7
 8005eda:	f000 fe3b 	bl	8006b54 <__swhatbuf_r>
 8005ede:	89a3      	ldrh	r3, [r4, #12]
 8005ee0:	4318      	orrs	r0, r3
 8005ee2:	81a0      	strh	r0, [r4, #12]
 8005ee4:	bb2d      	cbnz	r5, 8005f32 <setvbuf+0xe6>
 8005ee6:	9d00      	ldr	r5, [sp, #0]
 8005ee8:	4628      	mov	r0, r5
 8005eea:	f000 fa01 	bl	80062f0 <malloc>
 8005eee:	4606      	mov	r6, r0
 8005ef0:	2800      	cmp	r0, #0
 8005ef2:	d152      	bne.n	8005f9a <setvbuf+0x14e>
 8005ef4:	f8dd 9000 	ldr.w	r9, [sp]
 8005ef8:	45a9      	cmp	r9, r5
 8005efa:	d140      	bne.n	8005f7e <setvbuf+0x132>
 8005efc:	f04f 35ff 	mov.w	r5, #4294967295
 8005f00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f04:	f043 0202 	orr.w	r2, r3, #2
 8005f08:	81a2      	strh	r2, [r4, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	60a2      	str	r2, [r4, #8]
 8005f0e:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8005f12:	6022      	str	r2, [r4, #0]
 8005f14:	6122      	str	r2, [r4, #16]
 8005f16:	2201      	movs	r2, #1
 8005f18:	6162      	str	r2, [r4, #20]
 8005f1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005f1c:	07d6      	lsls	r6, r2, #31
 8005f1e:	d404      	bmi.n	8005f2a <setvbuf+0xde>
 8005f20:	0598      	lsls	r0, r3, #22
 8005f22:	d402      	bmi.n	8005f2a <setvbuf+0xde>
 8005f24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f26:	f000 f997 	bl	8006258 <__retarget_lock_release_recursive>
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	b003      	add	sp, #12
 8005f2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f32:	2e00      	cmp	r6, #0
 8005f34:	d0d8      	beq.n	8005ee8 <setvbuf+0x9c>
 8005f36:	6a3b      	ldr	r3, [r7, #32]
 8005f38:	b913      	cbnz	r3, 8005f40 <setvbuf+0xf4>
 8005f3a:	4638      	mov	r0, r7
 8005f3c:	f7ff fed8 	bl	8005cf0 <__sinit>
 8005f40:	f1b8 0f01 	cmp.w	r8, #1
 8005f44:	bf08      	it	eq
 8005f46:	89a3      	ldrheq	r3, [r4, #12]
 8005f48:	6026      	str	r6, [r4, #0]
 8005f4a:	bf04      	itt	eq
 8005f4c:	f043 0301 	orreq.w	r3, r3, #1
 8005f50:	81a3      	strheq	r3, [r4, #12]
 8005f52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f56:	f013 0208 	ands.w	r2, r3, #8
 8005f5a:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005f5e:	d01e      	beq.n	8005f9e <setvbuf+0x152>
 8005f60:	07d9      	lsls	r1, r3, #31
 8005f62:	bf41      	itttt	mi
 8005f64:	2200      	movmi	r2, #0
 8005f66:	426d      	negmi	r5, r5
 8005f68:	60a2      	strmi	r2, [r4, #8]
 8005f6a:	61a5      	strmi	r5, [r4, #24]
 8005f6c:	bf58      	it	pl
 8005f6e:	60a5      	strpl	r5, [r4, #8]
 8005f70:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005f72:	07d2      	lsls	r2, r2, #31
 8005f74:	d401      	bmi.n	8005f7a <setvbuf+0x12e>
 8005f76:	059b      	lsls	r3, r3, #22
 8005f78:	d513      	bpl.n	8005fa2 <setvbuf+0x156>
 8005f7a:	2500      	movs	r5, #0
 8005f7c:	e7d5      	b.n	8005f2a <setvbuf+0xde>
 8005f7e:	4648      	mov	r0, r9
 8005f80:	f000 f9b6 	bl	80062f0 <malloc>
 8005f84:	4606      	mov	r6, r0
 8005f86:	2800      	cmp	r0, #0
 8005f88:	d0b8      	beq.n	8005efc <setvbuf+0xb0>
 8005f8a:	89a3      	ldrh	r3, [r4, #12]
 8005f8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f90:	81a3      	strh	r3, [r4, #12]
 8005f92:	464d      	mov	r5, r9
 8005f94:	e7cf      	b.n	8005f36 <setvbuf+0xea>
 8005f96:	2500      	movs	r5, #0
 8005f98:	e7b2      	b.n	8005f00 <setvbuf+0xb4>
 8005f9a:	46a9      	mov	r9, r5
 8005f9c:	e7f5      	b.n	8005f8a <setvbuf+0x13e>
 8005f9e:	60a2      	str	r2, [r4, #8]
 8005fa0:	e7e6      	b.n	8005f70 <setvbuf+0x124>
 8005fa2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005fa4:	f000 f958 	bl	8006258 <__retarget_lock_release_recursive>
 8005fa8:	e7e7      	b.n	8005f7a <setvbuf+0x12e>
 8005faa:	f04f 35ff 	mov.w	r5, #4294967295
 8005fae:	e7bc      	b.n	8005f2a <setvbuf+0xde>
 8005fb0:	20000034 	.word	0x20000034

08005fb4 <__sread>:
 8005fb4:	b510      	push	{r4, lr}
 8005fb6:	460c      	mov	r4, r1
 8005fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fbc:	f000 f8fc 	bl	80061b8 <_read_r>
 8005fc0:	2800      	cmp	r0, #0
 8005fc2:	bfab      	itete	ge
 8005fc4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005fc6:	89a3      	ldrhlt	r3, [r4, #12]
 8005fc8:	181b      	addge	r3, r3, r0
 8005fca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005fce:	bfac      	ite	ge
 8005fd0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005fd2:	81a3      	strhlt	r3, [r4, #12]
 8005fd4:	bd10      	pop	{r4, pc}

08005fd6 <__swrite>:
 8005fd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fda:	461f      	mov	r7, r3
 8005fdc:	898b      	ldrh	r3, [r1, #12]
 8005fde:	05db      	lsls	r3, r3, #23
 8005fe0:	4605      	mov	r5, r0
 8005fe2:	460c      	mov	r4, r1
 8005fe4:	4616      	mov	r6, r2
 8005fe6:	d505      	bpl.n	8005ff4 <__swrite+0x1e>
 8005fe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fec:	2302      	movs	r3, #2
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f000 f8d0 	bl	8006194 <_lseek_r>
 8005ff4:	89a3      	ldrh	r3, [r4, #12]
 8005ff6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ffa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ffe:	81a3      	strh	r3, [r4, #12]
 8006000:	4632      	mov	r2, r6
 8006002:	463b      	mov	r3, r7
 8006004:	4628      	mov	r0, r5
 8006006:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800600a:	f000 b8e7 	b.w	80061dc <_write_r>

0800600e <__sseek>:
 800600e:	b510      	push	{r4, lr}
 8006010:	460c      	mov	r4, r1
 8006012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006016:	f000 f8bd 	bl	8006194 <_lseek_r>
 800601a:	1c43      	adds	r3, r0, #1
 800601c:	89a3      	ldrh	r3, [r4, #12]
 800601e:	bf15      	itete	ne
 8006020:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006022:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006026:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800602a:	81a3      	strheq	r3, [r4, #12]
 800602c:	bf18      	it	ne
 800602e:	81a3      	strhne	r3, [r4, #12]
 8006030:	bd10      	pop	{r4, pc}

08006032 <__sclose>:
 8006032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006036:	f000 b89d 	b.w	8006174 <_close_r>

0800603a <__swbuf_r>:
 800603a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800603c:	460e      	mov	r6, r1
 800603e:	4614      	mov	r4, r2
 8006040:	4605      	mov	r5, r0
 8006042:	b118      	cbz	r0, 800604c <__swbuf_r+0x12>
 8006044:	6a03      	ldr	r3, [r0, #32]
 8006046:	b90b      	cbnz	r3, 800604c <__swbuf_r+0x12>
 8006048:	f7ff fe52 	bl	8005cf0 <__sinit>
 800604c:	69a3      	ldr	r3, [r4, #24]
 800604e:	60a3      	str	r3, [r4, #8]
 8006050:	89a3      	ldrh	r3, [r4, #12]
 8006052:	071a      	lsls	r2, r3, #28
 8006054:	d501      	bpl.n	800605a <__swbuf_r+0x20>
 8006056:	6923      	ldr	r3, [r4, #16]
 8006058:	b943      	cbnz	r3, 800606c <__swbuf_r+0x32>
 800605a:	4621      	mov	r1, r4
 800605c:	4628      	mov	r0, r5
 800605e:	f000 f82b 	bl	80060b8 <__swsetup_r>
 8006062:	b118      	cbz	r0, 800606c <__swbuf_r+0x32>
 8006064:	f04f 37ff 	mov.w	r7, #4294967295
 8006068:	4638      	mov	r0, r7
 800606a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800606c:	6823      	ldr	r3, [r4, #0]
 800606e:	6922      	ldr	r2, [r4, #16]
 8006070:	1a98      	subs	r0, r3, r2
 8006072:	6963      	ldr	r3, [r4, #20]
 8006074:	b2f6      	uxtb	r6, r6
 8006076:	4283      	cmp	r3, r0
 8006078:	4637      	mov	r7, r6
 800607a:	dc05      	bgt.n	8006088 <__swbuf_r+0x4e>
 800607c:	4621      	mov	r1, r4
 800607e:	4628      	mov	r0, r5
 8006080:	f000 fd40 	bl	8006b04 <_fflush_r>
 8006084:	2800      	cmp	r0, #0
 8006086:	d1ed      	bne.n	8006064 <__swbuf_r+0x2a>
 8006088:	68a3      	ldr	r3, [r4, #8]
 800608a:	3b01      	subs	r3, #1
 800608c:	60a3      	str	r3, [r4, #8]
 800608e:	6823      	ldr	r3, [r4, #0]
 8006090:	1c5a      	adds	r2, r3, #1
 8006092:	6022      	str	r2, [r4, #0]
 8006094:	701e      	strb	r6, [r3, #0]
 8006096:	6962      	ldr	r2, [r4, #20]
 8006098:	1c43      	adds	r3, r0, #1
 800609a:	429a      	cmp	r2, r3
 800609c:	d004      	beq.n	80060a8 <__swbuf_r+0x6e>
 800609e:	89a3      	ldrh	r3, [r4, #12]
 80060a0:	07db      	lsls	r3, r3, #31
 80060a2:	d5e1      	bpl.n	8006068 <__swbuf_r+0x2e>
 80060a4:	2e0a      	cmp	r6, #10
 80060a6:	d1df      	bne.n	8006068 <__swbuf_r+0x2e>
 80060a8:	4621      	mov	r1, r4
 80060aa:	4628      	mov	r0, r5
 80060ac:	f000 fd2a 	bl	8006b04 <_fflush_r>
 80060b0:	2800      	cmp	r0, #0
 80060b2:	d0d9      	beq.n	8006068 <__swbuf_r+0x2e>
 80060b4:	e7d6      	b.n	8006064 <__swbuf_r+0x2a>
	...

080060b8 <__swsetup_r>:
 80060b8:	b538      	push	{r3, r4, r5, lr}
 80060ba:	4b29      	ldr	r3, [pc, #164]	@ (8006160 <__swsetup_r+0xa8>)
 80060bc:	4605      	mov	r5, r0
 80060be:	6818      	ldr	r0, [r3, #0]
 80060c0:	460c      	mov	r4, r1
 80060c2:	b118      	cbz	r0, 80060cc <__swsetup_r+0x14>
 80060c4:	6a03      	ldr	r3, [r0, #32]
 80060c6:	b90b      	cbnz	r3, 80060cc <__swsetup_r+0x14>
 80060c8:	f7ff fe12 	bl	8005cf0 <__sinit>
 80060cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060d0:	0719      	lsls	r1, r3, #28
 80060d2:	d422      	bmi.n	800611a <__swsetup_r+0x62>
 80060d4:	06da      	lsls	r2, r3, #27
 80060d6:	d407      	bmi.n	80060e8 <__swsetup_r+0x30>
 80060d8:	2209      	movs	r2, #9
 80060da:	602a      	str	r2, [r5, #0]
 80060dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060e0:	81a3      	strh	r3, [r4, #12]
 80060e2:	f04f 30ff 	mov.w	r0, #4294967295
 80060e6:	e033      	b.n	8006150 <__swsetup_r+0x98>
 80060e8:	0758      	lsls	r0, r3, #29
 80060ea:	d512      	bpl.n	8006112 <__swsetup_r+0x5a>
 80060ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80060ee:	b141      	cbz	r1, 8006102 <__swsetup_r+0x4a>
 80060f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80060f4:	4299      	cmp	r1, r3
 80060f6:	d002      	beq.n	80060fe <__swsetup_r+0x46>
 80060f8:	4628      	mov	r0, r5
 80060fa:	f000 f8af 	bl	800625c <_free_r>
 80060fe:	2300      	movs	r3, #0
 8006100:	6363      	str	r3, [r4, #52]	@ 0x34
 8006102:	89a3      	ldrh	r3, [r4, #12]
 8006104:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006108:	81a3      	strh	r3, [r4, #12]
 800610a:	2300      	movs	r3, #0
 800610c:	6063      	str	r3, [r4, #4]
 800610e:	6923      	ldr	r3, [r4, #16]
 8006110:	6023      	str	r3, [r4, #0]
 8006112:	89a3      	ldrh	r3, [r4, #12]
 8006114:	f043 0308 	orr.w	r3, r3, #8
 8006118:	81a3      	strh	r3, [r4, #12]
 800611a:	6923      	ldr	r3, [r4, #16]
 800611c:	b94b      	cbnz	r3, 8006132 <__swsetup_r+0x7a>
 800611e:	89a3      	ldrh	r3, [r4, #12]
 8006120:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006124:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006128:	d003      	beq.n	8006132 <__swsetup_r+0x7a>
 800612a:	4621      	mov	r1, r4
 800612c:	4628      	mov	r0, r5
 800612e:	f000 fd37 	bl	8006ba0 <__smakebuf_r>
 8006132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006136:	f013 0201 	ands.w	r2, r3, #1
 800613a:	d00a      	beq.n	8006152 <__swsetup_r+0x9a>
 800613c:	2200      	movs	r2, #0
 800613e:	60a2      	str	r2, [r4, #8]
 8006140:	6962      	ldr	r2, [r4, #20]
 8006142:	4252      	negs	r2, r2
 8006144:	61a2      	str	r2, [r4, #24]
 8006146:	6922      	ldr	r2, [r4, #16]
 8006148:	b942      	cbnz	r2, 800615c <__swsetup_r+0xa4>
 800614a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800614e:	d1c5      	bne.n	80060dc <__swsetup_r+0x24>
 8006150:	bd38      	pop	{r3, r4, r5, pc}
 8006152:	0799      	lsls	r1, r3, #30
 8006154:	bf58      	it	pl
 8006156:	6962      	ldrpl	r2, [r4, #20]
 8006158:	60a2      	str	r2, [r4, #8]
 800615a:	e7f4      	b.n	8006146 <__swsetup_r+0x8e>
 800615c:	2000      	movs	r0, #0
 800615e:	e7f7      	b.n	8006150 <__swsetup_r+0x98>
 8006160:	20000034 	.word	0x20000034

08006164 <memset>:
 8006164:	4402      	add	r2, r0
 8006166:	4603      	mov	r3, r0
 8006168:	4293      	cmp	r3, r2
 800616a:	d100      	bne.n	800616e <memset+0xa>
 800616c:	4770      	bx	lr
 800616e:	f803 1b01 	strb.w	r1, [r3], #1
 8006172:	e7f9      	b.n	8006168 <memset+0x4>

08006174 <_close_r>:
 8006174:	b538      	push	{r3, r4, r5, lr}
 8006176:	4d06      	ldr	r5, [pc, #24]	@ (8006190 <_close_r+0x1c>)
 8006178:	2300      	movs	r3, #0
 800617a:	4604      	mov	r4, r0
 800617c:	4608      	mov	r0, r1
 800617e:	602b      	str	r3, [r5, #0]
 8006180:	f7fb fb4b 	bl	800181a <_close>
 8006184:	1c43      	adds	r3, r0, #1
 8006186:	d102      	bne.n	800618e <_close_r+0x1a>
 8006188:	682b      	ldr	r3, [r5, #0]
 800618a:	b103      	cbz	r3, 800618e <_close_r+0x1a>
 800618c:	6023      	str	r3, [r4, #0]
 800618e:	bd38      	pop	{r3, r4, r5, pc}
 8006190:	20000388 	.word	0x20000388

08006194 <_lseek_r>:
 8006194:	b538      	push	{r3, r4, r5, lr}
 8006196:	4d07      	ldr	r5, [pc, #28]	@ (80061b4 <_lseek_r+0x20>)
 8006198:	4604      	mov	r4, r0
 800619a:	4608      	mov	r0, r1
 800619c:	4611      	mov	r1, r2
 800619e:	2200      	movs	r2, #0
 80061a0:	602a      	str	r2, [r5, #0]
 80061a2:	461a      	mov	r2, r3
 80061a4:	f7fb fb60 	bl	8001868 <_lseek>
 80061a8:	1c43      	adds	r3, r0, #1
 80061aa:	d102      	bne.n	80061b2 <_lseek_r+0x1e>
 80061ac:	682b      	ldr	r3, [r5, #0]
 80061ae:	b103      	cbz	r3, 80061b2 <_lseek_r+0x1e>
 80061b0:	6023      	str	r3, [r4, #0]
 80061b2:	bd38      	pop	{r3, r4, r5, pc}
 80061b4:	20000388 	.word	0x20000388

080061b8 <_read_r>:
 80061b8:	b538      	push	{r3, r4, r5, lr}
 80061ba:	4d07      	ldr	r5, [pc, #28]	@ (80061d8 <_read_r+0x20>)
 80061bc:	4604      	mov	r4, r0
 80061be:	4608      	mov	r0, r1
 80061c0:	4611      	mov	r1, r2
 80061c2:	2200      	movs	r2, #0
 80061c4:	602a      	str	r2, [r5, #0]
 80061c6:	461a      	mov	r2, r3
 80061c8:	f7fb fb0a 	bl	80017e0 <_read>
 80061cc:	1c43      	adds	r3, r0, #1
 80061ce:	d102      	bne.n	80061d6 <_read_r+0x1e>
 80061d0:	682b      	ldr	r3, [r5, #0]
 80061d2:	b103      	cbz	r3, 80061d6 <_read_r+0x1e>
 80061d4:	6023      	str	r3, [r4, #0]
 80061d6:	bd38      	pop	{r3, r4, r5, pc}
 80061d8:	20000388 	.word	0x20000388

080061dc <_write_r>:
 80061dc:	b538      	push	{r3, r4, r5, lr}
 80061de:	4d07      	ldr	r5, [pc, #28]	@ (80061fc <_write_r+0x20>)
 80061e0:	4604      	mov	r4, r0
 80061e2:	4608      	mov	r0, r1
 80061e4:	4611      	mov	r1, r2
 80061e6:	2200      	movs	r2, #0
 80061e8:	602a      	str	r2, [r5, #0]
 80061ea:	461a      	mov	r2, r3
 80061ec:	f7fa ff6e 	bl	80010cc <_write>
 80061f0:	1c43      	adds	r3, r0, #1
 80061f2:	d102      	bne.n	80061fa <_write_r+0x1e>
 80061f4:	682b      	ldr	r3, [r5, #0]
 80061f6:	b103      	cbz	r3, 80061fa <_write_r+0x1e>
 80061f8:	6023      	str	r3, [r4, #0]
 80061fa:	bd38      	pop	{r3, r4, r5, pc}
 80061fc:	20000388 	.word	0x20000388

08006200 <__errno>:
 8006200:	4b01      	ldr	r3, [pc, #4]	@ (8006208 <__errno+0x8>)
 8006202:	6818      	ldr	r0, [r3, #0]
 8006204:	4770      	bx	lr
 8006206:	bf00      	nop
 8006208:	20000034 	.word	0x20000034

0800620c <__libc_init_array>:
 800620c:	b570      	push	{r4, r5, r6, lr}
 800620e:	4d0d      	ldr	r5, [pc, #52]	@ (8006244 <__libc_init_array+0x38>)
 8006210:	4c0d      	ldr	r4, [pc, #52]	@ (8006248 <__libc_init_array+0x3c>)
 8006212:	1b64      	subs	r4, r4, r5
 8006214:	10a4      	asrs	r4, r4, #2
 8006216:	2600      	movs	r6, #0
 8006218:	42a6      	cmp	r6, r4
 800621a:	d109      	bne.n	8006230 <__libc_init_array+0x24>
 800621c:	4d0b      	ldr	r5, [pc, #44]	@ (800624c <__libc_init_array+0x40>)
 800621e:	4c0c      	ldr	r4, [pc, #48]	@ (8006250 <__libc_init_array+0x44>)
 8006220:	f000 fd2c 	bl	8006c7c <_init>
 8006224:	1b64      	subs	r4, r4, r5
 8006226:	10a4      	asrs	r4, r4, #2
 8006228:	2600      	movs	r6, #0
 800622a:	42a6      	cmp	r6, r4
 800622c:	d105      	bne.n	800623a <__libc_init_array+0x2e>
 800622e:	bd70      	pop	{r4, r5, r6, pc}
 8006230:	f855 3b04 	ldr.w	r3, [r5], #4
 8006234:	4798      	blx	r3
 8006236:	3601      	adds	r6, #1
 8006238:	e7ee      	b.n	8006218 <__libc_init_array+0xc>
 800623a:	f855 3b04 	ldr.w	r3, [r5], #4
 800623e:	4798      	blx	r3
 8006240:	3601      	adds	r6, #1
 8006242:	e7f2      	b.n	800622a <__libc_init_array+0x1e>
 8006244:	08006e00 	.word	0x08006e00
 8006248:	08006e00 	.word	0x08006e00
 800624c:	08006e00 	.word	0x08006e00
 8006250:	08006e04 	.word	0x08006e04

08006254 <__retarget_lock_init_recursive>:
 8006254:	4770      	bx	lr

08006256 <__retarget_lock_acquire_recursive>:
 8006256:	4770      	bx	lr

08006258 <__retarget_lock_release_recursive>:
 8006258:	4770      	bx	lr
	...

0800625c <_free_r>:
 800625c:	b538      	push	{r3, r4, r5, lr}
 800625e:	4605      	mov	r5, r0
 8006260:	2900      	cmp	r1, #0
 8006262:	d041      	beq.n	80062e8 <_free_r+0x8c>
 8006264:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006268:	1f0c      	subs	r4, r1, #4
 800626a:	2b00      	cmp	r3, #0
 800626c:	bfb8      	it	lt
 800626e:	18e4      	addlt	r4, r4, r3
 8006270:	f000 f8e8 	bl	8006444 <__malloc_lock>
 8006274:	4a1d      	ldr	r2, [pc, #116]	@ (80062ec <_free_r+0x90>)
 8006276:	6813      	ldr	r3, [r2, #0]
 8006278:	b933      	cbnz	r3, 8006288 <_free_r+0x2c>
 800627a:	6063      	str	r3, [r4, #4]
 800627c:	6014      	str	r4, [r2, #0]
 800627e:	4628      	mov	r0, r5
 8006280:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006284:	f000 b8e4 	b.w	8006450 <__malloc_unlock>
 8006288:	42a3      	cmp	r3, r4
 800628a:	d908      	bls.n	800629e <_free_r+0x42>
 800628c:	6820      	ldr	r0, [r4, #0]
 800628e:	1821      	adds	r1, r4, r0
 8006290:	428b      	cmp	r3, r1
 8006292:	bf01      	itttt	eq
 8006294:	6819      	ldreq	r1, [r3, #0]
 8006296:	685b      	ldreq	r3, [r3, #4]
 8006298:	1809      	addeq	r1, r1, r0
 800629a:	6021      	streq	r1, [r4, #0]
 800629c:	e7ed      	b.n	800627a <_free_r+0x1e>
 800629e:	461a      	mov	r2, r3
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	b10b      	cbz	r3, 80062a8 <_free_r+0x4c>
 80062a4:	42a3      	cmp	r3, r4
 80062a6:	d9fa      	bls.n	800629e <_free_r+0x42>
 80062a8:	6811      	ldr	r1, [r2, #0]
 80062aa:	1850      	adds	r0, r2, r1
 80062ac:	42a0      	cmp	r0, r4
 80062ae:	d10b      	bne.n	80062c8 <_free_r+0x6c>
 80062b0:	6820      	ldr	r0, [r4, #0]
 80062b2:	4401      	add	r1, r0
 80062b4:	1850      	adds	r0, r2, r1
 80062b6:	4283      	cmp	r3, r0
 80062b8:	6011      	str	r1, [r2, #0]
 80062ba:	d1e0      	bne.n	800627e <_free_r+0x22>
 80062bc:	6818      	ldr	r0, [r3, #0]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	6053      	str	r3, [r2, #4]
 80062c2:	4408      	add	r0, r1
 80062c4:	6010      	str	r0, [r2, #0]
 80062c6:	e7da      	b.n	800627e <_free_r+0x22>
 80062c8:	d902      	bls.n	80062d0 <_free_r+0x74>
 80062ca:	230c      	movs	r3, #12
 80062cc:	602b      	str	r3, [r5, #0]
 80062ce:	e7d6      	b.n	800627e <_free_r+0x22>
 80062d0:	6820      	ldr	r0, [r4, #0]
 80062d2:	1821      	adds	r1, r4, r0
 80062d4:	428b      	cmp	r3, r1
 80062d6:	bf04      	itt	eq
 80062d8:	6819      	ldreq	r1, [r3, #0]
 80062da:	685b      	ldreq	r3, [r3, #4]
 80062dc:	6063      	str	r3, [r4, #4]
 80062de:	bf04      	itt	eq
 80062e0:	1809      	addeq	r1, r1, r0
 80062e2:	6021      	streq	r1, [r4, #0]
 80062e4:	6054      	str	r4, [r2, #4]
 80062e6:	e7ca      	b.n	800627e <_free_r+0x22>
 80062e8:	bd38      	pop	{r3, r4, r5, pc}
 80062ea:	bf00      	nop
 80062ec:	20000394 	.word	0x20000394

080062f0 <malloc>:
 80062f0:	4b02      	ldr	r3, [pc, #8]	@ (80062fc <malloc+0xc>)
 80062f2:	4601      	mov	r1, r0
 80062f4:	6818      	ldr	r0, [r3, #0]
 80062f6:	f000 b825 	b.w	8006344 <_malloc_r>
 80062fa:	bf00      	nop
 80062fc:	20000034 	.word	0x20000034

08006300 <sbrk_aligned>:
 8006300:	b570      	push	{r4, r5, r6, lr}
 8006302:	4e0f      	ldr	r6, [pc, #60]	@ (8006340 <sbrk_aligned+0x40>)
 8006304:	460c      	mov	r4, r1
 8006306:	6831      	ldr	r1, [r6, #0]
 8006308:	4605      	mov	r5, r0
 800630a:	b911      	cbnz	r1, 8006312 <sbrk_aligned+0x12>
 800630c:	f000 fca6 	bl	8006c5c <_sbrk_r>
 8006310:	6030      	str	r0, [r6, #0]
 8006312:	4621      	mov	r1, r4
 8006314:	4628      	mov	r0, r5
 8006316:	f000 fca1 	bl	8006c5c <_sbrk_r>
 800631a:	1c43      	adds	r3, r0, #1
 800631c:	d103      	bne.n	8006326 <sbrk_aligned+0x26>
 800631e:	f04f 34ff 	mov.w	r4, #4294967295
 8006322:	4620      	mov	r0, r4
 8006324:	bd70      	pop	{r4, r5, r6, pc}
 8006326:	1cc4      	adds	r4, r0, #3
 8006328:	f024 0403 	bic.w	r4, r4, #3
 800632c:	42a0      	cmp	r0, r4
 800632e:	d0f8      	beq.n	8006322 <sbrk_aligned+0x22>
 8006330:	1a21      	subs	r1, r4, r0
 8006332:	4628      	mov	r0, r5
 8006334:	f000 fc92 	bl	8006c5c <_sbrk_r>
 8006338:	3001      	adds	r0, #1
 800633a:	d1f2      	bne.n	8006322 <sbrk_aligned+0x22>
 800633c:	e7ef      	b.n	800631e <sbrk_aligned+0x1e>
 800633e:	bf00      	nop
 8006340:	20000390 	.word	0x20000390

08006344 <_malloc_r>:
 8006344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006348:	1ccd      	adds	r5, r1, #3
 800634a:	f025 0503 	bic.w	r5, r5, #3
 800634e:	3508      	adds	r5, #8
 8006350:	2d0c      	cmp	r5, #12
 8006352:	bf38      	it	cc
 8006354:	250c      	movcc	r5, #12
 8006356:	2d00      	cmp	r5, #0
 8006358:	4606      	mov	r6, r0
 800635a:	db01      	blt.n	8006360 <_malloc_r+0x1c>
 800635c:	42a9      	cmp	r1, r5
 800635e:	d904      	bls.n	800636a <_malloc_r+0x26>
 8006360:	230c      	movs	r3, #12
 8006362:	6033      	str	r3, [r6, #0]
 8006364:	2000      	movs	r0, #0
 8006366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800636a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006440 <_malloc_r+0xfc>
 800636e:	f000 f869 	bl	8006444 <__malloc_lock>
 8006372:	f8d8 3000 	ldr.w	r3, [r8]
 8006376:	461c      	mov	r4, r3
 8006378:	bb44      	cbnz	r4, 80063cc <_malloc_r+0x88>
 800637a:	4629      	mov	r1, r5
 800637c:	4630      	mov	r0, r6
 800637e:	f7ff ffbf 	bl	8006300 <sbrk_aligned>
 8006382:	1c43      	adds	r3, r0, #1
 8006384:	4604      	mov	r4, r0
 8006386:	d158      	bne.n	800643a <_malloc_r+0xf6>
 8006388:	f8d8 4000 	ldr.w	r4, [r8]
 800638c:	4627      	mov	r7, r4
 800638e:	2f00      	cmp	r7, #0
 8006390:	d143      	bne.n	800641a <_malloc_r+0xd6>
 8006392:	2c00      	cmp	r4, #0
 8006394:	d04b      	beq.n	800642e <_malloc_r+0xea>
 8006396:	6823      	ldr	r3, [r4, #0]
 8006398:	4639      	mov	r1, r7
 800639a:	4630      	mov	r0, r6
 800639c:	eb04 0903 	add.w	r9, r4, r3
 80063a0:	f000 fc5c 	bl	8006c5c <_sbrk_r>
 80063a4:	4581      	cmp	r9, r0
 80063a6:	d142      	bne.n	800642e <_malloc_r+0xea>
 80063a8:	6821      	ldr	r1, [r4, #0]
 80063aa:	1a6d      	subs	r5, r5, r1
 80063ac:	4629      	mov	r1, r5
 80063ae:	4630      	mov	r0, r6
 80063b0:	f7ff ffa6 	bl	8006300 <sbrk_aligned>
 80063b4:	3001      	adds	r0, #1
 80063b6:	d03a      	beq.n	800642e <_malloc_r+0xea>
 80063b8:	6823      	ldr	r3, [r4, #0]
 80063ba:	442b      	add	r3, r5
 80063bc:	6023      	str	r3, [r4, #0]
 80063be:	f8d8 3000 	ldr.w	r3, [r8]
 80063c2:	685a      	ldr	r2, [r3, #4]
 80063c4:	bb62      	cbnz	r2, 8006420 <_malloc_r+0xdc>
 80063c6:	f8c8 7000 	str.w	r7, [r8]
 80063ca:	e00f      	b.n	80063ec <_malloc_r+0xa8>
 80063cc:	6822      	ldr	r2, [r4, #0]
 80063ce:	1b52      	subs	r2, r2, r5
 80063d0:	d420      	bmi.n	8006414 <_malloc_r+0xd0>
 80063d2:	2a0b      	cmp	r2, #11
 80063d4:	d917      	bls.n	8006406 <_malloc_r+0xc2>
 80063d6:	1961      	adds	r1, r4, r5
 80063d8:	42a3      	cmp	r3, r4
 80063da:	6025      	str	r5, [r4, #0]
 80063dc:	bf18      	it	ne
 80063de:	6059      	strne	r1, [r3, #4]
 80063e0:	6863      	ldr	r3, [r4, #4]
 80063e2:	bf08      	it	eq
 80063e4:	f8c8 1000 	streq.w	r1, [r8]
 80063e8:	5162      	str	r2, [r4, r5]
 80063ea:	604b      	str	r3, [r1, #4]
 80063ec:	4630      	mov	r0, r6
 80063ee:	f000 f82f 	bl	8006450 <__malloc_unlock>
 80063f2:	f104 000b 	add.w	r0, r4, #11
 80063f6:	1d23      	adds	r3, r4, #4
 80063f8:	f020 0007 	bic.w	r0, r0, #7
 80063fc:	1ac2      	subs	r2, r0, r3
 80063fe:	bf1c      	itt	ne
 8006400:	1a1b      	subne	r3, r3, r0
 8006402:	50a3      	strne	r3, [r4, r2]
 8006404:	e7af      	b.n	8006366 <_malloc_r+0x22>
 8006406:	6862      	ldr	r2, [r4, #4]
 8006408:	42a3      	cmp	r3, r4
 800640a:	bf0c      	ite	eq
 800640c:	f8c8 2000 	streq.w	r2, [r8]
 8006410:	605a      	strne	r2, [r3, #4]
 8006412:	e7eb      	b.n	80063ec <_malloc_r+0xa8>
 8006414:	4623      	mov	r3, r4
 8006416:	6864      	ldr	r4, [r4, #4]
 8006418:	e7ae      	b.n	8006378 <_malloc_r+0x34>
 800641a:	463c      	mov	r4, r7
 800641c:	687f      	ldr	r7, [r7, #4]
 800641e:	e7b6      	b.n	800638e <_malloc_r+0x4a>
 8006420:	461a      	mov	r2, r3
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	42a3      	cmp	r3, r4
 8006426:	d1fb      	bne.n	8006420 <_malloc_r+0xdc>
 8006428:	2300      	movs	r3, #0
 800642a:	6053      	str	r3, [r2, #4]
 800642c:	e7de      	b.n	80063ec <_malloc_r+0xa8>
 800642e:	230c      	movs	r3, #12
 8006430:	6033      	str	r3, [r6, #0]
 8006432:	4630      	mov	r0, r6
 8006434:	f000 f80c 	bl	8006450 <__malloc_unlock>
 8006438:	e794      	b.n	8006364 <_malloc_r+0x20>
 800643a:	6005      	str	r5, [r0, #0]
 800643c:	e7d6      	b.n	80063ec <_malloc_r+0xa8>
 800643e:	bf00      	nop
 8006440:	20000394 	.word	0x20000394

08006444 <__malloc_lock>:
 8006444:	4801      	ldr	r0, [pc, #4]	@ (800644c <__malloc_lock+0x8>)
 8006446:	f7ff bf06 	b.w	8006256 <__retarget_lock_acquire_recursive>
 800644a:	bf00      	nop
 800644c:	2000038c 	.word	0x2000038c

08006450 <__malloc_unlock>:
 8006450:	4801      	ldr	r0, [pc, #4]	@ (8006458 <__malloc_unlock+0x8>)
 8006452:	f7ff bf01 	b.w	8006258 <__retarget_lock_release_recursive>
 8006456:	bf00      	nop
 8006458:	2000038c 	.word	0x2000038c

0800645c <__sfputc_r>:
 800645c:	6893      	ldr	r3, [r2, #8]
 800645e:	3b01      	subs	r3, #1
 8006460:	2b00      	cmp	r3, #0
 8006462:	b410      	push	{r4}
 8006464:	6093      	str	r3, [r2, #8]
 8006466:	da08      	bge.n	800647a <__sfputc_r+0x1e>
 8006468:	6994      	ldr	r4, [r2, #24]
 800646a:	42a3      	cmp	r3, r4
 800646c:	db01      	blt.n	8006472 <__sfputc_r+0x16>
 800646e:	290a      	cmp	r1, #10
 8006470:	d103      	bne.n	800647a <__sfputc_r+0x1e>
 8006472:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006476:	f7ff bde0 	b.w	800603a <__swbuf_r>
 800647a:	6813      	ldr	r3, [r2, #0]
 800647c:	1c58      	adds	r0, r3, #1
 800647e:	6010      	str	r0, [r2, #0]
 8006480:	7019      	strb	r1, [r3, #0]
 8006482:	4608      	mov	r0, r1
 8006484:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006488:	4770      	bx	lr

0800648a <__sfputs_r>:
 800648a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800648c:	4606      	mov	r6, r0
 800648e:	460f      	mov	r7, r1
 8006490:	4614      	mov	r4, r2
 8006492:	18d5      	adds	r5, r2, r3
 8006494:	42ac      	cmp	r4, r5
 8006496:	d101      	bne.n	800649c <__sfputs_r+0x12>
 8006498:	2000      	movs	r0, #0
 800649a:	e007      	b.n	80064ac <__sfputs_r+0x22>
 800649c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064a0:	463a      	mov	r2, r7
 80064a2:	4630      	mov	r0, r6
 80064a4:	f7ff ffda 	bl	800645c <__sfputc_r>
 80064a8:	1c43      	adds	r3, r0, #1
 80064aa:	d1f3      	bne.n	8006494 <__sfputs_r+0xa>
 80064ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080064b0 <_vfiprintf_r>:
 80064b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b4:	460d      	mov	r5, r1
 80064b6:	b09d      	sub	sp, #116	@ 0x74
 80064b8:	4614      	mov	r4, r2
 80064ba:	4698      	mov	r8, r3
 80064bc:	4606      	mov	r6, r0
 80064be:	b118      	cbz	r0, 80064c8 <_vfiprintf_r+0x18>
 80064c0:	6a03      	ldr	r3, [r0, #32]
 80064c2:	b90b      	cbnz	r3, 80064c8 <_vfiprintf_r+0x18>
 80064c4:	f7ff fc14 	bl	8005cf0 <__sinit>
 80064c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80064ca:	07d9      	lsls	r1, r3, #31
 80064cc:	d405      	bmi.n	80064da <_vfiprintf_r+0x2a>
 80064ce:	89ab      	ldrh	r3, [r5, #12]
 80064d0:	059a      	lsls	r2, r3, #22
 80064d2:	d402      	bmi.n	80064da <_vfiprintf_r+0x2a>
 80064d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80064d6:	f7ff febe 	bl	8006256 <__retarget_lock_acquire_recursive>
 80064da:	89ab      	ldrh	r3, [r5, #12]
 80064dc:	071b      	lsls	r3, r3, #28
 80064de:	d501      	bpl.n	80064e4 <_vfiprintf_r+0x34>
 80064e0:	692b      	ldr	r3, [r5, #16]
 80064e2:	b99b      	cbnz	r3, 800650c <_vfiprintf_r+0x5c>
 80064e4:	4629      	mov	r1, r5
 80064e6:	4630      	mov	r0, r6
 80064e8:	f7ff fde6 	bl	80060b8 <__swsetup_r>
 80064ec:	b170      	cbz	r0, 800650c <_vfiprintf_r+0x5c>
 80064ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80064f0:	07dc      	lsls	r4, r3, #31
 80064f2:	d504      	bpl.n	80064fe <_vfiprintf_r+0x4e>
 80064f4:	f04f 30ff 	mov.w	r0, #4294967295
 80064f8:	b01d      	add	sp, #116	@ 0x74
 80064fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064fe:	89ab      	ldrh	r3, [r5, #12]
 8006500:	0598      	lsls	r0, r3, #22
 8006502:	d4f7      	bmi.n	80064f4 <_vfiprintf_r+0x44>
 8006504:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006506:	f7ff fea7 	bl	8006258 <__retarget_lock_release_recursive>
 800650a:	e7f3      	b.n	80064f4 <_vfiprintf_r+0x44>
 800650c:	2300      	movs	r3, #0
 800650e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006510:	2320      	movs	r3, #32
 8006512:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006516:	f8cd 800c 	str.w	r8, [sp, #12]
 800651a:	2330      	movs	r3, #48	@ 0x30
 800651c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80066cc <_vfiprintf_r+0x21c>
 8006520:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006524:	f04f 0901 	mov.w	r9, #1
 8006528:	4623      	mov	r3, r4
 800652a:	469a      	mov	sl, r3
 800652c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006530:	b10a      	cbz	r2, 8006536 <_vfiprintf_r+0x86>
 8006532:	2a25      	cmp	r2, #37	@ 0x25
 8006534:	d1f9      	bne.n	800652a <_vfiprintf_r+0x7a>
 8006536:	ebba 0b04 	subs.w	fp, sl, r4
 800653a:	d00b      	beq.n	8006554 <_vfiprintf_r+0xa4>
 800653c:	465b      	mov	r3, fp
 800653e:	4622      	mov	r2, r4
 8006540:	4629      	mov	r1, r5
 8006542:	4630      	mov	r0, r6
 8006544:	f7ff ffa1 	bl	800648a <__sfputs_r>
 8006548:	3001      	adds	r0, #1
 800654a:	f000 80a7 	beq.w	800669c <_vfiprintf_r+0x1ec>
 800654e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006550:	445a      	add	r2, fp
 8006552:	9209      	str	r2, [sp, #36]	@ 0x24
 8006554:	f89a 3000 	ldrb.w	r3, [sl]
 8006558:	2b00      	cmp	r3, #0
 800655a:	f000 809f 	beq.w	800669c <_vfiprintf_r+0x1ec>
 800655e:	2300      	movs	r3, #0
 8006560:	f04f 32ff 	mov.w	r2, #4294967295
 8006564:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006568:	f10a 0a01 	add.w	sl, sl, #1
 800656c:	9304      	str	r3, [sp, #16]
 800656e:	9307      	str	r3, [sp, #28]
 8006570:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006574:	931a      	str	r3, [sp, #104]	@ 0x68
 8006576:	4654      	mov	r4, sl
 8006578:	2205      	movs	r2, #5
 800657a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800657e:	4853      	ldr	r0, [pc, #332]	@ (80066cc <_vfiprintf_r+0x21c>)
 8006580:	f7f9 fe4e 	bl	8000220 <memchr>
 8006584:	9a04      	ldr	r2, [sp, #16]
 8006586:	b9d8      	cbnz	r0, 80065c0 <_vfiprintf_r+0x110>
 8006588:	06d1      	lsls	r1, r2, #27
 800658a:	bf44      	itt	mi
 800658c:	2320      	movmi	r3, #32
 800658e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006592:	0713      	lsls	r3, r2, #28
 8006594:	bf44      	itt	mi
 8006596:	232b      	movmi	r3, #43	@ 0x2b
 8006598:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800659c:	f89a 3000 	ldrb.w	r3, [sl]
 80065a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80065a2:	d015      	beq.n	80065d0 <_vfiprintf_r+0x120>
 80065a4:	9a07      	ldr	r2, [sp, #28]
 80065a6:	4654      	mov	r4, sl
 80065a8:	2000      	movs	r0, #0
 80065aa:	f04f 0c0a 	mov.w	ip, #10
 80065ae:	4621      	mov	r1, r4
 80065b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065b4:	3b30      	subs	r3, #48	@ 0x30
 80065b6:	2b09      	cmp	r3, #9
 80065b8:	d94b      	bls.n	8006652 <_vfiprintf_r+0x1a2>
 80065ba:	b1b0      	cbz	r0, 80065ea <_vfiprintf_r+0x13a>
 80065bc:	9207      	str	r2, [sp, #28]
 80065be:	e014      	b.n	80065ea <_vfiprintf_r+0x13a>
 80065c0:	eba0 0308 	sub.w	r3, r0, r8
 80065c4:	fa09 f303 	lsl.w	r3, r9, r3
 80065c8:	4313      	orrs	r3, r2
 80065ca:	9304      	str	r3, [sp, #16]
 80065cc:	46a2      	mov	sl, r4
 80065ce:	e7d2      	b.n	8006576 <_vfiprintf_r+0xc6>
 80065d0:	9b03      	ldr	r3, [sp, #12]
 80065d2:	1d19      	adds	r1, r3, #4
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	9103      	str	r1, [sp, #12]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	bfbb      	ittet	lt
 80065dc:	425b      	neglt	r3, r3
 80065de:	f042 0202 	orrlt.w	r2, r2, #2
 80065e2:	9307      	strge	r3, [sp, #28]
 80065e4:	9307      	strlt	r3, [sp, #28]
 80065e6:	bfb8      	it	lt
 80065e8:	9204      	strlt	r2, [sp, #16]
 80065ea:	7823      	ldrb	r3, [r4, #0]
 80065ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80065ee:	d10a      	bne.n	8006606 <_vfiprintf_r+0x156>
 80065f0:	7863      	ldrb	r3, [r4, #1]
 80065f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80065f4:	d132      	bne.n	800665c <_vfiprintf_r+0x1ac>
 80065f6:	9b03      	ldr	r3, [sp, #12]
 80065f8:	1d1a      	adds	r2, r3, #4
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	9203      	str	r2, [sp, #12]
 80065fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006602:	3402      	adds	r4, #2
 8006604:	9305      	str	r3, [sp, #20]
 8006606:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80066dc <_vfiprintf_r+0x22c>
 800660a:	7821      	ldrb	r1, [r4, #0]
 800660c:	2203      	movs	r2, #3
 800660e:	4650      	mov	r0, sl
 8006610:	f7f9 fe06 	bl	8000220 <memchr>
 8006614:	b138      	cbz	r0, 8006626 <_vfiprintf_r+0x176>
 8006616:	9b04      	ldr	r3, [sp, #16]
 8006618:	eba0 000a 	sub.w	r0, r0, sl
 800661c:	2240      	movs	r2, #64	@ 0x40
 800661e:	4082      	lsls	r2, r0
 8006620:	4313      	orrs	r3, r2
 8006622:	3401      	adds	r4, #1
 8006624:	9304      	str	r3, [sp, #16]
 8006626:	f814 1b01 	ldrb.w	r1, [r4], #1
 800662a:	4829      	ldr	r0, [pc, #164]	@ (80066d0 <_vfiprintf_r+0x220>)
 800662c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006630:	2206      	movs	r2, #6
 8006632:	f7f9 fdf5 	bl	8000220 <memchr>
 8006636:	2800      	cmp	r0, #0
 8006638:	d03f      	beq.n	80066ba <_vfiprintf_r+0x20a>
 800663a:	4b26      	ldr	r3, [pc, #152]	@ (80066d4 <_vfiprintf_r+0x224>)
 800663c:	bb1b      	cbnz	r3, 8006686 <_vfiprintf_r+0x1d6>
 800663e:	9b03      	ldr	r3, [sp, #12]
 8006640:	3307      	adds	r3, #7
 8006642:	f023 0307 	bic.w	r3, r3, #7
 8006646:	3308      	adds	r3, #8
 8006648:	9303      	str	r3, [sp, #12]
 800664a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800664c:	443b      	add	r3, r7
 800664e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006650:	e76a      	b.n	8006528 <_vfiprintf_r+0x78>
 8006652:	fb0c 3202 	mla	r2, ip, r2, r3
 8006656:	460c      	mov	r4, r1
 8006658:	2001      	movs	r0, #1
 800665a:	e7a8      	b.n	80065ae <_vfiprintf_r+0xfe>
 800665c:	2300      	movs	r3, #0
 800665e:	3401      	adds	r4, #1
 8006660:	9305      	str	r3, [sp, #20]
 8006662:	4619      	mov	r1, r3
 8006664:	f04f 0c0a 	mov.w	ip, #10
 8006668:	4620      	mov	r0, r4
 800666a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800666e:	3a30      	subs	r2, #48	@ 0x30
 8006670:	2a09      	cmp	r2, #9
 8006672:	d903      	bls.n	800667c <_vfiprintf_r+0x1cc>
 8006674:	2b00      	cmp	r3, #0
 8006676:	d0c6      	beq.n	8006606 <_vfiprintf_r+0x156>
 8006678:	9105      	str	r1, [sp, #20]
 800667a:	e7c4      	b.n	8006606 <_vfiprintf_r+0x156>
 800667c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006680:	4604      	mov	r4, r0
 8006682:	2301      	movs	r3, #1
 8006684:	e7f0      	b.n	8006668 <_vfiprintf_r+0x1b8>
 8006686:	ab03      	add	r3, sp, #12
 8006688:	9300      	str	r3, [sp, #0]
 800668a:	462a      	mov	r2, r5
 800668c:	4b12      	ldr	r3, [pc, #72]	@ (80066d8 <_vfiprintf_r+0x228>)
 800668e:	a904      	add	r1, sp, #16
 8006690:	4630      	mov	r0, r6
 8006692:	f3af 8000 	nop.w
 8006696:	4607      	mov	r7, r0
 8006698:	1c78      	adds	r0, r7, #1
 800669a:	d1d6      	bne.n	800664a <_vfiprintf_r+0x19a>
 800669c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800669e:	07d9      	lsls	r1, r3, #31
 80066a0:	d405      	bmi.n	80066ae <_vfiprintf_r+0x1fe>
 80066a2:	89ab      	ldrh	r3, [r5, #12]
 80066a4:	059a      	lsls	r2, r3, #22
 80066a6:	d402      	bmi.n	80066ae <_vfiprintf_r+0x1fe>
 80066a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80066aa:	f7ff fdd5 	bl	8006258 <__retarget_lock_release_recursive>
 80066ae:	89ab      	ldrh	r3, [r5, #12]
 80066b0:	065b      	lsls	r3, r3, #25
 80066b2:	f53f af1f 	bmi.w	80064f4 <_vfiprintf_r+0x44>
 80066b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80066b8:	e71e      	b.n	80064f8 <_vfiprintf_r+0x48>
 80066ba:	ab03      	add	r3, sp, #12
 80066bc:	9300      	str	r3, [sp, #0]
 80066be:	462a      	mov	r2, r5
 80066c0:	4b05      	ldr	r3, [pc, #20]	@ (80066d8 <_vfiprintf_r+0x228>)
 80066c2:	a904      	add	r1, sp, #16
 80066c4:	4630      	mov	r0, r6
 80066c6:	f000 f879 	bl	80067bc <_printf_i>
 80066ca:	e7e4      	b.n	8006696 <_vfiprintf_r+0x1e6>
 80066cc:	08006dc4 	.word	0x08006dc4
 80066d0:	08006dce 	.word	0x08006dce
 80066d4:	00000000 	.word	0x00000000
 80066d8:	0800648b 	.word	0x0800648b
 80066dc:	08006dca 	.word	0x08006dca

080066e0 <_printf_common>:
 80066e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066e4:	4616      	mov	r6, r2
 80066e6:	4698      	mov	r8, r3
 80066e8:	688a      	ldr	r2, [r1, #8]
 80066ea:	690b      	ldr	r3, [r1, #16]
 80066ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80066f0:	4293      	cmp	r3, r2
 80066f2:	bfb8      	it	lt
 80066f4:	4613      	movlt	r3, r2
 80066f6:	6033      	str	r3, [r6, #0]
 80066f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80066fc:	4607      	mov	r7, r0
 80066fe:	460c      	mov	r4, r1
 8006700:	b10a      	cbz	r2, 8006706 <_printf_common+0x26>
 8006702:	3301      	adds	r3, #1
 8006704:	6033      	str	r3, [r6, #0]
 8006706:	6823      	ldr	r3, [r4, #0]
 8006708:	0699      	lsls	r1, r3, #26
 800670a:	bf42      	ittt	mi
 800670c:	6833      	ldrmi	r3, [r6, #0]
 800670e:	3302      	addmi	r3, #2
 8006710:	6033      	strmi	r3, [r6, #0]
 8006712:	6825      	ldr	r5, [r4, #0]
 8006714:	f015 0506 	ands.w	r5, r5, #6
 8006718:	d106      	bne.n	8006728 <_printf_common+0x48>
 800671a:	f104 0a19 	add.w	sl, r4, #25
 800671e:	68e3      	ldr	r3, [r4, #12]
 8006720:	6832      	ldr	r2, [r6, #0]
 8006722:	1a9b      	subs	r3, r3, r2
 8006724:	42ab      	cmp	r3, r5
 8006726:	dc26      	bgt.n	8006776 <_printf_common+0x96>
 8006728:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800672c:	6822      	ldr	r2, [r4, #0]
 800672e:	3b00      	subs	r3, #0
 8006730:	bf18      	it	ne
 8006732:	2301      	movne	r3, #1
 8006734:	0692      	lsls	r2, r2, #26
 8006736:	d42b      	bmi.n	8006790 <_printf_common+0xb0>
 8006738:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800673c:	4641      	mov	r1, r8
 800673e:	4638      	mov	r0, r7
 8006740:	47c8      	blx	r9
 8006742:	3001      	adds	r0, #1
 8006744:	d01e      	beq.n	8006784 <_printf_common+0xa4>
 8006746:	6823      	ldr	r3, [r4, #0]
 8006748:	6922      	ldr	r2, [r4, #16]
 800674a:	f003 0306 	and.w	r3, r3, #6
 800674e:	2b04      	cmp	r3, #4
 8006750:	bf02      	ittt	eq
 8006752:	68e5      	ldreq	r5, [r4, #12]
 8006754:	6833      	ldreq	r3, [r6, #0]
 8006756:	1aed      	subeq	r5, r5, r3
 8006758:	68a3      	ldr	r3, [r4, #8]
 800675a:	bf0c      	ite	eq
 800675c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006760:	2500      	movne	r5, #0
 8006762:	4293      	cmp	r3, r2
 8006764:	bfc4      	itt	gt
 8006766:	1a9b      	subgt	r3, r3, r2
 8006768:	18ed      	addgt	r5, r5, r3
 800676a:	2600      	movs	r6, #0
 800676c:	341a      	adds	r4, #26
 800676e:	42b5      	cmp	r5, r6
 8006770:	d11a      	bne.n	80067a8 <_printf_common+0xc8>
 8006772:	2000      	movs	r0, #0
 8006774:	e008      	b.n	8006788 <_printf_common+0xa8>
 8006776:	2301      	movs	r3, #1
 8006778:	4652      	mov	r2, sl
 800677a:	4641      	mov	r1, r8
 800677c:	4638      	mov	r0, r7
 800677e:	47c8      	blx	r9
 8006780:	3001      	adds	r0, #1
 8006782:	d103      	bne.n	800678c <_printf_common+0xac>
 8006784:	f04f 30ff 	mov.w	r0, #4294967295
 8006788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800678c:	3501      	adds	r5, #1
 800678e:	e7c6      	b.n	800671e <_printf_common+0x3e>
 8006790:	18e1      	adds	r1, r4, r3
 8006792:	1c5a      	adds	r2, r3, #1
 8006794:	2030      	movs	r0, #48	@ 0x30
 8006796:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800679a:	4422      	add	r2, r4
 800679c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80067a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80067a4:	3302      	adds	r3, #2
 80067a6:	e7c7      	b.n	8006738 <_printf_common+0x58>
 80067a8:	2301      	movs	r3, #1
 80067aa:	4622      	mov	r2, r4
 80067ac:	4641      	mov	r1, r8
 80067ae:	4638      	mov	r0, r7
 80067b0:	47c8      	blx	r9
 80067b2:	3001      	adds	r0, #1
 80067b4:	d0e6      	beq.n	8006784 <_printf_common+0xa4>
 80067b6:	3601      	adds	r6, #1
 80067b8:	e7d9      	b.n	800676e <_printf_common+0x8e>
	...

080067bc <_printf_i>:
 80067bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067c0:	7e0f      	ldrb	r7, [r1, #24]
 80067c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80067c4:	2f78      	cmp	r7, #120	@ 0x78
 80067c6:	4691      	mov	r9, r2
 80067c8:	4680      	mov	r8, r0
 80067ca:	460c      	mov	r4, r1
 80067cc:	469a      	mov	sl, r3
 80067ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80067d2:	d807      	bhi.n	80067e4 <_printf_i+0x28>
 80067d4:	2f62      	cmp	r7, #98	@ 0x62
 80067d6:	d80a      	bhi.n	80067ee <_printf_i+0x32>
 80067d8:	2f00      	cmp	r7, #0
 80067da:	f000 80d2 	beq.w	8006982 <_printf_i+0x1c6>
 80067de:	2f58      	cmp	r7, #88	@ 0x58
 80067e0:	f000 80b9 	beq.w	8006956 <_printf_i+0x19a>
 80067e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80067ec:	e03a      	b.n	8006864 <_printf_i+0xa8>
 80067ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80067f2:	2b15      	cmp	r3, #21
 80067f4:	d8f6      	bhi.n	80067e4 <_printf_i+0x28>
 80067f6:	a101      	add	r1, pc, #4	@ (adr r1, 80067fc <_printf_i+0x40>)
 80067f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067fc:	08006855 	.word	0x08006855
 8006800:	08006869 	.word	0x08006869
 8006804:	080067e5 	.word	0x080067e5
 8006808:	080067e5 	.word	0x080067e5
 800680c:	080067e5 	.word	0x080067e5
 8006810:	080067e5 	.word	0x080067e5
 8006814:	08006869 	.word	0x08006869
 8006818:	080067e5 	.word	0x080067e5
 800681c:	080067e5 	.word	0x080067e5
 8006820:	080067e5 	.word	0x080067e5
 8006824:	080067e5 	.word	0x080067e5
 8006828:	08006969 	.word	0x08006969
 800682c:	08006893 	.word	0x08006893
 8006830:	08006923 	.word	0x08006923
 8006834:	080067e5 	.word	0x080067e5
 8006838:	080067e5 	.word	0x080067e5
 800683c:	0800698b 	.word	0x0800698b
 8006840:	080067e5 	.word	0x080067e5
 8006844:	08006893 	.word	0x08006893
 8006848:	080067e5 	.word	0x080067e5
 800684c:	080067e5 	.word	0x080067e5
 8006850:	0800692b 	.word	0x0800692b
 8006854:	6833      	ldr	r3, [r6, #0]
 8006856:	1d1a      	adds	r2, r3, #4
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	6032      	str	r2, [r6, #0]
 800685c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006860:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006864:	2301      	movs	r3, #1
 8006866:	e09d      	b.n	80069a4 <_printf_i+0x1e8>
 8006868:	6833      	ldr	r3, [r6, #0]
 800686a:	6820      	ldr	r0, [r4, #0]
 800686c:	1d19      	adds	r1, r3, #4
 800686e:	6031      	str	r1, [r6, #0]
 8006870:	0606      	lsls	r6, r0, #24
 8006872:	d501      	bpl.n	8006878 <_printf_i+0xbc>
 8006874:	681d      	ldr	r5, [r3, #0]
 8006876:	e003      	b.n	8006880 <_printf_i+0xc4>
 8006878:	0645      	lsls	r5, r0, #25
 800687a:	d5fb      	bpl.n	8006874 <_printf_i+0xb8>
 800687c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006880:	2d00      	cmp	r5, #0
 8006882:	da03      	bge.n	800688c <_printf_i+0xd0>
 8006884:	232d      	movs	r3, #45	@ 0x2d
 8006886:	426d      	negs	r5, r5
 8006888:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800688c:	4859      	ldr	r0, [pc, #356]	@ (80069f4 <_printf_i+0x238>)
 800688e:	230a      	movs	r3, #10
 8006890:	e011      	b.n	80068b6 <_printf_i+0xfa>
 8006892:	6821      	ldr	r1, [r4, #0]
 8006894:	6833      	ldr	r3, [r6, #0]
 8006896:	0608      	lsls	r0, r1, #24
 8006898:	f853 5b04 	ldr.w	r5, [r3], #4
 800689c:	d402      	bmi.n	80068a4 <_printf_i+0xe8>
 800689e:	0649      	lsls	r1, r1, #25
 80068a0:	bf48      	it	mi
 80068a2:	b2ad      	uxthmi	r5, r5
 80068a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80068a6:	4853      	ldr	r0, [pc, #332]	@ (80069f4 <_printf_i+0x238>)
 80068a8:	6033      	str	r3, [r6, #0]
 80068aa:	bf14      	ite	ne
 80068ac:	230a      	movne	r3, #10
 80068ae:	2308      	moveq	r3, #8
 80068b0:	2100      	movs	r1, #0
 80068b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80068b6:	6866      	ldr	r6, [r4, #4]
 80068b8:	60a6      	str	r6, [r4, #8]
 80068ba:	2e00      	cmp	r6, #0
 80068bc:	bfa2      	ittt	ge
 80068be:	6821      	ldrge	r1, [r4, #0]
 80068c0:	f021 0104 	bicge.w	r1, r1, #4
 80068c4:	6021      	strge	r1, [r4, #0]
 80068c6:	b90d      	cbnz	r5, 80068cc <_printf_i+0x110>
 80068c8:	2e00      	cmp	r6, #0
 80068ca:	d04b      	beq.n	8006964 <_printf_i+0x1a8>
 80068cc:	4616      	mov	r6, r2
 80068ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80068d2:	fb03 5711 	mls	r7, r3, r1, r5
 80068d6:	5dc7      	ldrb	r7, [r0, r7]
 80068d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80068dc:	462f      	mov	r7, r5
 80068de:	42bb      	cmp	r3, r7
 80068e0:	460d      	mov	r5, r1
 80068e2:	d9f4      	bls.n	80068ce <_printf_i+0x112>
 80068e4:	2b08      	cmp	r3, #8
 80068e6:	d10b      	bne.n	8006900 <_printf_i+0x144>
 80068e8:	6823      	ldr	r3, [r4, #0]
 80068ea:	07df      	lsls	r7, r3, #31
 80068ec:	d508      	bpl.n	8006900 <_printf_i+0x144>
 80068ee:	6923      	ldr	r3, [r4, #16]
 80068f0:	6861      	ldr	r1, [r4, #4]
 80068f2:	4299      	cmp	r1, r3
 80068f4:	bfde      	ittt	le
 80068f6:	2330      	movle	r3, #48	@ 0x30
 80068f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80068fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006900:	1b92      	subs	r2, r2, r6
 8006902:	6122      	str	r2, [r4, #16]
 8006904:	f8cd a000 	str.w	sl, [sp]
 8006908:	464b      	mov	r3, r9
 800690a:	aa03      	add	r2, sp, #12
 800690c:	4621      	mov	r1, r4
 800690e:	4640      	mov	r0, r8
 8006910:	f7ff fee6 	bl	80066e0 <_printf_common>
 8006914:	3001      	adds	r0, #1
 8006916:	d14a      	bne.n	80069ae <_printf_i+0x1f2>
 8006918:	f04f 30ff 	mov.w	r0, #4294967295
 800691c:	b004      	add	sp, #16
 800691e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006922:	6823      	ldr	r3, [r4, #0]
 8006924:	f043 0320 	orr.w	r3, r3, #32
 8006928:	6023      	str	r3, [r4, #0]
 800692a:	4833      	ldr	r0, [pc, #204]	@ (80069f8 <_printf_i+0x23c>)
 800692c:	2778      	movs	r7, #120	@ 0x78
 800692e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006932:	6823      	ldr	r3, [r4, #0]
 8006934:	6831      	ldr	r1, [r6, #0]
 8006936:	061f      	lsls	r7, r3, #24
 8006938:	f851 5b04 	ldr.w	r5, [r1], #4
 800693c:	d402      	bmi.n	8006944 <_printf_i+0x188>
 800693e:	065f      	lsls	r7, r3, #25
 8006940:	bf48      	it	mi
 8006942:	b2ad      	uxthmi	r5, r5
 8006944:	6031      	str	r1, [r6, #0]
 8006946:	07d9      	lsls	r1, r3, #31
 8006948:	bf44      	itt	mi
 800694a:	f043 0320 	orrmi.w	r3, r3, #32
 800694e:	6023      	strmi	r3, [r4, #0]
 8006950:	b11d      	cbz	r5, 800695a <_printf_i+0x19e>
 8006952:	2310      	movs	r3, #16
 8006954:	e7ac      	b.n	80068b0 <_printf_i+0xf4>
 8006956:	4827      	ldr	r0, [pc, #156]	@ (80069f4 <_printf_i+0x238>)
 8006958:	e7e9      	b.n	800692e <_printf_i+0x172>
 800695a:	6823      	ldr	r3, [r4, #0]
 800695c:	f023 0320 	bic.w	r3, r3, #32
 8006960:	6023      	str	r3, [r4, #0]
 8006962:	e7f6      	b.n	8006952 <_printf_i+0x196>
 8006964:	4616      	mov	r6, r2
 8006966:	e7bd      	b.n	80068e4 <_printf_i+0x128>
 8006968:	6833      	ldr	r3, [r6, #0]
 800696a:	6825      	ldr	r5, [r4, #0]
 800696c:	6961      	ldr	r1, [r4, #20]
 800696e:	1d18      	adds	r0, r3, #4
 8006970:	6030      	str	r0, [r6, #0]
 8006972:	062e      	lsls	r6, r5, #24
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	d501      	bpl.n	800697c <_printf_i+0x1c0>
 8006978:	6019      	str	r1, [r3, #0]
 800697a:	e002      	b.n	8006982 <_printf_i+0x1c6>
 800697c:	0668      	lsls	r0, r5, #25
 800697e:	d5fb      	bpl.n	8006978 <_printf_i+0x1bc>
 8006980:	8019      	strh	r1, [r3, #0]
 8006982:	2300      	movs	r3, #0
 8006984:	6123      	str	r3, [r4, #16]
 8006986:	4616      	mov	r6, r2
 8006988:	e7bc      	b.n	8006904 <_printf_i+0x148>
 800698a:	6833      	ldr	r3, [r6, #0]
 800698c:	1d1a      	adds	r2, r3, #4
 800698e:	6032      	str	r2, [r6, #0]
 8006990:	681e      	ldr	r6, [r3, #0]
 8006992:	6862      	ldr	r2, [r4, #4]
 8006994:	2100      	movs	r1, #0
 8006996:	4630      	mov	r0, r6
 8006998:	f7f9 fc42 	bl	8000220 <memchr>
 800699c:	b108      	cbz	r0, 80069a2 <_printf_i+0x1e6>
 800699e:	1b80      	subs	r0, r0, r6
 80069a0:	6060      	str	r0, [r4, #4]
 80069a2:	6863      	ldr	r3, [r4, #4]
 80069a4:	6123      	str	r3, [r4, #16]
 80069a6:	2300      	movs	r3, #0
 80069a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069ac:	e7aa      	b.n	8006904 <_printf_i+0x148>
 80069ae:	6923      	ldr	r3, [r4, #16]
 80069b0:	4632      	mov	r2, r6
 80069b2:	4649      	mov	r1, r9
 80069b4:	4640      	mov	r0, r8
 80069b6:	47d0      	blx	sl
 80069b8:	3001      	adds	r0, #1
 80069ba:	d0ad      	beq.n	8006918 <_printf_i+0x15c>
 80069bc:	6823      	ldr	r3, [r4, #0]
 80069be:	079b      	lsls	r3, r3, #30
 80069c0:	d413      	bmi.n	80069ea <_printf_i+0x22e>
 80069c2:	68e0      	ldr	r0, [r4, #12]
 80069c4:	9b03      	ldr	r3, [sp, #12]
 80069c6:	4298      	cmp	r0, r3
 80069c8:	bfb8      	it	lt
 80069ca:	4618      	movlt	r0, r3
 80069cc:	e7a6      	b.n	800691c <_printf_i+0x160>
 80069ce:	2301      	movs	r3, #1
 80069d0:	4632      	mov	r2, r6
 80069d2:	4649      	mov	r1, r9
 80069d4:	4640      	mov	r0, r8
 80069d6:	47d0      	blx	sl
 80069d8:	3001      	adds	r0, #1
 80069da:	d09d      	beq.n	8006918 <_printf_i+0x15c>
 80069dc:	3501      	adds	r5, #1
 80069de:	68e3      	ldr	r3, [r4, #12]
 80069e0:	9903      	ldr	r1, [sp, #12]
 80069e2:	1a5b      	subs	r3, r3, r1
 80069e4:	42ab      	cmp	r3, r5
 80069e6:	dcf2      	bgt.n	80069ce <_printf_i+0x212>
 80069e8:	e7eb      	b.n	80069c2 <_printf_i+0x206>
 80069ea:	2500      	movs	r5, #0
 80069ec:	f104 0619 	add.w	r6, r4, #25
 80069f0:	e7f5      	b.n	80069de <_printf_i+0x222>
 80069f2:	bf00      	nop
 80069f4:	08006dd5 	.word	0x08006dd5
 80069f8:	08006de6 	.word	0x08006de6

080069fc <__sflush_r>:
 80069fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a04:	0716      	lsls	r6, r2, #28
 8006a06:	4605      	mov	r5, r0
 8006a08:	460c      	mov	r4, r1
 8006a0a:	d454      	bmi.n	8006ab6 <__sflush_r+0xba>
 8006a0c:	684b      	ldr	r3, [r1, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	dc02      	bgt.n	8006a18 <__sflush_r+0x1c>
 8006a12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	dd48      	ble.n	8006aaa <__sflush_r+0xae>
 8006a18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a1a:	2e00      	cmp	r6, #0
 8006a1c:	d045      	beq.n	8006aaa <__sflush_r+0xae>
 8006a1e:	2300      	movs	r3, #0
 8006a20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006a24:	682f      	ldr	r7, [r5, #0]
 8006a26:	6a21      	ldr	r1, [r4, #32]
 8006a28:	602b      	str	r3, [r5, #0]
 8006a2a:	d030      	beq.n	8006a8e <__sflush_r+0x92>
 8006a2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006a2e:	89a3      	ldrh	r3, [r4, #12]
 8006a30:	0759      	lsls	r1, r3, #29
 8006a32:	d505      	bpl.n	8006a40 <__sflush_r+0x44>
 8006a34:	6863      	ldr	r3, [r4, #4]
 8006a36:	1ad2      	subs	r2, r2, r3
 8006a38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006a3a:	b10b      	cbz	r3, 8006a40 <__sflush_r+0x44>
 8006a3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006a3e:	1ad2      	subs	r2, r2, r3
 8006a40:	2300      	movs	r3, #0
 8006a42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a44:	6a21      	ldr	r1, [r4, #32]
 8006a46:	4628      	mov	r0, r5
 8006a48:	47b0      	blx	r6
 8006a4a:	1c43      	adds	r3, r0, #1
 8006a4c:	89a3      	ldrh	r3, [r4, #12]
 8006a4e:	d106      	bne.n	8006a5e <__sflush_r+0x62>
 8006a50:	6829      	ldr	r1, [r5, #0]
 8006a52:	291d      	cmp	r1, #29
 8006a54:	d82b      	bhi.n	8006aae <__sflush_r+0xb2>
 8006a56:	4a2a      	ldr	r2, [pc, #168]	@ (8006b00 <__sflush_r+0x104>)
 8006a58:	410a      	asrs	r2, r1
 8006a5a:	07d6      	lsls	r6, r2, #31
 8006a5c:	d427      	bmi.n	8006aae <__sflush_r+0xb2>
 8006a5e:	2200      	movs	r2, #0
 8006a60:	6062      	str	r2, [r4, #4]
 8006a62:	04d9      	lsls	r1, r3, #19
 8006a64:	6922      	ldr	r2, [r4, #16]
 8006a66:	6022      	str	r2, [r4, #0]
 8006a68:	d504      	bpl.n	8006a74 <__sflush_r+0x78>
 8006a6a:	1c42      	adds	r2, r0, #1
 8006a6c:	d101      	bne.n	8006a72 <__sflush_r+0x76>
 8006a6e:	682b      	ldr	r3, [r5, #0]
 8006a70:	b903      	cbnz	r3, 8006a74 <__sflush_r+0x78>
 8006a72:	6560      	str	r0, [r4, #84]	@ 0x54
 8006a74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a76:	602f      	str	r7, [r5, #0]
 8006a78:	b1b9      	cbz	r1, 8006aaa <__sflush_r+0xae>
 8006a7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a7e:	4299      	cmp	r1, r3
 8006a80:	d002      	beq.n	8006a88 <__sflush_r+0x8c>
 8006a82:	4628      	mov	r0, r5
 8006a84:	f7ff fbea 	bl	800625c <_free_r>
 8006a88:	2300      	movs	r3, #0
 8006a8a:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a8c:	e00d      	b.n	8006aaa <__sflush_r+0xae>
 8006a8e:	2301      	movs	r3, #1
 8006a90:	4628      	mov	r0, r5
 8006a92:	47b0      	blx	r6
 8006a94:	4602      	mov	r2, r0
 8006a96:	1c50      	adds	r0, r2, #1
 8006a98:	d1c9      	bne.n	8006a2e <__sflush_r+0x32>
 8006a9a:	682b      	ldr	r3, [r5, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d0c6      	beq.n	8006a2e <__sflush_r+0x32>
 8006aa0:	2b1d      	cmp	r3, #29
 8006aa2:	d001      	beq.n	8006aa8 <__sflush_r+0xac>
 8006aa4:	2b16      	cmp	r3, #22
 8006aa6:	d11e      	bne.n	8006ae6 <__sflush_r+0xea>
 8006aa8:	602f      	str	r7, [r5, #0]
 8006aaa:	2000      	movs	r0, #0
 8006aac:	e022      	b.n	8006af4 <__sflush_r+0xf8>
 8006aae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ab2:	b21b      	sxth	r3, r3
 8006ab4:	e01b      	b.n	8006aee <__sflush_r+0xf2>
 8006ab6:	690f      	ldr	r7, [r1, #16]
 8006ab8:	2f00      	cmp	r7, #0
 8006aba:	d0f6      	beq.n	8006aaa <__sflush_r+0xae>
 8006abc:	0793      	lsls	r3, r2, #30
 8006abe:	680e      	ldr	r6, [r1, #0]
 8006ac0:	bf08      	it	eq
 8006ac2:	694b      	ldreq	r3, [r1, #20]
 8006ac4:	600f      	str	r7, [r1, #0]
 8006ac6:	bf18      	it	ne
 8006ac8:	2300      	movne	r3, #0
 8006aca:	eba6 0807 	sub.w	r8, r6, r7
 8006ace:	608b      	str	r3, [r1, #8]
 8006ad0:	f1b8 0f00 	cmp.w	r8, #0
 8006ad4:	dde9      	ble.n	8006aaa <__sflush_r+0xae>
 8006ad6:	6a21      	ldr	r1, [r4, #32]
 8006ad8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006ada:	4643      	mov	r3, r8
 8006adc:	463a      	mov	r2, r7
 8006ade:	4628      	mov	r0, r5
 8006ae0:	47b0      	blx	r6
 8006ae2:	2800      	cmp	r0, #0
 8006ae4:	dc08      	bgt.n	8006af8 <__sflush_r+0xfc>
 8006ae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006aee:	81a3      	strh	r3, [r4, #12]
 8006af0:	f04f 30ff 	mov.w	r0, #4294967295
 8006af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006af8:	4407      	add	r7, r0
 8006afa:	eba8 0800 	sub.w	r8, r8, r0
 8006afe:	e7e7      	b.n	8006ad0 <__sflush_r+0xd4>
 8006b00:	dfbffffe 	.word	0xdfbffffe

08006b04 <_fflush_r>:
 8006b04:	b538      	push	{r3, r4, r5, lr}
 8006b06:	690b      	ldr	r3, [r1, #16]
 8006b08:	4605      	mov	r5, r0
 8006b0a:	460c      	mov	r4, r1
 8006b0c:	b913      	cbnz	r3, 8006b14 <_fflush_r+0x10>
 8006b0e:	2500      	movs	r5, #0
 8006b10:	4628      	mov	r0, r5
 8006b12:	bd38      	pop	{r3, r4, r5, pc}
 8006b14:	b118      	cbz	r0, 8006b1e <_fflush_r+0x1a>
 8006b16:	6a03      	ldr	r3, [r0, #32]
 8006b18:	b90b      	cbnz	r3, 8006b1e <_fflush_r+0x1a>
 8006b1a:	f7ff f8e9 	bl	8005cf0 <__sinit>
 8006b1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d0f3      	beq.n	8006b0e <_fflush_r+0xa>
 8006b26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006b28:	07d0      	lsls	r0, r2, #31
 8006b2a:	d404      	bmi.n	8006b36 <_fflush_r+0x32>
 8006b2c:	0599      	lsls	r1, r3, #22
 8006b2e:	d402      	bmi.n	8006b36 <_fflush_r+0x32>
 8006b30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b32:	f7ff fb90 	bl	8006256 <__retarget_lock_acquire_recursive>
 8006b36:	4628      	mov	r0, r5
 8006b38:	4621      	mov	r1, r4
 8006b3a:	f7ff ff5f 	bl	80069fc <__sflush_r>
 8006b3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b40:	07da      	lsls	r2, r3, #31
 8006b42:	4605      	mov	r5, r0
 8006b44:	d4e4      	bmi.n	8006b10 <_fflush_r+0xc>
 8006b46:	89a3      	ldrh	r3, [r4, #12]
 8006b48:	059b      	lsls	r3, r3, #22
 8006b4a:	d4e1      	bmi.n	8006b10 <_fflush_r+0xc>
 8006b4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b4e:	f7ff fb83 	bl	8006258 <__retarget_lock_release_recursive>
 8006b52:	e7dd      	b.n	8006b10 <_fflush_r+0xc>

08006b54 <__swhatbuf_r>:
 8006b54:	b570      	push	{r4, r5, r6, lr}
 8006b56:	460c      	mov	r4, r1
 8006b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b5c:	2900      	cmp	r1, #0
 8006b5e:	b096      	sub	sp, #88	@ 0x58
 8006b60:	4615      	mov	r5, r2
 8006b62:	461e      	mov	r6, r3
 8006b64:	da0d      	bge.n	8006b82 <__swhatbuf_r+0x2e>
 8006b66:	89a3      	ldrh	r3, [r4, #12]
 8006b68:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006b6c:	f04f 0100 	mov.w	r1, #0
 8006b70:	bf14      	ite	ne
 8006b72:	2340      	movne	r3, #64	@ 0x40
 8006b74:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006b78:	2000      	movs	r0, #0
 8006b7a:	6031      	str	r1, [r6, #0]
 8006b7c:	602b      	str	r3, [r5, #0]
 8006b7e:	b016      	add	sp, #88	@ 0x58
 8006b80:	bd70      	pop	{r4, r5, r6, pc}
 8006b82:	466a      	mov	r2, sp
 8006b84:	f000 f848 	bl	8006c18 <_fstat_r>
 8006b88:	2800      	cmp	r0, #0
 8006b8a:	dbec      	blt.n	8006b66 <__swhatbuf_r+0x12>
 8006b8c:	9901      	ldr	r1, [sp, #4]
 8006b8e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006b92:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006b96:	4259      	negs	r1, r3
 8006b98:	4159      	adcs	r1, r3
 8006b9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006b9e:	e7eb      	b.n	8006b78 <__swhatbuf_r+0x24>

08006ba0 <__smakebuf_r>:
 8006ba0:	898b      	ldrh	r3, [r1, #12]
 8006ba2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ba4:	079d      	lsls	r5, r3, #30
 8006ba6:	4606      	mov	r6, r0
 8006ba8:	460c      	mov	r4, r1
 8006baa:	d507      	bpl.n	8006bbc <__smakebuf_r+0x1c>
 8006bac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006bb0:	6023      	str	r3, [r4, #0]
 8006bb2:	6123      	str	r3, [r4, #16]
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	6163      	str	r3, [r4, #20]
 8006bb8:	b003      	add	sp, #12
 8006bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bbc:	ab01      	add	r3, sp, #4
 8006bbe:	466a      	mov	r2, sp
 8006bc0:	f7ff ffc8 	bl	8006b54 <__swhatbuf_r>
 8006bc4:	9f00      	ldr	r7, [sp, #0]
 8006bc6:	4605      	mov	r5, r0
 8006bc8:	4639      	mov	r1, r7
 8006bca:	4630      	mov	r0, r6
 8006bcc:	f7ff fbba 	bl	8006344 <_malloc_r>
 8006bd0:	b948      	cbnz	r0, 8006be6 <__smakebuf_r+0x46>
 8006bd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bd6:	059a      	lsls	r2, r3, #22
 8006bd8:	d4ee      	bmi.n	8006bb8 <__smakebuf_r+0x18>
 8006bda:	f023 0303 	bic.w	r3, r3, #3
 8006bde:	f043 0302 	orr.w	r3, r3, #2
 8006be2:	81a3      	strh	r3, [r4, #12]
 8006be4:	e7e2      	b.n	8006bac <__smakebuf_r+0xc>
 8006be6:	89a3      	ldrh	r3, [r4, #12]
 8006be8:	6020      	str	r0, [r4, #0]
 8006bea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bee:	81a3      	strh	r3, [r4, #12]
 8006bf0:	9b01      	ldr	r3, [sp, #4]
 8006bf2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006bf6:	b15b      	cbz	r3, 8006c10 <__smakebuf_r+0x70>
 8006bf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bfc:	4630      	mov	r0, r6
 8006bfe:	f000 f81d 	bl	8006c3c <_isatty_r>
 8006c02:	b128      	cbz	r0, 8006c10 <__smakebuf_r+0x70>
 8006c04:	89a3      	ldrh	r3, [r4, #12]
 8006c06:	f023 0303 	bic.w	r3, r3, #3
 8006c0a:	f043 0301 	orr.w	r3, r3, #1
 8006c0e:	81a3      	strh	r3, [r4, #12]
 8006c10:	89a3      	ldrh	r3, [r4, #12]
 8006c12:	431d      	orrs	r5, r3
 8006c14:	81a5      	strh	r5, [r4, #12]
 8006c16:	e7cf      	b.n	8006bb8 <__smakebuf_r+0x18>

08006c18 <_fstat_r>:
 8006c18:	b538      	push	{r3, r4, r5, lr}
 8006c1a:	4d07      	ldr	r5, [pc, #28]	@ (8006c38 <_fstat_r+0x20>)
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	4604      	mov	r4, r0
 8006c20:	4608      	mov	r0, r1
 8006c22:	4611      	mov	r1, r2
 8006c24:	602b      	str	r3, [r5, #0]
 8006c26:	f7fa fe04 	bl	8001832 <_fstat>
 8006c2a:	1c43      	adds	r3, r0, #1
 8006c2c:	d102      	bne.n	8006c34 <_fstat_r+0x1c>
 8006c2e:	682b      	ldr	r3, [r5, #0]
 8006c30:	b103      	cbz	r3, 8006c34 <_fstat_r+0x1c>
 8006c32:	6023      	str	r3, [r4, #0]
 8006c34:	bd38      	pop	{r3, r4, r5, pc}
 8006c36:	bf00      	nop
 8006c38:	20000388 	.word	0x20000388

08006c3c <_isatty_r>:
 8006c3c:	b538      	push	{r3, r4, r5, lr}
 8006c3e:	4d06      	ldr	r5, [pc, #24]	@ (8006c58 <_isatty_r+0x1c>)
 8006c40:	2300      	movs	r3, #0
 8006c42:	4604      	mov	r4, r0
 8006c44:	4608      	mov	r0, r1
 8006c46:	602b      	str	r3, [r5, #0]
 8006c48:	f7fa fe03 	bl	8001852 <_isatty>
 8006c4c:	1c43      	adds	r3, r0, #1
 8006c4e:	d102      	bne.n	8006c56 <_isatty_r+0x1a>
 8006c50:	682b      	ldr	r3, [r5, #0]
 8006c52:	b103      	cbz	r3, 8006c56 <_isatty_r+0x1a>
 8006c54:	6023      	str	r3, [r4, #0]
 8006c56:	bd38      	pop	{r3, r4, r5, pc}
 8006c58:	20000388 	.word	0x20000388

08006c5c <_sbrk_r>:
 8006c5c:	b538      	push	{r3, r4, r5, lr}
 8006c5e:	4d06      	ldr	r5, [pc, #24]	@ (8006c78 <_sbrk_r+0x1c>)
 8006c60:	2300      	movs	r3, #0
 8006c62:	4604      	mov	r4, r0
 8006c64:	4608      	mov	r0, r1
 8006c66:	602b      	str	r3, [r5, #0]
 8006c68:	f7fa fe0c 	bl	8001884 <_sbrk>
 8006c6c:	1c43      	adds	r3, r0, #1
 8006c6e:	d102      	bne.n	8006c76 <_sbrk_r+0x1a>
 8006c70:	682b      	ldr	r3, [r5, #0]
 8006c72:	b103      	cbz	r3, 8006c76 <_sbrk_r+0x1a>
 8006c74:	6023      	str	r3, [r4, #0]
 8006c76:	bd38      	pop	{r3, r4, r5, pc}
 8006c78:	20000388 	.word	0x20000388

08006c7c <_init>:
 8006c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c7e:	bf00      	nop
 8006c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c82:	bc08      	pop	{r3}
 8006c84:	469e      	mov	lr, r3
 8006c86:	4770      	bx	lr

08006c88 <_fini>:
 8006c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c8a:	bf00      	nop
 8006c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c8e:	bc08      	pop	{r3}
 8006c90:	469e      	mov	lr, r3
 8006c92:	4770      	bx	lr
