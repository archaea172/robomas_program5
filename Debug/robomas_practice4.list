
robomas_practice4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006310  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  080064f0  080064f0  000074f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800665c  0800665c  00008078  2**0
                  CONTENTS
  4 .ARM          00000008  0800665c  0800665c  0000765c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006664  08006664  00008078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006664  08006664  00007664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006668  08006668  00007668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0800666c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  20000078  080066e4  00008078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ac  080066e4  000083ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001622e  00000000  00000000  000080a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002916  00000000  00000000  0001e2d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001338  00000000  00000000  00020bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ef7  00000000  00000000  00021f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027c5f  00000000  00000000  00022e1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015bdd  00000000  00000000  0004aa7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102c16  00000000  00000000  0006065b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00163271  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ac0  00000000  00000000  001632b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00168d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000078 	.word	0x20000078
 80001fc:	00000000 	.word	0x00000000
 8000200:	080064d8 	.word	0x080064d8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000007c 	.word	0x2000007c
 800021c:	080064d8 	.word	0x080064d8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]

	if (rpm > 0){
 80005b8:	4b5d      	ldr	r3, [pc, #372]	@ (8000730 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80005ba:	881b      	ldrh	r3, [r3, #0]
 80005bc:	b21b      	sxth	r3, r3
 80005be:	2b00      	cmp	r3, #0
 80005c0:	dd36      	ble.n	8000630 <HAL_TIM_PeriodElapsedCallback+0x80>
		if (p_angle - angle > (8190 / 2)) sa_angle = angle + (8191 - p_angle);
 80005c2:	4b5c      	ldr	r3, [pc, #368]	@ (8000734 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80005c4:	ed93 7a00 	vldr	s14, [r3]
 80005c8:	4b5b      	ldr	r3, [pc, #364]	@ (8000738 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80005ca:	881b      	ldrh	r3, [r3, #0]
 80005cc:	b29b      	uxth	r3, r3
 80005ce:	ee07 3a90 	vmov	s15, r3
 80005d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80005da:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800073c <HAL_TIM_PeriodElapsedCallback+0x18c>
 80005de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005e6:	dd13      	ble.n	8000610 <HAL_TIM_PeriodElapsedCallback+0x60>
 80005e8:	4b53      	ldr	r3, [pc, #332]	@ (8000738 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80005ea:	881b      	ldrh	r3, [r3, #0]
 80005ec:	b29b      	uxth	r3, r3
 80005ee:	ee07 3a90 	vmov	s15, r3
 80005f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80005f6:	4b4f      	ldr	r3, [pc, #316]	@ (8000734 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80005f8:	edd3 7a00 	vldr	s15, [r3]
 80005fc:	eddf 6a50 	vldr	s13, [pc, #320]	@ 8000740 <HAL_TIM_PeriodElapsedCallback+0x190>
 8000600:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000604:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000608:	4b4e      	ldr	r3, [pc, #312]	@ (8000744 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800060a:	edc3 7a00 	vstr	s15, [r3]
 800060e:	e050      	b.n	80006b2 <HAL_TIM_PeriodElapsedCallback+0x102>
		else sa_angle = angle - p_angle;
 8000610:	4b49      	ldr	r3, [pc, #292]	@ (8000738 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000612:	881b      	ldrh	r3, [r3, #0]
 8000614:	b29b      	uxth	r3, r3
 8000616:	ee07 3a90 	vmov	s15, r3
 800061a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800061e:	4b45      	ldr	r3, [pc, #276]	@ (8000734 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000620:	edd3 7a00 	vldr	s15, [r3]
 8000624:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000628:	4b46      	ldr	r3, [pc, #280]	@ (8000744 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800062a:	edc3 7a00 	vstr	s15, [r3]
 800062e:	e040      	b.n	80006b2 <HAL_TIM_PeriodElapsedCallback+0x102>
	}else if (rpm < 0){
 8000630:	4b3f      	ldr	r3, [pc, #252]	@ (8000730 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000632:	881b      	ldrh	r3, [r3, #0]
 8000634:	b21b      	sxth	r3, r3
 8000636:	2b00      	cmp	r3, #0
 8000638:	da37      	bge.n	80006aa <HAL_TIM_PeriodElapsedCallback+0xfa>
		if (p_angle - angle > (8190 / 2)) sa_angle = -(p_angle + (8191 - angle));
 800063a:	4b3e      	ldr	r3, [pc, #248]	@ (8000734 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800063c:	ed93 7a00 	vldr	s14, [r3]
 8000640:	4b3d      	ldr	r3, [pc, #244]	@ (8000738 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000642:	881b      	ldrh	r3, [r3, #0]
 8000644:	b29b      	uxth	r3, r3
 8000646:	ee07 3a90 	vmov	s15, r3
 800064a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800064e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000652:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800073c <HAL_TIM_PeriodElapsedCallback+0x18c>
 8000656:	eef4 7ac7 	vcmpe.f32	s15, s14
 800065a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800065e:	dd14      	ble.n	800068a <HAL_TIM_PeriodElapsedCallback+0xda>
 8000660:	4b35      	ldr	r3, [pc, #212]	@ (8000738 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000662:	881b      	ldrh	r3, [r3, #0]
 8000664:	b29b      	uxth	r3, r3
 8000666:	f5c3 53ff 	rsb	r3, r3, #8160	@ 0x1fe0
 800066a:	331f      	adds	r3, #31
 800066c:	ee07 3a90 	vmov	s15, r3
 8000670:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000674:	4b2f      	ldr	r3, [pc, #188]	@ (8000734 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000676:	edd3 7a00 	vldr	s15, [r3]
 800067a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800067e:	eef1 7a67 	vneg.f32	s15, s15
 8000682:	4b30      	ldr	r3, [pc, #192]	@ (8000744 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000684:	edc3 7a00 	vstr	s15, [r3]
 8000688:	e013      	b.n	80006b2 <HAL_TIM_PeriodElapsedCallback+0x102>
		else sa_angle = angle - p_angle;
 800068a:	4b2b      	ldr	r3, [pc, #172]	@ (8000738 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800068c:	881b      	ldrh	r3, [r3, #0]
 800068e:	b29b      	uxth	r3, r3
 8000690:	ee07 3a90 	vmov	s15, r3
 8000694:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000698:	4b26      	ldr	r3, [pc, #152]	@ (8000734 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800069a:	edd3 7a00 	vldr	s15, [r3]
 800069e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006a2:	4b28      	ldr	r3, [pc, #160]	@ (8000744 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80006a4:	edc3 7a00 	vstr	s15, [r3]
 80006a8:	e003      	b.n	80006b2 <HAL_TIM_PeriodElapsedCallback+0x102>
	}else{
		sa_angle = 0;
 80006aa:	4b26      	ldr	r3, [pc, #152]	@ (8000744 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80006ac:	f04f 0200 	mov.w	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
	}
	ac_l = ac_l + (sa_angle / 8191);
 80006b2:	4b24      	ldr	r3, [pc, #144]	@ (8000744 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80006b4:	edd3 7a00 	vldr	s15, [r3]
 80006b8:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8000740 <HAL_TIM_PeriodElapsedCallback+0x190>
 80006bc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80006c0:	4b21      	ldr	r3, [pc, #132]	@ (8000748 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80006c2:	edd3 7a00 	vldr	s15, [r3]
 80006c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000748 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80006cc:	edc3 7a00 	vstr	s15, [r3]
	hensa = purpose - ac_l;
 80006d0:	4b1e      	ldr	r3, [pc, #120]	@ (800074c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80006d2:	ed93 7a00 	vldr	s14, [r3]
 80006d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000748 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80006d8:	edd3 7a00 	vldr	s15, [r3]
 80006dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000750 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80006e2:	edc3 7a00 	vstr	s15, [r3]
	d = sa_angle / 8191;
 80006e6:	4b17      	ldr	r3, [pc, #92]	@ (8000744 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80006e8:	ed93 7a00 	vldr	s14, [r3]
 80006ec:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8000740 <HAL_TIM_PeriodElapsedCallback+0x190>
 80006f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006f4:	4b17      	ldr	r3, [pc, #92]	@ (8000754 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80006f6:	edc3 7a00 	vstr	s15, [r3]
	ind = ind + hensa;
 80006fa:	4b17      	ldr	r3, [pc, #92]	@ (8000758 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80006fc:	ed93 7a00 	vldr	s14, [r3]
 8000700:	4b13      	ldr	r3, [pc, #76]	@ (8000750 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000702:	edd3 7a00 	vldr	s15, [r3]
 8000706:	ee77 7a27 	vadd.f32	s15, s14, s15
 800070a:	4b13      	ldr	r3, [pc, #76]	@ (8000758 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800070c:	edc3 7a00 	vstr	s15, [r3]


	p_rpm = rpm;
 8000710:	4b07      	ldr	r3, [pc, #28]	@ (8000730 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000712:	881b      	ldrh	r3, [r3, #0]
 8000714:	b21b      	sxth	r3, r3
 8000716:	ee07 3a90 	vmov	s15, r3
 800071a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800071e:	4b0f      	ldr	r3, [pc, #60]	@ (800075c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000720:	edc3 7a00 	vstr	s15, [r3]
	//p_angle = angle - 8000;

}
 8000724:	bf00      	nop
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr
 8000730:	20000238 	.word	0x20000238
 8000734:	20000250 	.word	0x20000250
 8000738:	20000234 	.word	0x20000234
 800073c:	457ff000 	.word	0x457ff000
 8000740:	45fff800 	.word	0x45fff800
 8000744:	2000024c 	.word	0x2000024c
 8000748:	2000023c 	.word	0x2000023c
 800074c:	20000000 	.word	0x20000000
 8000750:	20000254 	.word	0x20000254
 8000754:	20000248 	.word	0x20000248
 8000758:	20000240 	.word	0x20000240
 800075c:	20000244 	.word	0x20000244

08000760 <HAL_FDCAN_RxFifo0Callback>:


void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	6039      	str	r1, [r7, #0]
	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	2b00      	cmp	r3, #0
 8000772:	d035      	beq.n	80007e0 <HAL_FDCAN_RxFifo0Callback+0x80>

	        /* Retrieve Rx messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(&hfdcan3, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8000774:	4b1c      	ldr	r3, [pc, #112]	@ (80007e8 <HAL_FDCAN_RxFifo0Callback+0x88>)
 8000776:	4a1d      	ldr	r2, [pc, #116]	@ (80007ec <HAL_FDCAN_RxFifo0Callback+0x8c>)
 8000778:	2140      	movs	r1, #64	@ 0x40
 800077a:	481d      	ldr	r0, [pc, #116]	@ (80007f0 <HAL_FDCAN_RxFifo0Callback+0x90>)
 800077c:	f001 f9b4 	bl	8001ae8 <HAL_FDCAN_GetRxMessage>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d004      	beq.n	8000790 <HAL_FDCAN_RxFifo0Callback+0x30>
			printf("fdcan_getrxmessage is error\r\n");
 8000786:	481b      	ldr	r0, [pc, #108]	@ (80007f4 <HAL_FDCAN_RxFifo0Callback+0x94>)
 8000788:	f004 ff7e 	bl	8005688 <puts>
			Error_Handler();
 800078c:	f000 fabc 	bl	8000d08 <Error_Handler>
		}

		if (RxHeader.Identifier == (0x200 + motor_ID)) {
 8000790:	4b16      	ldr	r3, [pc, #88]	@ (80007ec <HAL_FDCAN_RxFifo0Callback+0x8c>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f240 2201 	movw	r2, #513	@ 0x201
 8000798:	4293      	cmp	r3, r2
 800079a:	d121      	bne.n	80007e0 <HAL_FDCAN_RxFifo0Callback+0x80>
			angle= (RxData[0] << 8) | RxData[1];
 800079c:	4b12      	ldr	r3, [pc, #72]	@ (80007e8 <HAL_FDCAN_RxFifo0Callback+0x88>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	021b      	lsls	r3, r3, #8
 80007a2:	b21a      	sxth	r2, r3
 80007a4:	4b10      	ldr	r3, [pc, #64]	@ (80007e8 <HAL_FDCAN_RxFifo0Callback+0x88>)
 80007a6:	785b      	ldrb	r3, [r3, #1]
 80007a8:	b21b      	sxth	r3, r3
 80007aa:	4313      	orrs	r3, r2
 80007ac:	b21b      	sxth	r3, r3
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	4b11      	ldr	r3, [pc, #68]	@ (80007f8 <HAL_FDCAN_RxFifo0Callback+0x98>)
 80007b2:	801a      	strh	r2, [r3, #0]
			rpm = (int16_t)((RxData[2] << 8) | RxData[3]);
 80007b4:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <HAL_FDCAN_RxFifo0Callback+0x88>)
 80007b6:	789b      	ldrb	r3, [r3, #2]
 80007b8:	021b      	lsls	r3, r3, #8
 80007ba:	b21a      	sxth	r2, r3
 80007bc:	4b0a      	ldr	r3, [pc, #40]	@ (80007e8 <HAL_FDCAN_RxFifo0Callback+0x88>)
 80007be:	78db      	ldrb	r3, [r3, #3]
 80007c0:	b21b      	sxth	r3, r3
 80007c2:	4313      	orrs	r3, r2
 80007c4:	b21a      	sxth	r2, r3
 80007c6:	4b0d      	ldr	r3, [pc, #52]	@ (80007fc <HAL_FDCAN_RxFifo0Callback+0x9c>)
 80007c8:	801a      	strh	r2, [r3, #0]
			current = (int16_t)((RxData[4] << 8) | RxData[5]);
 80007ca:	4b07      	ldr	r3, [pc, #28]	@ (80007e8 <HAL_FDCAN_RxFifo0Callback+0x88>)
 80007cc:	791b      	ldrb	r3, [r3, #4]
 80007ce:	021b      	lsls	r3, r3, #8
 80007d0:	b21a      	sxth	r2, r3
 80007d2:	4b05      	ldr	r3, [pc, #20]	@ (80007e8 <HAL_FDCAN_RxFifo0Callback+0x88>)
 80007d4:	795b      	ldrb	r3, [r3, #5]
 80007d6:	b21b      	sxth	r3, r3
 80007d8:	4313      	orrs	r3, r2
 80007da:	b21a      	sxth	r2, r3
 80007dc:	4b08      	ldr	r3, [pc, #32]	@ (8000800 <HAL_FDCAN_RxFifo0Callback+0xa0>)
 80007de:	801a      	strh	r2, [r3, #0]
			//printf("%d\n\r", rpm);
		}
	}

}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	2000022c 	.word	0x2000022c
 80007ec:	200001fc 	.word	0x200001fc
 80007f0:	20000094 	.word	0x20000094
 80007f4:	080064f0 	.word	0x080064f0
 80007f8:	20000234 	.word	0x20000234
 80007fc:	20000238 	.word	0x20000238
 8000800:	20000236 	.word	0x20000236

08000804 <_write>:

int _write(int file, char *ptr, int len)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	b29a      	uxth	r2, r3
 8000814:	230a      	movs	r3, #10
 8000816:	68b9      	ldr	r1, [r7, #8]
 8000818:	4803      	ldr	r0, [pc, #12]	@ (8000828 <_write+0x24>)
 800081a:	f003 fbbb 	bl	8003f94 <HAL_UART_Transmit>
    return len;
 800081e:	687b      	ldr	r3, [r7, #4]
}
 8000820:	4618      	mov	r0, r3
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000144 	.word	0x20000144

0800082c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08a      	sub	sp, #40	@ 0x28
 8000830:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL);
 8000832:	4b76      	ldr	r3, [pc, #472]	@ (8000a0c <main+0x1e0>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	689b      	ldr	r3, [r3, #8]
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f004 ff2c 	bl	8005698 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000840:	f000 fc9d 	bl	800117e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000844:	f000 f90c 	bl	8000a60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000848:	f000 fa20 	bl	8000c8c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800084c:	f000 f9d0 	bl	8000bf0 <MX_USART2_UART_Init>
  MX_FDCAN3_Init();
 8000850:	f000 f952 	bl	8000af8 <MX_FDCAN3_Init>
  MX_TIM6_Init();
 8000854:	f000 f996 	bl	8000b84 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  printf("start");
 8000858:	486d      	ldr	r0, [pc, #436]	@ (8000a10 <main+0x1e4>)
 800085a:	f004 fead 	bl	80055b8 <iprintf>
  TxHeader.Identifier = 0x000;
 800085e:	4b6d      	ldr	r3, [pc, #436]	@ (8000a14 <main+0x1e8>)
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000864:	4b6b      	ldr	r3, [pc, #428]	@ (8000a14 <main+0x1e8>)
 8000866:	2200      	movs	r2, #0
 8000868:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800086a:	4b6a      	ldr	r3, [pc, #424]	@ (8000a14 <main+0x1e8>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000870:	4b68      	ldr	r3, [pc, #416]	@ (8000a14 <main+0x1e8>)
 8000872:	2208      	movs	r2, #8
 8000874:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000876:	4b67      	ldr	r3, [pc, #412]	@ (8000a14 <main+0x1e8>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800087c:	4b65      	ldr	r3, [pc, #404]	@ (8000a14 <main+0x1e8>)
 800087e:	2200      	movs	r2, #0
 8000880:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000882:	4b64      	ldr	r3, [pc, #400]	@ (8000a14 <main+0x1e8>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000888:	4b62      	ldr	r3, [pc, #392]	@ (8000a14 <main+0x1e8>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 800088e:	4b61      	ldr	r3, [pc, #388]	@ (8000a14 <main+0x1e8>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]

  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000894:	2300      	movs	r3, #0
 8000896:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterIndex = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 800089c:	2300      	movs	r3, #0
 800089e:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80008a0:	2301      	movs	r3, #1
 80008a2:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID1 = 0x200;
 80008a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008a8:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterID2 = 0x209;
 80008aa:	f240 2309 	movw	r3, #521	@ 0x209
 80008ae:	61bb      	str	r3, [r7, #24]

  if (HAL_FDCAN_ConfigFilter(&hfdcan3, &sFilterConfig) != HAL_OK) {
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	4619      	mov	r1, r3
 80008b4:	4858      	ldr	r0, [pc, #352]	@ (8000a18 <main+0x1ec>)
 80008b6:	f001 f81f 	bl	80018f8 <HAL_FDCAN_ConfigFilter>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d004      	beq.n	80008ca <main+0x9e>
	  printf("fdcan_configfilter is error\r\n");
 80008c0:	4856      	ldr	r0, [pc, #344]	@ (8000a1c <main+0x1f0>)
 80008c2:	f004 fee1 	bl	8005688 <puts>
      Error_Handler();
 80008c6:	f000 fa1f 	bl	8000d08 <Error_Handler>
  }

  if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan3, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK) {
 80008ca:	2300      	movs	r3, #0
 80008cc:	9300      	str	r3, [sp, #0]
 80008ce:	2300      	movs	r3, #0
 80008d0:	2202      	movs	r2, #2
 80008d2:	2102      	movs	r1, #2
 80008d4:	4850      	ldr	r0, [pc, #320]	@ (8000a18 <main+0x1ec>)
 80008d6:	f001 f869 	bl	80019ac <HAL_FDCAN_ConfigGlobalFilter>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d004      	beq.n	80008ea <main+0xbe>
	  printf("fdcan_configglobalfilter is error\r\n");
 80008e0:	484f      	ldr	r0, [pc, #316]	@ (8000a20 <main+0x1f4>)
 80008e2:	f004 fed1 	bl	8005688 <puts>
      Error_Handler();
 80008e6:	f000 fa0f 	bl	8000d08 <Error_Handler>
  }

  if (HAL_FDCAN_Start(&hfdcan3) != HAL_OK) {
 80008ea:	484b      	ldr	r0, [pc, #300]	@ (8000a18 <main+0x1ec>)
 80008ec:	f001 f88f 	bl	8001a0e <HAL_FDCAN_Start>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d004      	beq.n	8000900 <main+0xd4>
	  printf("fdcan_start is error\r\n");
 80008f6:	484b      	ldr	r0, [pc, #300]	@ (8000a24 <main+0x1f8>)
 80008f8:	f004 fec6 	bl	8005688 <puts>
      Error_Handler();
 80008fc:	f000 fa04 	bl	8000d08 <Error_Handler>
  }

  if (HAL_FDCAN_ActivateNotification(&hfdcan3, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK){
 8000900:	2200      	movs	r2, #0
 8000902:	2101      	movs	r1, #1
 8000904:	4844      	ldr	r0, [pc, #272]	@ (8000a18 <main+0x1ec>)
 8000906:	f001 f9f7 	bl	8001cf8 <HAL_FDCAN_ActivateNotification>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d004      	beq.n	800091a <main+0xee>
	  printf("fdcan_activatenotification is error\r\n");
 8000910:	4845      	ldr	r0, [pc, #276]	@ (8000a28 <main+0x1fc>)
 8000912:	f004 feb9 	bl	8005688 <puts>
	  Error_Handler();
 8000916:	f000 f9f7 	bl	8000d08 <Error_Handler>
  }

  printf("can_start");
 800091a:	4844      	ldr	r0, [pc, #272]	@ (8000a2c <main+0x200>)
 800091c:	f004 fe4c 	bl	80055b8 <iprintf>

  HAL_TIM_Base_Start_IT(&htim6);
 8000920:	4843      	ldr	r0, [pc, #268]	@ (8000a30 <main+0x204>)
 8000922:	f002 ff67 	bl	80037f4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   TxHeader.Identifier = 0x200;
 8000926:	4b3b      	ldr	r3, [pc, #236]	@ (8000a14 <main+0x1e8>)
 8000928:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800092c:	601a      	str	r2, [r3, #0]

  while (1)
  {

	  float cu_f = k_p * hensa + k_i * ind + k_d * d;
 800092e:	4b41      	ldr	r3, [pc, #260]	@ (8000a34 <main+0x208>)
 8000930:	ed93 7a00 	vldr	s14, [r3]
 8000934:	4b40      	ldr	r3, [pc, #256]	@ (8000a38 <main+0x20c>)
 8000936:	edd3 7a00 	vldr	s15, [r3]
 800093a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800093e:	4b3f      	ldr	r3, [pc, #252]	@ (8000a3c <main+0x210>)
 8000940:	edd3 6a00 	vldr	s13, [r3]
 8000944:	4b3e      	ldr	r3, [pc, #248]	@ (8000a40 <main+0x214>)
 8000946:	edd3 7a00 	vldr	s15, [r3]
 800094a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800094e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000952:	4b3c      	ldr	r3, [pc, #240]	@ (8000a44 <main+0x218>)
 8000954:	edd3 6a00 	vldr	s13, [r3]
 8000958:	4b3b      	ldr	r3, [pc, #236]	@ (8000a48 <main+0x21c>)
 800095a:	edd3 7a00 	vldr	s15, [r3]
 800095e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000962:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000966:	edc7 7a07 	vstr	s15, [r7, #28]
	  cu = cu_f;
 800096a:	edd7 7a07 	vldr	s15, [r7, #28]
 800096e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000972:	ee17 3a90 	vmov	r3, s15
 8000976:	b21a      	sxth	r2, r3
 8000978:	4b34      	ldr	r3, [pc, #208]	@ (8000a4c <main+0x220>)
 800097a:	801a      	strh	r2, [r3, #0]
	  //if (cu_f >= 2000) cu = 2000;
	  //else if (cu_f <= -2000) cu = -2000;
	  //else cu = cu_f;


	  TxData[0] = cu >> 8;
 800097c:	4b33      	ldr	r3, [pc, #204]	@ (8000a4c <main+0x220>)
 800097e:	881b      	ldrh	r3, [r3, #0]
 8000980:	b21b      	sxth	r3, r3
 8000982:	121b      	asrs	r3, r3, #8
 8000984:	b21b      	sxth	r3, r3
 8000986:	b2da      	uxtb	r2, r3
 8000988:	4b31      	ldr	r3, [pc, #196]	@ (8000a50 <main+0x224>)
 800098a:	701a      	strb	r2, [r3, #0]
	  TxData[1] = (uint8_t)(cu & 0xff);
 800098c:	4b2f      	ldr	r3, [pc, #188]	@ (8000a4c <main+0x220>)
 800098e:	881b      	ldrh	r3, [r3, #0]
 8000990:	b21b      	sxth	r3, r3
 8000992:	b2da      	uxtb	r2, r3
 8000994:	4b2e      	ldr	r3, [pc, #184]	@ (8000a50 <main+0x224>)
 8000996:	705a      	strb	r2, [r3, #1]
	  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan3, &TxHeader, TxData) != HAL_OK){
 8000998:	4a2d      	ldr	r2, [pc, #180]	@ (8000a50 <main+0x224>)
 800099a:	491e      	ldr	r1, [pc, #120]	@ (8000a14 <main+0x1e8>)
 800099c:	481e      	ldr	r0, [pc, #120]	@ (8000a18 <main+0x1ec>)
 800099e:	f001 f85e 	bl	8001a5e <HAL_FDCAN_AddMessageToTxFifoQ>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <main+0x180>
		  Error_Handler();
 80009a8:	f000 f9ae 	bl	8000d08 <Error_Handler>
	  }
	  printf("pupose:%d,hensa:%d,cu:%d,x:%d,ind:%d\r\n", (int)purpose, (int)(purpose-ac_l), (int)cu, (int)ac_l, (int)ind);
 80009ac:	4b29      	ldr	r3, [pc, #164]	@ (8000a54 <main+0x228>)
 80009ae:	edd3 7a00 	vldr	s15, [r3]
 80009b2:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80009b6:	4b27      	ldr	r3, [pc, #156]	@ (8000a54 <main+0x228>)
 80009b8:	ed93 7a00 	vldr	s14, [r3]
 80009bc:	4b26      	ldr	r3, [pc, #152]	@ (8000a58 <main+0x22c>)
 80009be:	edd3 7a00 	vldr	s15, [r3]
 80009c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009c6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80009ca:	4b20      	ldr	r3, [pc, #128]	@ (8000a4c <main+0x220>)
 80009cc:	881b      	ldrh	r3, [r3, #0]
 80009ce:	b21b      	sxth	r3, r3
 80009d0:	461a      	mov	r2, r3
 80009d2:	4b21      	ldr	r3, [pc, #132]	@ (8000a58 <main+0x22c>)
 80009d4:	edd3 7a00 	vldr	s15, [r3]
 80009d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009dc:	ee17 1a90 	vmov	r1, s15
 80009e0:	4b17      	ldr	r3, [pc, #92]	@ (8000a40 <main+0x214>)
 80009e2:	edd3 7a00 	vldr	s15, [r3]
 80009e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009ea:	ee17 3a90 	vmov	r3, s15
 80009ee:	9301      	str	r3, [sp, #4]
 80009f0:	9100      	str	r1, [sp, #0]
 80009f2:	4613      	mov	r3, r2
 80009f4:	ee17 2a10 	vmov	r2, s14
 80009f8:	ee16 1a90 	vmov	r1, s13
 80009fc:	4817      	ldr	r0, [pc, #92]	@ (8000a5c <main+0x230>)
 80009fe:	f004 fddb 	bl	80055b8 <iprintf>
	  HAL_Delay(1);
 8000a02:	2001      	movs	r0, #1
 8000a04:	f000 fc2c 	bl	8001260 <HAL_Delay>
  {
 8000a08:	e791      	b.n	800092e <main+0x102>
 8000a0a:	bf00      	nop
 8000a0c:	20000028 	.word	0x20000028
 8000a10:	08006510 	.word	0x08006510
 8000a14:	200001d8 	.word	0x200001d8
 8000a18:	20000094 	.word	0x20000094
 8000a1c:	08006518 	.word	0x08006518
 8000a20:	08006538 	.word	0x08006538
 8000a24:	0800655c 	.word	0x0800655c
 8000a28:	08006574 	.word	0x08006574
 8000a2c:	0800659c 	.word	0x0800659c
 8000a30:	200000f8 	.word	0x200000f8
 8000a34:	20000004 	.word	0x20000004
 8000a38:	20000254 	.word	0x20000254
 8000a3c:	20000008 	.word	0x20000008
 8000a40:	20000240 	.word	0x20000240
 8000a44:	2000000c 	.word	0x2000000c
 8000a48:	20000248 	.word	0x20000248
 8000a4c:	2000023a 	.word	0x2000023a
 8000a50:	20000224 	.word	0x20000224
 8000a54:	20000000 	.word	0x20000000
 8000a58:	2000023c 	.word	0x2000023c
 8000a5c:	080065a8 	.word	0x080065a8

08000a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b094      	sub	sp, #80	@ 0x50
 8000a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a66:	f107 0318 	add.w	r3, r7, #24
 8000a6a:	2238      	movs	r2, #56	@ 0x38
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f004 ffa6 	bl	80059c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a82:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a86:	f001 fe2d 	bl	80026e4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a92:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a94:	2340      	movs	r3, #64	@ 0x40
 8000a96:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000aa4:	230a      	movs	r3, #10
 8000aa6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000aac:	2302      	movs	r3, #2
 8000aae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab4:	f107 0318 	add.w	r3, r7, #24
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f001 fec7 	bl	800284c <HAL_RCC_OscConfig>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000ac4:	f000 f920 	bl	8000d08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac8:	230f      	movs	r3, #15
 8000aca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000acc:	2303      	movs	r3, #3
 8000ace:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	2102      	movs	r1, #2
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f002 f9c5 	bl	8002e70 <HAL_RCC_ClockConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000aec:	f000 f90c 	bl	8000d08 <Error_Handler>
  }
}
 8000af0:	bf00      	nop
 8000af2:	3750      	adds	r7, #80	@ 0x50
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8000afc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b7c <MX_FDCAN3_Init+0x84>)
 8000afe:	4a20      	ldr	r2, [pc, #128]	@ (8000b80 <MX_FDCAN3_Init+0x88>)
 8000b00:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000b02:	4b1e      	ldr	r3, [pc, #120]	@ (8000b7c <MX_FDCAN3_Init+0x84>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	605a      	str	r2, [r3, #4]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000b08:	4b1c      	ldr	r3, [pc, #112]	@ (8000b7c <MX_FDCAN3_Init+0x84>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8000b0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000b7c <MX_FDCAN3_Init+0x84>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8000b14:	4b19      	ldr	r3, [pc, #100]	@ (8000b7c <MX_FDCAN3_Init+0x84>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8000b1a:	4b18      	ldr	r3, [pc, #96]	@ (8000b7c <MX_FDCAN3_Init+0x84>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8000b20:	4b16      	ldr	r3, [pc, #88]	@ (8000b7c <MX_FDCAN3_Init+0x84>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 4;
 8000b26:	4b15      	ldr	r3, [pc, #84]	@ (8000b7c <MX_FDCAN3_Init+0x84>)
 8000b28:	2204      	movs	r2, #4
 8000b2a:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8000b2c:	4b13      	ldr	r3, [pc, #76]	@ (8000b7c <MX_FDCAN3_Init+0x84>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 15;
 8000b32:	4b12      	ldr	r3, [pc, #72]	@ (8000b7c <MX_FDCAN3_Init+0x84>)
 8000b34:	220f      	movs	r2, #15
 8000b36:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 4;
 8000b38:	4b10      	ldr	r3, [pc, #64]	@ (8000b7c <MX_FDCAN3_Init+0x84>)
 8000b3a:	2204      	movs	r2, #4
 8000b3c:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8000b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b7c <MX_FDCAN3_Init+0x84>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8000b44:	4b0d      	ldr	r3, [pc, #52]	@ (8000b7c <MX_FDCAN3_Init+0x84>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b7c <MX_FDCAN3_Init+0x84>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8000b50:	4b0a      	ldr	r3, [pc, #40]	@ (8000b7c <MX_FDCAN3_Init+0x84>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan3.Init.StdFiltersNbr = 1;
 8000b56:	4b09      	ldr	r3, [pc, #36]	@ (8000b7c <MX_FDCAN3_Init+0x84>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan3.Init.ExtFiltersNbr = 0;
 8000b5c:	4b07      	ldr	r3, [pc, #28]	@ (8000b7c <MX_FDCAN3_Init+0x84>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000b62:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <MX_FDCAN3_Init+0x84>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8000b68:	4804      	ldr	r0, [pc, #16]	@ (8000b7c <MX_FDCAN3_Init+0x84>)
 8000b6a:	f000 fd6b 	bl	8001644 <HAL_FDCAN_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_FDCAN3_Init+0x80>
  {
    Error_Handler();
 8000b74:	f000 f8c8 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000094 	.word	0x20000094
 8000b80:	40006c00 	.word	0x40006c00

08000b84 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b94:	4b14      	ldr	r3, [pc, #80]	@ (8000be8 <MX_TIM6_Init+0x64>)
 8000b96:	4a15      	ldr	r2, [pc, #84]	@ (8000bec <MX_TIM6_Init+0x68>)
 8000b98:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9;
 8000b9a:	4b13      	ldr	r3, [pc, #76]	@ (8000be8 <MX_TIM6_Init+0x64>)
 8000b9c:	2209      	movs	r2, #9
 8000b9e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba0:	4b11      	ldr	r3, [pc, #68]	@ (8000be8 <MX_TIM6_Init+0x64>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7999;
 8000ba6:	4b10      	ldr	r3, [pc, #64]	@ (8000be8 <MX_TIM6_Init+0x64>)
 8000ba8:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000bac:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	@ (8000be8 <MX_TIM6_Init+0x64>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000bb4:	480c      	ldr	r0, [pc, #48]	@ (8000be8 <MX_TIM6_Init+0x64>)
 8000bb6:	f002 fdc5 	bl	8003744 <HAL_TIM_Base_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000bc0:	f000 f8a2 	bl	8000d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4805      	ldr	r0, [pc, #20]	@ (8000be8 <MX_TIM6_Init+0x64>)
 8000bd2:	f003 f8b3 	bl	8003d3c <HAL_TIMEx_MasterConfigSynchronization>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000bdc:	f000 f894 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000be0:	bf00      	nop
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	200000f8 	.word	0x200000f8
 8000bec:	40001000 	.word	0x40001000

08000bf0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bf4:	4b22      	ldr	r3, [pc, #136]	@ (8000c80 <MX_USART2_UART_Init+0x90>)
 8000bf6:	4a23      	ldr	r2, [pc, #140]	@ (8000c84 <MX_USART2_UART_Init+0x94>)
 8000bf8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8000bfa:	4b21      	ldr	r3, [pc, #132]	@ (8000c80 <MX_USART2_UART_Init+0x90>)
 8000bfc:	4a22      	ldr	r2, [pc, #136]	@ (8000c88 <MX_USART2_UART_Init+0x98>)
 8000bfe:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c00:	4b1f      	ldr	r3, [pc, #124]	@ (8000c80 <MX_USART2_UART_Init+0x90>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c06:	4b1e      	ldr	r3, [pc, #120]	@ (8000c80 <MX_USART2_UART_Init+0x90>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c0c:	4b1c      	ldr	r3, [pc, #112]	@ (8000c80 <MX_USART2_UART_Init+0x90>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c12:	4b1b      	ldr	r3, [pc, #108]	@ (8000c80 <MX_USART2_UART_Init+0x90>)
 8000c14:	220c      	movs	r2, #12
 8000c16:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c18:	4b19      	ldr	r3, [pc, #100]	@ (8000c80 <MX_USART2_UART_Init+0x90>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c1e:	4b18      	ldr	r3, [pc, #96]	@ (8000c80 <MX_USART2_UART_Init+0x90>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c24:	4b16      	ldr	r3, [pc, #88]	@ (8000c80 <MX_USART2_UART_Init+0x90>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c2a:	4b15      	ldr	r3, [pc, #84]	@ (8000c80 <MX_USART2_UART_Init+0x90>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c30:	4b13      	ldr	r3, [pc, #76]	@ (8000c80 <MX_USART2_UART_Init+0x90>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c36:	4812      	ldr	r0, [pc, #72]	@ (8000c80 <MX_USART2_UART_Init+0x90>)
 8000c38:	f003 f95c 	bl	8003ef4 <HAL_UART_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8000c42:	f000 f861 	bl	8000d08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c46:	2100      	movs	r1, #0
 8000c48:	480d      	ldr	r0, [pc, #52]	@ (8000c80 <MX_USART2_UART_Init+0x90>)
 8000c4a:	f004 fb28 	bl	800529e <HAL_UARTEx_SetTxFifoThreshold>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8000c54:	f000 f858 	bl	8000d08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4809      	ldr	r0, [pc, #36]	@ (8000c80 <MX_USART2_UART_Init+0x90>)
 8000c5c:	f004 fb5d 	bl	800531a <HAL_UARTEx_SetRxFifoThreshold>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 8000c66:	f000 f84f 	bl	8000d08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c6a:	4805      	ldr	r0, [pc, #20]	@ (8000c80 <MX_USART2_UART_Init+0x90>)
 8000c6c:	f004 fade 	bl	800522c <HAL_UARTEx_DisableFifoMode>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 8000c76:	f000 f847 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000144 	.word	0x20000144
 8000c84:	40004400 	.word	0x40004400
 8000c88:	000f4240 	.word	0x000f4240

08000c8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b088      	sub	sp, #32
 8000c90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c92:	f107 030c 	add.w	r3, r7, #12
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
 8000ca0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca2:	4b17      	ldr	r3, [pc, #92]	@ (8000d00 <MX_GPIO_Init+0x74>)
 8000ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ca6:	4a16      	ldr	r2, [pc, #88]	@ (8000d00 <MX_GPIO_Init+0x74>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cae:	4b14      	ldr	r3, [pc, #80]	@ (8000d00 <MX_GPIO_Init+0x74>)
 8000cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cba:	4b11      	ldr	r3, [pc, #68]	@ (8000d00 <MX_GPIO_Init+0x74>)
 8000cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cbe:	4a10      	ldr	r2, [pc, #64]	@ (8000d00 <MX_GPIO_Init+0x74>)
 8000cc0:	f043 0302 	orr.w	r3, r3, #2
 8000cc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d00 <MX_GPIO_Init+0x74>)
 8000cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cca:	f003 0302 	and.w	r3, r3, #2
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2140      	movs	r1, #64	@ 0x40
 8000cd6:	480b      	ldr	r0, [pc, #44]	@ (8000d04 <MX_GPIO_Init+0x78>)
 8000cd8:	f001 fcec 	bl	80026b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cdc:	2340      	movs	r3, #64	@ 0x40
 8000cde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cec:	f107 030c 	add.w	r3, r7, #12
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4804      	ldr	r0, [pc, #16]	@ (8000d04 <MX_GPIO_Init+0x78>)
 8000cf4:	f001 fb5c 	bl	80023b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cf8:	bf00      	nop
 8000cfa:	3720      	adds	r7, #32
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40021000 	.word	0x40021000
 8000d04:	48000400 	.word	0x48000400

08000d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	printf("error\r\n");
 8000d0c:	4803      	ldr	r0, [pc, #12]	@ (8000d1c <Error_Handler+0x14>)
 8000d0e:	f004 fcbb 	bl	8005688 <puts>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d12:	b672      	cpsid	i
}
 8000d14:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d16:	bf00      	nop
 8000d18:	e7fd      	b.n	8000d16 <Error_Handler+0xe>
 8000d1a:	bf00      	nop
 8000d1c:	080065d0 	.word	0x080065d0

08000d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d26:	4b0f      	ldr	r3, [pc, #60]	@ (8000d64 <HAL_MspInit+0x44>)
 8000d28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d2a:	4a0e      	ldr	r2, [pc, #56]	@ (8000d64 <HAL_MspInit+0x44>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d32:	4b0c      	ldr	r3, [pc, #48]	@ (8000d64 <HAL_MspInit+0x44>)
 8000d34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3e:	4b09      	ldr	r3, [pc, #36]	@ (8000d64 <HAL_MspInit+0x44>)
 8000d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d42:	4a08      	ldr	r2, [pc, #32]	@ (8000d64 <HAL_MspInit+0x44>)
 8000d44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d48:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d4a:	4b06      	ldr	r3, [pc, #24]	@ (8000d64 <HAL_MspInit+0x44>)
 8000d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d56:	f001 fd69 	bl	800282c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40021000 	.word	0x40021000

08000d68 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b09e      	sub	sp, #120	@ 0x78
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d80:	f107 0310 	add.w	r3, r7, #16
 8000d84:	2254      	movs	r2, #84	@ 0x54
 8000d86:	2100      	movs	r1, #0
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f004 fe19 	bl	80059c0 <memset>
  if(hfdcan->Instance==FDCAN3)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a27      	ldr	r2, [pc, #156]	@ (8000e30 <HAL_FDCAN_MspInit+0xc8>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d147      	bne.n	8000e28 <HAL_FDCAN_MspInit+0xc0>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000d98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d9c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000d9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000da2:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000da4:	f107 0310 	add.w	r3, r7, #16
 8000da8:	4618      	mov	r0, r3
 8000daa:	f002 fa7d 	bl	80032a8 <HAL_RCCEx_PeriphCLKConfig>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000db4:	f7ff ffa8 	bl	8000d08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000db8:	4b1e      	ldr	r3, [pc, #120]	@ (8000e34 <HAL_FDCAN_MspInit+0xcc>)
 8000dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dbc:	4a1d      	ldr	r2, [pc, #116]	@ (8000e34 <HAL_FDCAN_MspInit+0xcc>)
 8000dbe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000dc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dc4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e34 <HAL_FDCAN_MspInit+0xcc>)
 8000dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd0:	4b18      	ldr	r3, [pc, #96]	@ (8000e34 <HAL_FDCAN_MspInit+0xcc>)
 8000dd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd4:	4a17      	ldr	r2, [pc, #92]	@ (8000e34 <HAL_FDCAN_MspInit+0xcc>)
 8000dd6:	f043 0302 	orr.w	r3, r3, #2
 8000dda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ddc:	4b15      	ldr	r3, [pc, #84]	@ (8000e34 <HAL_FDCAN_MspInit+0xcc>)
 8000dde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de0:	f003 0302 	and.w	r3, r3, #2
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PB3     ------> FDCAN3_RX
    PB4     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000de8:	2318      	movs	r3, #24
 8000dea:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	2302      	movs	r3, #2
 8000dee:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df4:	2300      	movs	r3, #0
 8000df6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF11_FDCAN3;
 8000df8:	230b      	movs	r3, #11
 8000dfa:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e00:	4619      	mov	r1, r3
 8000e02:	480d      	ldr	r0, [pc, #52]	@ (8000e38 <HAL_FDCAN_MspInit+0xd0>)
 8000e04:	f001 fad4 	bl	80023b0 <HAL_GPIO_Init>

    /* FDCAN3 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN3_IT0_IRQn, 0, 0);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	2058      	movs	r0, #88	@ 0x58
 8000e0e:	f000 fb24 	bl	800145a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
 8000e12:	2058      	movs	r0, #88	@ 0x58
 8000e14:	f000 fb3b 	bl	800148e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN3_IT1_IRQn, 0, 0);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	2059      	movs	r0, #89	@ 0x59
 8000e1e:	f000 fb1c 	bl	800145a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT1_IRQn);
 8000e22:	2059      	movs	r0, #89	@ 0x59
 8000e24:	f000 fb33 	bl	800148e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8000e28:	bf00      	nop
 8000e2a:	3778      	adds	r7, #120	@ 0x78
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40006c00 	.word	0x40006c00
 8000e34:	40021000 	.word	0x40021000
 8000e38:	48000400 	.word	0x48000400

08000e3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a0d      	ldr	r2, [pc, #52]	@ (8000e80 <HAL_TIM_Base_MspInit+0x44>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d113      	bne.n	8000e76 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e84 <HAL_TIM_Base_MspInit+0x48>)
 8000e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e52:	4a0c      	ldr	r2, [pc, #48]	@ (8000e84 <HAL_TIM_Base_MspInit+0x48>)
 8000e54:	f043 0310 	orr.w	r3, r3, #16
 8000e58:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e84 <HAL_TIM_Base_MspInit+0x48>)
 8000e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e5e:	f003 0310 	and.w	r3, r3, #16
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2100      	movs	r1, #0
 8000e6a:	2036      	movs	r0, #54	@ 0x36
 8000e6c:	f000 faf5 	bl	800145a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e70:	2036      	movs	r0, #54	@ 0x36
 8000e72:	f000 fb0c 	bl	800148e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000e76:	bf00      	nop
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40001000 	.word	0x40001000
 8000e84:	40021000 	.word	0x40021000

08000e88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b09e      	sub	sp, #120	@ 0x78
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ea0:	f107 0310 	add.w	r3, r7, #16
 8000ea4:	2254      	movs	r2, #84	@ 0x54
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f004 fd89 	bl	80059c0 <memset>
  if(huart->Instance==USART2)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a23      	ldr	r2, [pc, #140]	@ (8000f40 <HAL_UART_MspInit+0xb8>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d13e      	bne.n	8000f36 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ec0:	f107 0310 	add.w	r3, r7, #16
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f002 f9ef 	bl	80032a8 <HAL_RCCEx_PeriphCLKConfig>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ed0:	f7ff ff1a 	bl	8000d08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f44 <HAL_UART_MspInit+0xbc>)
 8000ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ed8:	4a1a      	ldr	r2, [pc, #104]	@ (8000f44 <HAL_UART_MspInit+0xbc>)
 8000eda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ede:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ee0:	4b18      	ldr	r3, [pc, #96]	@ (8000f44 <HAL_UART_MspInit+0xbc>)
 8000ee2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ee4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eec:	4b15      	ldr	r3, [pc, #84]	@ (8000f44 <HAL_UART_MspInit+0xbc>)
 8000eee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef0:	4a14      	ldr	r2, [pc, #80]	@ (8000f44 <HAL_UART_MspInit+0xbc>)
 8000ef2:	f043 0301 	orr.w	r3, r3, #1
 8000ef6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ef8:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <HAL_UART_MspInit+0xbc>)
 8000efa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f04:	230c      	movs	r3, #12
 8000f06:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	2300      	movs	r3, #0
 8000f12:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f14:	2307      	movs	r3, #7
 8000f16:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f18:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f22:	f001 fa45 	bl	80023b0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2100      	movs	r1, #0
 8000f2a:	2026      	movs	r0, #38	@ 0x26
 8000f2c:	f000 fa95 	bl	800145a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f30:	2026      	movs	r0, #38	@ 0x26
 8000f32:	f000 faac 	bl	800148e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f36:	bf00      	nop
 8000f38:	3778      	adds	r7, #120	@ 0x78
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40004400 	.word	0x40004400
 8000f44:	40021000 	.word	0x40021000

08000f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f4c:	bf00      	nop
 8000f4e:	e7fd      	b.n	8000f4c <NMI_Handler+0x4>

08000f50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f54:	bf00      	nop
 8000f56:	e7fd      	b.n	8000f54 <HardFault_Handler+0x4>

08000f58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <MemManage_Handler+0x4>

08000f60 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f64:	bf00      	nop
 8000f66:	e7fd      	b.n	8000f64 <BusFault_Handler+0x4>

08000f68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <UsageFault_Handler+0x4>

08000f70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f9e:	f000 f941 	bl	8001224 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fac:	4802      	ldr	r0, [pc, #8]	@ (8000fb8 <USART2_IRQHandler+0x10>)
 8000fae:	f003 f87f 	bl	80040b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000144 	.word	0x20000144

08000fbc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000fc0:	4802      	ldr	r0, [pc, #8]	@ (8000fcc <TIM6_DAC_IRQHandler+0x10>)
 8000fc2:	f002 fc8f 	bl	80038e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	200000f8 	.word	0x200000f8

08000fd0 <FDCAN3_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 0.
  */
void FDCAN3_IT0_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 0 */

  /* USER CODE END FDCAN3_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 8000fd4:	4802      	ldr	r0, [pc, #8]	@ (8000fe0 <FDCAN3_IT0_IRQHandler+0x10>)
 8000fd6:	f000 ff75 	bl	8001ec4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 1 */

  /* USER CODE END FDCAN3_IT0_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000094 	.word	0x20000094

08000fe4 <FDCAN3_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 1.
  */
void FDCAN3_IT1_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT1_IRQn 0 */

  /* USER CODE END FDCAN3_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 8000fe8:	4802      	ldr	r0, [pc, #8]	@ (8000ff4 <FDCAN3_IT1_IRQHandler+0x10>)
 8000fea:	f000 ff6b 	bl	8001ec4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT1_IRQn 1 */

  /* USER CODE END FDCAN3_IT1_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000094 	.word	0x20000094

08000ff8 <_read>:
{
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
 8001008:	e00a      	b.n	8001020 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800100a:	f3af 8000 	nop.w
 800100e:	4601      	mov	r1, r0
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	1c5a      	adds	r2, r3, #1
 8001014:	60ba      	str	r2, [r7, #8]
 8001016:	b2ca      	uxtb	r2, r1
 8001018:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	3301      	adds	r3, #1
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	697a      	ldr	r2, [r7, #20]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	429a      	cmp	r2, r3
 8001026:	dbf0      	blt.n	800100a <_read+0x12>
  }

  return len;
 8001028:	687b      	ldr	r3, [r7, #4]
}
 800102a:	4618      	mov	r0, r3
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001032:	b480      	push	{r7}
 8001034:	b083      	sub	sp, #12
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800103a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800103e:	4618      	mov	r0, r3
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800104a:	b480      	push	{r7}
 800104c:	b083      	sub	sp, #12
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
 8001052:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800105a:	605a      	str	r2, [r3, #4]
  return 0;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <_isatty>:

int _isatty(int file)
{
 800106a:	b480      	push	{r7}
 800106c:	b083      	sub	sp, #12
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001072:	2301      	movs	r3, #1
}
 8001074:	4618      	mov	r0, r3
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3714      	adds	r7, #20
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
	...

0800109c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010a4:	4a14      	ldr	r2, [pc, #80]	@ (80010f8 <_sbrk+0x5c>)
 80010a6:	4b15      	ldr	r3, [pc, #84]	@ (80010fc <_sbrk+0x60>)
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010b0:	4b13      	ldr	r3, [pc, #76]	@ (8001100 <_sbrk+0x64>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d102      	bne.n	80010be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010b8:	4b11      	ldr	r3, [pc, #68]	@ (8001100 <_sbrk+0x64>)
 80010ba:	4a12      	ldr	r2, [pc, #72]	@ (8001104 <_sbrk+0x68>)
 80010bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010be:	4b10      	ldr	r3, [pc, #64]	@ (8001100 <_sbrk+0x64>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d207      	bcs.n	80010dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010cc:	f004 fcc6 	bl	8005a5c <__errno>
 80010d0:	4603      	mov	r3, r0
 80010d2:	220c      	movs	r2, #12
 80010d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295
 80010da:	e009      	b.n	80010f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010dc:	4b08      	ldr	r3, [pc, #32]	@ (8001100 <_sbrk+0x64>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010e2:	4b07      	ldr	r3, [pc, #28]	@ (8001100 <_sbrk+0x64>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4413      	add	r3, r2
 80010ea:	4a05      	ldr	r2, [pc, #20]	@ (8001100 <_sbrk+0x64>)
 80010ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ee:	68fb      	ldr	r3, [r7, #12]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3718      	adds	r7, #24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20020000 	.word	0x20020000
 80010fc:	00000400 	.word	0x00000400
 8001100:	20000258 	.word	0x20000258
 8001104:	200003b0 	.word	0x200003b0

08001108 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800110c:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <SystemInit+0x20>)
 800110e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001112:	4a05      	ldr	r2, [pc, #20]	@ (8001128 <SystemInit+0x20>)
 8001114:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001118:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800112c:	480d      	ldr	r0, [pc, #52]	@ (8001164 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800112e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001130:	f7ff ffea 	bl	8001108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001134:	480c      	ldr	r0, [pc, #48]	@ (8001168 <LoopForever+0x6>)
  ldr r1, =_edata
 8001136:	490d      	ldr	r1, [pc, #52]	@ (800116c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001138:	4a0d      	ldr	r2, [pc, #52]	@ (8001170 <LoopForever+0xe>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800113c:	e002      	b.n	8001144 <LoopCopyDataInit>

0800113e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001142:	3304      	adds	r3, #4

08001144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001148:	d3f9      	bcc.n	800113e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114a:	4a0a      	ldr	r2, [pc, #40]	@ (8001174 <LoopForever+0x12>)
  ldr r4, =_ebss
 800114c:	4c0a      	ldr	r4, [pc, #40]	@ (8001178 <LoopForever+0x16>)
  movs r3, #0
 800114e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001150:	e001      	b.n	8001156 <LoopFillZerobss>

08001152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001154:	3204      	adds	r2, #4

08001156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001158:	d3fb      	bcc.n	8001152 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800115a:	f004 fc85 	bl	8005a68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800115e:	f7ff fb65 	bl	800082c <main>

08001162 <LoopForever>:

LoopForever:
    b LoopForever
 8001162:	e7fe      	b.n	8001162 <LoopForever>
  ldr   r0, =_estack
 8001164:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800116c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001170:	0800666c 	.word	0x0800666c
  ldr r2, =_sbss
 8001174:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001178:	200003ac 	.word	0x200003ac

0800117c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800117c:	e7fe      	b.n	800117c <ADC1_2_IRQHandler>

0800117e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001184:	2300      	movs	r3, #0
 8001186:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001188:	2003      	movs	r0, #3
 800118a:	f000 f95b 	bl	8001444 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800118e:	200f      	movs	r0, #15
 8001190:	f000 f80e 	bl	80011b0 <HAL_InitTick>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d002      	beq.n	80011a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	71fb      	strb	r3, [r7, #7]
 800119e:	e001      	b.n	80011a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011a0:	f7ff fdbe 	bl	8000d20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011a4:	79fb      	ldrb	r3, [r7, #7]

}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011b8:	2300      	movs	r3, #0
 80011ba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80011bc:	4b16      	ldr	r3, [pc, #88]	@ (8001218 <HAL_InitTick+0x68>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d022      	beq.n	800120a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80011c4:	4b15      	ldr	r3, [pc, #84]	@ (800121c <HAL_InitTick+0x6c>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4b13      	ldr	r3, [pc, #76]	@ (8001218 <HAL_InitTick+0x68>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80011d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80011d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d8:	4618      	mov	r0, r3
 80011da:	f000 f966 	bl	80014aa <HAL_SYSTICK_Config>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d10f      	bne.n	8001204 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b0f      	cmp	r3, #15
 80011e8:	d809      	bhi.n	80011fe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ea:	2200      	movs	r2, #0
 80011ec:	6879      	ldr	r1, [r7, #4]
 80011ee:	f04f 30ff 	mov.w	r0, #4294967295
 80011f2:	f000 f932 	bl	800145a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001220 <HAL_InitTick+0x70>)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6013      	str	r3, [r2, #0]
 80011fc:	e007      	b.n	800120e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	73fb      	strb	r3, [r7, #15]
 8001202:	e004      	b.n	800120e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	73fb      	strb	r3, [r7, #15]
 8001208:	e001      	b.n	800120e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800120e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000018 	.word	0x20000018
 800121c:	20000010 	.word	0x20000010
 8001220:	20000014 	.word	0x20000014

08001224 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001228:	4b05      	ldr	r3, [pc, #20]	@ (8001240 <HAL_IncTick+0x1c>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b05      	ldr	r3, [pc, #20]	@ (8001244 <HAL_IncTick+0x20>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4413      	add	r3, r2
 8001232:	4a03      	ldr	r2, [pc, #12]	@ (8001240 <HAL_IncTick+0x1c>)
 8001234:	6013      	str	r3, [r2, #0]
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	2000025c 	.word	0x2000025c
 8001244:	20000018 	.word	0x20000018

08001248 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return uwTick;
 800124c:	4b03      	ldr	r3, [pc, #12]	@ (800125c <HAL_GetTick+0x14>)
 800124e:	681b      	ldr	r3, [r3, #0]
}
 8001250:	4618      	mov	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	2000025c 	.word	0x2000025c

08001260 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001268:	f7ff ffee 	bl	8001248 <HAL_GetTick>
 800126c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001278:	d004      	beq.n	8001284 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800127a:	4b09      	ldr	r3, [pc, #36]	@ (80012a0 <HAL_Delay+0x40>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	68fa      	ldr	r2, [r7, #12]
 8001280:	4413      	add	r3, r2
 8001282:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001284:	bf00      	nop
 8001286:	f7ff ffdf 	bl	8001248 <HAL_GetTick>
 800128a:	4602      	mov	r2, r0
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	68fa      	ldr	r2, [r7, #12]
 8001292:	429a      	cmp	r2, r3
 8001294:	d8f7      	bhi.n	8001286 <HAL_Delay+0x26>
  {
  }
}
 8001296:	bf00      	nop
 8001298:	bf00      	nop
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000018 	.word	0x20000018

080012a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b4:	4b0c      	ldr	r3, [pc, #48]	@ (80012e8 <__NVIC_SetPriorityGrouping+0x44>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ba:	68ba      	ldr	r2, [r7, #8]
 80012bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012c0:	4013      	ands	r3, r2
 80012c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012d6:	4a04      	ldr	r2, [pc, #16]	@ (80012e8 <__NVIC_SetPriorityGrouping+0x44>)
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	60d3      	str	r3, [r2, #12]
}
 80012dc:	bf00      	nop
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f0:	4b04      	ldr	r3, [pc, #16]	@ (8001304 <__NVIC_GetPriorityGrouping+0x18>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	0a1b      	lsrs	r3, r3, #8
 80012f6:	f003 0307 	and.w	r3, r3, #7
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001316:	2b00      	cmp	r3, #0
 8001318:	db0b      	blt.n	8001332 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	f003 021f 	and.w	r2, r3, #31
 8001320:	4907      	ldr	r1, [pc, #28]	@ (8001340 <__NVIC_EnableIRQ+0x38>)
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	095b      	lsrs	r3, r3, #5
 8001328:	2001      	movs	r0, #1
 800132a:	fa00 f202 	lsl.w	r2, r0, r2
 800132e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000e100 	.word	0xe000e100

08001344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	6039      	str	r1, [r7, #0]
 800134e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001354:	2b00      	cmp	r3, #0
 8001356:	db0a      	blt.n	800136e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	b2da      	uxtb	r2, r3
 800135c:	490c      	ldr	r1, [pc, #48]	@ (8001390 <__NVIC_SetPriority+0x4c>)
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	0112      	lsls	r2, r2, #4
 8001364:	b2d2      	uxtb	r2, r2
 8001366:	440b      	add	r3, r1
 8001368:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800136c:	e00a      	b.n	8001384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4908      	ldr	r1, [pc, #32]	@ (8001394 <__NVIC_SetPriority+0x50>)
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	f003 030f 	and.w	r3, r3, #15
 800137a:	3b04      	subs	r3, #4
 800137c:	0112      	lsls	r2, r2, #4
 800137e:	b2d2      	uxtb	r2, r2
 8001380:	440b      	add	r3, r1
 8001382:	761a      	strb	r2, [r3, #24]
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	e000e100 	.word	0xe000e100
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001398:	b480      	push	{r7}
 800139a:	b089      	sub	sp, #36	@ 0x24
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	f1c3 0307 	rsb	r3, r3, #7
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	bf28      	it	cs
 80013b6:	2304      	movcs	r3, #4
 80013b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	3304      	adds	r3, #4
 80013be:	2b06      	cmp	r3, #6
 80013c0:	d902      	bls.n	80013c8 <NVIC_EncodePriority+0x30>
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3b03      	subs	r3, #3
 80013c6:	e000      	b.n	80013ca <NVIC_EncodePriority+0x32>
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	f04f 32ff 	mov.w	r2, #4294967295
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43da      	mvns	r2, r3
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	401a      	ands	r2, r3
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e0:	f04f 31ff 	mov.w	r1, #4294967295
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ea:	43d9      	mvns	r1, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f0:	4313      	orrs	r3, r2
         );
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3724      	adds	r7, #36	@ 0x24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
	...

08001400 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3b01      	subs	r3, #1
 800140c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001410:	d301      	bcc.n	8001416 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001412:	2301      	movs	r3, #1
 8001414:	e00f      	b.n	8001436 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001416:	4a0a      	ldr	r2, [pc, #40]	@ (8001440 <SysTick_Config+0x40>)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3b01      	subs	r3, #1
 800141c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800141e:	210f      	movs	r1, #15
 8001420:	f04f 30ff 	mov.w	r0, #4294967295
 8001424:	f7ff ff8e 	bl	8001344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001428:	4b05      	ldr	r3, [pc, #20]	@ (8001440 <SysTick_Config+0x40>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800142e:	4b04      	ldr	r3, [pc, #16]	@ (8001440 <SysTick_Config+0x40>)
 8001430:	2207      	movs	r2, #7
 8001432:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	e000e010 	.word	0xe000e010

08001444 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7ff ff29 	bl	80012a4 <__NVIC_SetPriorityGrouping>
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b086      	sub	sp, #24
 800145e:	af00      	add	r7, sp, #0
 8001460:	4603      	mov	r3, r0
 8001462:	60b9      	str	r1, [r7, #8]
 8001464:	607a      	str	r2, [r7, #4]
 8001466:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001468:	f7ff ff40 	bl	80012ec <__NVIC_GetPriorityGrouping>
 800146c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	68b9      	ldr	r1, [r7, #8]
 8001472:	6978      	ldr	r0, [r7, #20]
 8001474:	f7ff ff90 	bl	8001398 <NVIC_EncodePriority>
 8001478:	4602      	mov	r2, r0
 800147a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800147e:	4611      	mov	r1, r2
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff5f 	bl	8001344 <__NVIC_SetPriority>
}
 8001486:	bf00      	nop
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	4603      	mov	r3, r0
 8001496:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ff33 	bl	8001308 <__NVIC_EnableIRQ>
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff ffa4 	bl	8001400 <SysTick_Config>
 80014b8:	4603      	mov	r3, r0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014c2:	b480      	push	{r7}
 80014c4:	b085      	sub	sp, #20
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014ca:	2300      	movs	r3, #0
 80014cc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d005      	beq.n	80014e6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2204      	movs	r2, #4
 80014de:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	73fb      	strb	r3, [r7, #15]
 80014e4:	e037      	b.n	8001556 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 020e 	bic.w	r2, r2, #14
 80014f4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001500:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001504:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 0201 	bic.w	r2, r2, #1
 8001514:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800151a:	f003 021f 	and.w	r2, r3, #31
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001522:	2101      	movs	r1, #1
 8001524:	fa01 f202 	lsl.w	r2, r1, r2
 8001528:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001532:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001538:	2b00      	cmp	r3, #0
 800153a:	d00c      	beq.n	8001556 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001546:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800154a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001554:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2201      	movs	r2, #1
 800155a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001566:	7bfb      	ldrb	r3, [r7, #15]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800157c:	2300      	movs	r3, #0
 800157e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001586:	b2db      	uxtb	r3, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d00d      	beq.n	80015a8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2204      	movs	r2, #4
 8001590:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2201      	movs	r2, #1
 8001596:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	73fb      	strb	r3, [r7, #15]
 80015a6:	e047      	b.n	8001638 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f022 020e 	bic.w	r2, r2, #14
 80015b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f022 0201 	bic.w	r2, r2, #1
 80015c6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015d2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80015d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015dc:	f003 021f 	and.w	r2, r3, #31
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e4:	2101      	movs	r1, #1
 80015e6:	fa01 f202 	lsl.w	r2, r1, r2
 80015ea:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80015f4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d00c      	beq.n	8001618 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001608:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800160c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001616:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800162c:	2b00      	cmp	r3, #0
 800162e:	d003      	beq.n	8001638 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	4798      	blx	r3
    }
  }
  return status;
 8001638:	7bfb      	ldrb	r3, [r7, #15]
}
 800163a:	4618      	mov	r0, r3
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
	...

08001644 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e147      	b.n	80018e6 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d106      	bne.n	8001670 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff fb7c 	bl	8000d68 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	699a      	ldr	r2, [r3, #24]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f022 0210 	bic.w	r2, r2, #16
 800167e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001680:	f7ff fde2 	bl	8001248 <HAL_GetTick>
 8001684:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001686:	e012      	b.n	80016ae <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001688:	f7ff fdde 	bl	8001248 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b0a      	cmp	r3, #10
 8001694:	d90b      	bls.n	80016ae <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800169a:	f043 0201 	orr.w	r2, r3, #1
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2203      	movs	r2, #3
 80016a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e11b      	b.n	80018e6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	f003 0308 	and.w	r3, r3, #8
 80016b8:	2b08      	cmp	r3, #8
 80016ba:	d0e5      	beq.n	8001688 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	699a      	ldr	r2, [r3, #24]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f042 0201 	orr.w	r2, r2, #1
 80016ca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016cc:	f7ff fdbc 	bl	8001248 <HAL_GetTick>
 80016d0:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80016d2:	e012      	b.n	80016fa <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80016d4:	f7ff fdb8 	bl	8001248 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b0a      	cmp	r3, #10
 80016e0:	d90b      	bls.n	80016fa <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016e6:	f043 0201 	orr.w	r2, r3, #1
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2203      	movs	r2, #3
 80016f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e0f5      	b.n	80018e6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	2b00      	cmp	r3, #0
 8001706:	d0e5      	beq.n	80016d4 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	699a      	ldr	r2, [r3, #24]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f042 0202 	orr.w	r2, r2, #2
 8001716:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a74      	ldr	r2, [pc, #464]	@ (80018f0 <HAL_FDCAN_Init+0x2ac>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d103      	bne.n	800172a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001722:	4a74      	ldr	r2, [pc, #464]	@ (80018f4 <HAL_FDCAN_Init+0x2b0>)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	7c1b      	ldrb	r3, [r3, #16]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d108      	bne.n	8001744 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	699a      	ldr	r2, [r3, #24]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001740:	619a      	str	r2, [r3, #24]
 8001742:	e007      	b.n	8001754 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	699a      	ldr	r2, [r3, #24]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001752:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	7c5b      	ldrb	r3, [r3, #17]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d108      	bne.n	800176e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	699a      	ldr	r2, [r3, #24]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800176a:	619a      	str	r2, [r3, #24]
 800176c:	e007      	b.n	800177e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	699a      	ldr	r2, [r3, #24]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800177c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	7c9b      	ldrb	r3, [r3, #18]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d108      	bne.n	8001798 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	699a      	ldr	r2, [r3, #24]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001794:	619a      	str	r2, [r3, #24]
 8001796:	e007      	b.n	80017a8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	699a      	ldr	r2, [r3, #24]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80017a6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689a      	ldr	r2, [r3, #8]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	430a      	orrs	r2, r1
 80017bc:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	699a      	ldr	r2, [r3, #24]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80017cc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	691a      	ldr	r2, [r3, #16]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f022 0210 	bic.w	r2, r2, #16
 80017dc:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d108      	bne.n	80017f8 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	699a      	ldr	r2, [r3, #24]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f042 0204 	orr.w	r2, r2, #4
 80017f4:	619a      	str	r2, [r3, #24]
 80017f6:	e02c      	b.n	8001852 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d028      	beq.n	8001852 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	2b02      	cmp	r3, #2
 8001806:	d01c      	beq.n	8001842 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	699a      	ldr	r2, [r3, #24]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001816:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	691a      	ldr	r2, [r3, #16]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f042 0210 	orr.w	r2, r2, #16
 8001826:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	2b03      	cmp	r3, #3
 800182e:	d110      	bne.n	8001852 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	699a      	ldr	r2, [r3, #24]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f042 0220 	orr.w	r2, r2, #32
 800183e:	619a      	str	r2, [r3, #24]
 8001840:	e007      	b.n	8001852 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	699a      	ldr	r2, [r3, #24]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f042 0220 	orr.w	r2, r2, #32
 8001850:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	3b01      	subs	r3, #1
 8001858:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	3b01      	subs	r3, #1
 8001860:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001862:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800186a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	3b01      	subs	r3, #1
 8001874:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800187a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800187c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001886:	d115      	bne.n	80018b4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800188c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001892:	3b01      	subs	r3, #1
 8001894:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001896:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189c:	3b01      	subs	r3, #1
 800189e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80018a0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a8:	3b01      	subs	r3, #1
 80018aa:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80018b0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80018b2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	430a      	orrs	r2, r1
 80018c6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 fc88 	bl	80021e0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40006400 	.word	0x40006400
 80018f4:	40006500 	.word	0x40006500

080018f8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b087      	sub	sp, #28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001908:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800190a:	7dfb      	ldrb	r3, [r7, #23]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d002      	beq.n	8001916 <HAL_FDCAN_ConfigFilter+0x1e>
 8001910:	7dfb      	ldrb	r3, [r7, #23]
 8001912:	2b02      	cmp	r3, #2
 8001914:	d13d      	bne.n	8001992 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d119      	bne.n	8001952 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800192a:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8001932:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001938:	4313      	orrs	r3, r2
 800193a:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	e01d      	b.n	800198e <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	075a      	lsls	r2, r3, #29
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	4313      	orrs	r3, r2
 800195e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	079a      	lsls	r2, r3, #30
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	4313      	orrs	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	4413      	add	r3, r2
 800197a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	3304      	adds	r3, #4
 8001986:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800198e:	2300      	movs	r3, #0
 8001990:	e006      	b.n	80019a0 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001996:	f043 0202 	orr.w	r2, r3, #2
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
  }
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	371c      	adds	r7, #28
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
 80019b8:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d116      	bne.n	80019f4 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80019ce:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	011a      	lsls	r2, r3, #4
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	431a      	orrs	r2, r3
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	431a      	orrs	r2, r3
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	431a      	orrs	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 80019f0:	2300      	movs	r3, #0
 80019f2:	e006      	b.n	8001a02 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019f8:	f043 0204 	orr.w	r2, r3, #4
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
  }
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d110      	bne.n	8001a44 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2202      	movs	r2, #2
 8001a26:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	699a      	ldr	r2, [r3, #24]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f022 0201 	bic.w	r2, r2, #1
 8001a38:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8001a40:	2300      	movs	r3, #0
 8001a42:	e006      	b.n	8001a52 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a48:	f043 0204 	orr.w	r2, r3, #4
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
  }
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b086      	sub	sp, #24
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	60f8      	str	r0, [r7, #12]
 8001a66:	60b9      	str	r1, [r7, #8]
 8001a68:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d12c      	bne.n	8001ad0 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001a7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d007      	beq.n	8001a96 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a8a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e023      	b.n	8001ade <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001a9e:	0c1b      	lsrs	r3, r3, #16
 8001aa0:	f003 0303 	and.w	r3, r3, #3
 8001aa4:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	68b9      	ldr	r1, [r7, #8]
 8001aac:	68f8      	ldr	r0, [r7, #12]
 8001aae:	f000 fc03 	bl	80022b8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	697a      	ldr	r2, [r7, #20]
 8001aba:	fa01 f202 	lsl.w	r2, r1, r2
 8001abe:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	409a      	lsls	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001acc:	2300      	movs	r3, #0
 8001ace:	e006      	b.n	8001ade <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ad4:	f043 0208 	orr.w	r2, r3, #8
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
  }
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3718      	adds	r7, #24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b08b      	sub	sp, #44	@ 0x2c
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
 8001af4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001b00:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001b02:	7efb      	ldrb	r3, [r7, #27]
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	f040 80e8 	bne.w	8001cda <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	2b40      	cmp	r3, #64	@ 0x40
 8001b0e:	d137      	bne.n	8001b80 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b18:	f003 030f 	and.w	r3, r3, #15
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d107      	bne.n	8001b30 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b24:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e0db      	b.n	8001ce8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b38:	0e1b      	lsrs	r3, r3, #24
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d10a      	bne.n	8001b58 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b4a:	0a5b      	lsrs	r3, r3, #9
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d101      	bne.n	8001b58 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001b54:	2301      	movs	r3, #1
 8001b56:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b60:	0a1b      	lsrs	r3, r3, #8
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	69fa      	ldr	r2, [r7, #28]
 8001b68:	4413      	add	r3, r2
 8001b6a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8001b70:	69fa      	ldr	r2, [r7, #28]
 8001b72:	4613      	mov	r3, r2
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	4413      	add	r3, r2
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	440b      	add	r3, r1
 8001b7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b7e:	e036      	b.n	8001bee <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b88:	f003 030f 	and.w	r3, r3, #15
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d107      	bne.n	8001ba0 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b94:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e0a3      	b.n	8001ce8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ba8:	0e1b      	lsrs	r3, r3, #24
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d10a      	bne.n	8001bc8 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bba:	0a1b      	lsrs	r3, r3, #8
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d101      	bne.n	8001bc8 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001bd0:	0a1b      	lsrs	r3, r3, #8
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	69fa      	ldr	r2, [r7, #28]
 8001bd8:	4413      	add	r3, r2
 8001bda:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001be0:	69fa      	ldr	r2, [r7, #28]
 8001be2:	4613      	mov	r3, r2
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	4413      	add	r3, r2
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	440b      	add	r3, r1
 8001bec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d107      	bne.n	8001c12 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	0c9b      	lsrs	r3, r3, #18
 8001c08:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	e005      	b.n	8001c1e <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c38:	3304      	adds	r3, #4
 8001c3a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8001c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	0c1b      	lsrs	r3, r3, #16
 8001c4c:	f003 020f 	and.w	r2, r3, #15
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	0e1b      	lsrs	r3, r3, #24
 8001c72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	0fda      	lsrs	r2, r3, #31
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c86:	3304      	adds	r3, #4
 8001c88:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001c8e:	2300      	movs	r3, #0
 8001c90:	623b      	str	r3, [r7, #32]
 8001c92:	e00a      	b.n	8001caa <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	6a3b      	ldr	r3, [r7, #32]
 8001c98:	441a      	add	r2, r3
 8001c9a:	6839      	ldr	r1, [r7, #0]
 8001c9c:	6a3b      	ldr	r3, [r7, #32]
 8001c9e:	440b      	add	r3, r1
 8001ca0:	7812      	ldrb	r2, [r2, #0]
 8001ca2:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001ca4:	6a3b      	ldr	r3, [r7, #32]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	623b      	str	r3, [r7, #32]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	4a11      	ldr	r2, [pc, #68]	@ (8001cf4 <HAL_FDCAN_GetRxMessage+0x20c>)
 8001cb0:	5cd3      	ldrb	r3, [r2, r3]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	6a3b      	ldr	r3, [r7, #32]
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d3ec      	bcc.n	8001c94 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	2b40      	cmp	r3, #64	@ 0x40
 8001cbe:	d105      	bne.n	8001ccc <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	69fa      	ldr	r2, [r7, #28]
 8001cc6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8001cca:	e004      	b.n	8001cd6 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	69fa      	ldr	r2, [r7, #28]
 8001cd2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	e006      	b.n	8001ce8 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cde:	f043 0208 	orr.w	r2, r3, #8
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
  }
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	372c      	adds	r7, #44	@ 0x2c
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	080065f0 	.word	0x080065f0

08001cf8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b087      	sub	sp, #28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001d0a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001d0c:	7dfb      	ldrb	r3, [r7, #23]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d003      	beq.n	8001d1a <HAL_FDCAN_ActivateNotification+0x22>
 8001d12:	7dfb      	ldrb	r3, [r7, #23]
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	f040 80c8 	bne.w	8001eaa <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d20:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d004      	beq.n	8001d36 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d03b      	beq.n	8001dae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d004      	beq.n	8001d4a <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d031      	beq.n	8001dae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d004      	beq.n	8001d5e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	f003 0304 	and.w	r3, r3, #4
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d027      	beq.n	8001dae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d004      	beq.n	8001d72 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d01d      	beq.n	8001dae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d004      	beq.n	8001d86 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	f003 0310 	and.w	r3, r3, #16
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d013      	beq.n	8001dae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d004      	beq.n	8001d9a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	f003 0320 	and.w	r3, r3, #32
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d009      	beq.n	8001dae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d00c      	beq.n	8001dbe <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d107      	bne.n	8001dbe <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f042 0201 	orr.w	r2, r2, #1
 8001dbc:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d004      	beq.n	8001dd2 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d13b      	bne.n	8001e4a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d004      	beq.n	8001de6 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d131      	bne.n	8001e4a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d004      	beq.n	8001dfa <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	f003 0304 	and.w	r3, r3, #4
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d127      	bne.n	8001e4a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d004      	beq.n	8001e0e <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	f003 0308 	and.w	r3, r3, #8
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d11d      	bne.n	8001e4a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d004      	beq.n	8001e22 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	f003 0310 	and.w	r3, r3, #16
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d113      	bne.n	8001e4a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d004      	beq.n	8001e36 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	f003 0320 	and.w	r3, r3, #32
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d109      	bne.n	8001e4a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d00c      	beq.n	8001e5a <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d007      	beq.n	8001e5a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f042 0202 	orr.w	r2, r2, #2
 8001e58:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d009      	beq.n	8001e78 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	430a      	orrs	r2, r1
 8001e74:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d009      	beq.n	8001e96 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68ba      	ldr	r2, [r7, #8]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	e006      	b.n	8001eb8 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eae:	f043 0202 	orr.w	r2, r3, #2
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
  }
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	371c      	adds	r7, #28
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08c      	sub	sp, #48	@ 0x30
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ed2:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ede:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ef6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ef8:	4013      	ands	r3, r2
 8001efa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f06:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f10:	4013      	ands	r3, r2
 8001f12:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f1a:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8001f1e:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f26:	6a3a      	ldr	r2, [r7, #32]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f32:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001f36:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f3e:	69fa      	ldr	r2, [r7, #28]
 8001f40:	4013      	ands	r3, r2
 8001f42:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f4a:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f52:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00b      	beq.n	8001f76 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d006      	beq.n	8001f76 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2240      	movs	r2, #64	@ 0x40
 8001f6e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 f916 	bl	80021a2 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d019      	beq.n	8001fb4 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d014      	beq.n	8001fb4 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001f92:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001faa:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001fac:	6939      	ldr	r1, [r7, #16]
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f8d8 	bl	8002164 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d007      	beq.n	8001fca <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fc0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001fc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 f8a2 	bl	800210e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d007      	beq.n	8001fe0 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001fd6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001fd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7fe fbc0 	bl	8000760 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d007      	beq.n	8001ff6 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fec:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001fee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 f897 	bl	8002124 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d00c      	beq.n	800201a <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002006:	2b00      	cmp	r3, #0
 8002008:	d007      	beq.n	800201a <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002012:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f890 	bl	800213a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002020:	2b00      	cmp	r3, #0
 8002022:	d018      	beq.n	8002056 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800202a:	2b00      	cmp	r3, #0
 800202c:	d013      	beq.n	8002056 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002036:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	4013      	ands	r3, r2
 8002044:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2280      	movs	r2, #128	@ 0x80
 800204c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800204e:	68f9      	ldr	r1, [r7, #12]
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 f87c 	bl	800214e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00c      	beq.n	800207a <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d007      	beq.n	800207a <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002072:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 f880 	bl	800217a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d00c      	beq.n	800209e <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d007      	beq.n	800209e <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002096:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f878 	bl	800218e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00f      	beq.n	80020c8 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00a      	beq.n	80020c8 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80020ba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020c0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d007      	beq.n	80020de <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	69fa      	ldr	r2, [r7, #28]
 80020d4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80020d6:	69f9      	ldr	r1, [r7, #28]
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 f876 	bl	80021ca <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80020de:	6a3b      	ldr	r3, [r7, #32]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d009      	beq.n	80020f8 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6a3a      	ldr	r2, [r7, #32]
 80020ea:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80020f0:	6a3b      	ldr	r3, [r7, #32]
 80020f2:	431a      	orrs	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d002      	beq.n	8002106 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 f858 	bl	80021b6 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002106:	bf00      	nop
 8002108:	3730      	adds	r7, #48	@ 0x30
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800210e:	b480      	push	{r7}
 8002110:	b083      	sub	sp, #12
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
 8002116:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800212e:	bf00      	nop
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800213a:	b480      	push	{r7}
 800213c:	b083      	sub	sp, #12
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
 8002156:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
 80021d2:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80021e8:	4b30      	ldr	r3, [pc, #192]	@ (80022ac <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80021ea:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a2f      	ldr	r2, [pc, #188]	@ (80022b0 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d103      	bne.n	80021fe <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80021fc:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a2c      	ldr	r2, [pc, #176]	@ (80022b4 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d103      	bne.n	8002210 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 800220e:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800221e:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002226:	041a      	lsls	r2, r3, #16
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	430a      	orrs	r2, r1
 800222e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002244:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800224c:	061a      	lsls	r2, r3, #24
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	430a      	orrs	r2, r1
 8002254:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	e005      	b.n	8002292 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	3304      	adds	r3, #4
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	429a      	cmp	r2, r3
 800229c:	d3f3      	bcc.n	8002286 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 800229e:	bf00      	nop
 80022a0:	bf00      	nop
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	4000a400 	.word	0x4000a400
 80022b0:	40006800 	.word	0x40006800
 80022b4:	40006c00 	.word	0x40006c00

080022b8 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b089      	sub	sp, #36	@ 0x24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
 80022c4:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10a      	bne.n	80022e4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80022d6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80022de:	4313      	orrs	r3, r2
 80022e0:	61fb      	str	r3, [r7, #28]
 80022e2:	e00a      	b.n	80022fa <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80022ec:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80022f2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80022f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80022f8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002304:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800230a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002310:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002318:	4313      	orrs	r3, r2
 800231a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	4613      	mov	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	4413      	add	r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	440b      	add	r3, r1
 800232c:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	69fa      	ldr	r2, [r7, #28]
 8002332:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	3304      	adds	r3, #4
 8002338:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	3304      	adds	r3, #4
 8002344:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	e020      	b.n	800238e <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	3303      	adds	r3, #3
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	4413      	add	r3, r2
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	3302      	adds	r3, #2
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	440b      	add	r3, r1
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002364:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	3301      	adds	r3, #1
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	440b      	add	r3, r1
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002372:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	440a      	add	r2, r1
 800237a:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800237c:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	3304      	adds	r3, #4
 8002386:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	3304      	adds	r3, #4
 800238c:	617b      	str	r3, [r7, #20]
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	4a06      	ldr	r2, [pc, #24]	@ (80023ac <FDCAN_CopyMessageToRAM+0xf4>)
 8002394:	5cd3      	ldrb	r3, [r2, r3]
 8002396:	461a      	mov	r2, r3
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	4293      	cmp	r3, r2
 800239c:	d3d6      	bcc.n	800234c <FDCAN_CopyMessageToRAM+0x94>
  }
}
 800239e:	bf00      	nop
 80023a0:	bf00      	nop
 80023a2:	3724      	adds	r7, #36	@ 0x24
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	080065f0 	.word	0x080065f0

080023b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b087      	sub	sp, #28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80023be:	e15a      	b.n	8002676 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	2101      	movs	r1, #1
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	fa01 f303 	lsl.w	r3, r1, r3
 80023cc:	4013      	ands	r3, r2
 80023ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 814c 	beq.w	8002670 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 0303 	and.w	r3, r3, #3
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d005      	beq.n	80023f0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d130      	bne.n	8002452 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	2203      	movs	r2, #3
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	43db      	mvns	r3, r3
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	4013      	ands	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	68da      	ldr	r2, [r3, #12]
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	4313      	orrs	r3, r2
 8002418:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002426:	2201      	movs	r2, #1
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43db      	mvns	r3, r3
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	4013      	ands	r3, r2
 8002434:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	091b      	lsrs	r3, r3, #4
 800243c:	f003 0201 	and.w	r2, r3, #1
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	4313      	orrs	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f003 0303 	and.w	r3, r3, #3
 800245a:	2b03      	cmp	r3, #3
 800245c:	d017      	beq.n	800248e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	2203      	movs	r2, #3
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43db      	mvns	r3, r3
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	4013      	ands	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d123      	bne.n	80024e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	08da      	lsrs	r2, r3, #3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3208      	adds	r2, #8
 80024a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	220f      	movs	r2, #15
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	4013      	ands	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	691a      	ldr	r2, [r3, #16]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	08da      	lsrs	r2, r3, #3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3208      	adds	r2, #8
 80024dc:	6939      	ldr	r1, [r7, #16]
 80024de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	2203      	movs	r2, #3
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43db      	mvns	r3, r3
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	4013      	ands	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f003 0203 	and.w	r2, r3, #3
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	4313      	orrs	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 80a6 	beq.w	8002670 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002524:	4b5b      	ldr	r3, [pc, #364]	@ (8002694 <HAL_GPIO_Init+0x2e4>)
 8002526:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002528:	4a5a      	ldr	r2, [pc, #360]	@ (8002694 <HAL_GPIO_Init+0x2e4>)
 800252a:	f043 0301 	orr.w	r3, r3, #1
 800252e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002530:	4b58      	ldr	r3, [pc, #352]	@ (8002694 <HAL_GPIO_Init+0x2e4>)
 8002532:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800253c:	4a56      	ldr	r2, [pc, #344]	@ (8002698 <HAL_GPIO_Init+0x2e8>)
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	089b      	lsrs	r3, r3, #2
 8002542:	3302      	adds	r3, #2
 8002544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002548:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	f003 0303 	and.w	r3, r3, #3
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	220f      	movs	r2, #15
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	4013      	ands	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002566:	d01f      	beq.n	80025a8 <HAL_GPIO_Init+0x1f8>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a4c      	ldr	r2, [pc, #304]	@ (800269c <HAL_GPIO_Init+0x2ec>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d019      	beq.n	80025a4 <HAL_GPIO_Init+0x1f4>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a4b      	ldr	r2, [pc, #300]	@ (80026a0 <HAL_GPIO_Init+0x2f0>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d013      	beq.n	80025a0 <HAL_GPIO_Init+0x1f0>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a4a      	ldr	r2, [pc, #296]	@ (80026a4 <HAL_GPIO_Init+0x2f4>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d00d      	beq.n	800259c <HAL_GPIO_Init+0x1ec>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a49      	ldr	r2, [pc, #292]	@ (80026a8 <HAL_GPIO_Init+0x2f8>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d007      	beq.n	8002598 <HAL_GPIO_Init+0x1e8>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a48      	ldr	r2, [pc, #288]	@ (80026ac <HAL_GPIO_Init+0x2fc>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d101      	bne.n	8002594 <HAL_GPIO_Init+0x1e4>
 8002590:	2305      	movs	r3, #5
 8002592:	e00a      	b.n	80025aa <HAL_GPIO_Init+0x1fa>
 8002594:	2306      	movs	r3, #6
 8002596:	e008      	b.n	80025aa <HAL_GPIO_Init+0x1fa>
 8002598:	2304      	movs	r3, #4
 800259a:	e006      	b.n	80025aa <HAL_GPIO_Init+0x1fa>
 800259c:	2303      	movs	r3, #3
 800259e:	e004      	b.n	80025aa <HAL_GPIO_Init+0x1fa>
 80025a0:	2302      	movs	r3, #2
 80025a2:	e002      	b.n	80025aa <HAL_GPIO_Init+0x1fa>
 80025a4:	2301      	movs	r3, #1
 80025a6:	e000      	b.n	80025aa <HAL_GPIO_Init+0x1fa>
 80025a8:	2300      	movs	r3, #0
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	f002 0203 	and.w	r2, r2, #3
 80025b0:	0092      	lsls	r2, r2, #2
 80025b2:	4093      	lsls	r3, r2
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025ba:	4937      	ldr	r1, [pc, #220]	@ (8002698 <HAL_GPIO_Init+0x2e8>)
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	089b      	lsrs	r3, r3, #2
 80025c0:	3302      	adds	r3, #2
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025c8:	4b39      	ldr	r3, [pc, #228]	@ (80026b0 <HAL_GPIO_Init+0x300>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	43db      	mvns	r3, r3
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	4013      	ands	r3, r2
 80025d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d003      	beq.n	80025ec <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025ec:	4a30      	ldr	r2, [pc, #192]	@ (80026b0 <HAL_GPIO_Init+0x300>)
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025f2:	4b2f      	ldr	r3, [pc, #188]	@ (80026b0 <HAL_GPIO_Init+0x300>)
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	43db      	mvns	r3, r3
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	4013      	ands	r3, r2
 8002600:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	4313      	orrs	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002616:	4a26      	ldr	r2, [pc, #152]	@ (80026b0 <HAL_GPIO_Init+0x300>)
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800261c:	4b24      	ldr	r3, [pc, #144]	@ (80026b0 <HAL_GPIO_Init+0x300>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	43db      	mvns	r3, r3
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	4013      	ands	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d003      	beq.n	8002640 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	4313      	orrs	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002640:	4a1b      	ldr	r2, [pc, #108]	@ (80026b0 <HAL_GPIO_Init+0x300>)
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002646:	4b1a      	ldr	r3, [pc, #104]	@ (80026b0 <HAL_GPIO_Init+0x300>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	43db      	mvns	r3, r3
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	4013      	ands	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4313      	orrs	r3, r2
 8002668:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800266a:	4a11      	ldr	r2, [pc, #68]	@ (80026b0 <HAL_GPIO_Init+0x300>)
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	3301      	adds	r3, #1
 8002674:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	fa22 f303 	lsr.w	r3, r2, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	f47f ae9d 	bne.w	80023c0 <HAL_GPIO_Init+0x10>
  }
}
 8002686:	bf00      	nop
 8002688:	bf00      	nop
 800268a:	371c      	adds	r7, #28
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	40021000 	.word	0x40021000
 8002698:	40010000 	.word	0x40010000
 800269c:	48000400 	.word	0x48000400
 80026a0:	48000800 	.word	0x48000800
 80026a4:	48000c00 	.word	0x48000c00
 80026a8:	48001000 	.word	0x48001000
 80026ac:	48001400 	.word	0x48001400
 80026b0:	40010400 	.word	0x40010400

080026b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	460b      	mov	r3, r1
 80026be:	807b      	strh	r3, [r7, #2]
 80026c0:	4613      	mov	r3, r2
 80026c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026c4:	787b      	ldrb	r3, [r7, #1]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026ca:	887a      	ldrh	r2, [r7, #2]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026d0:	e002      	b.n	80026d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026d2:	887a      	ldrh	r2, [r7, #2]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d141      	bne.n	8002776 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80026f2:	4b4b      	ldr	r3, [pc, #300]	@ (8002820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80026fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026fe:	d131      	bne.n	8002764 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002700:	4b47      	ldr	r3, [pc, #284]	@ (8002820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002702:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002706:	4a46      	ldr	r2, [pc, #280]	@ (8002820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002708:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800270c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002710:	4b43      	ldr	r3, [pc, #268]	@ (8002820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002718:	4a41      	ldr	r2, [pc, #260]	@ (8002820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800271a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800271e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002720:	4b40      	ldr	r3, [pc, #256]	@ (8002824 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2232      	movs	r2, #50	@ 0x32
 8002726:	fb02 f303 	mul.w	r3, r2, r3
 800272a:	4a3f      	ldr	r2, [pc, #252]	@ (8002828 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800272c:	fba2 2303 	umull	r2, r3, r2, r3
 8002730:	0c9b      	lsrs	r3, r3, #18
 8002732:	3301      	adds	r3, #1
 8002734:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002736:	e002      	b.n	800273e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	3b01      	subs	r3, #1
 800273c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800273e:	4b38      	ldr	r3, [pc, #224]	@ (8002820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002746:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800274a:	d102      	bne.n	8002752 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1f2      	bne.n	8002738 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002752:	4b33      	ldr	r3, [pc, #204]	@ (8002820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800275a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800275e:	d158      	bne.n	8002812 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e057      	b.n	8002814 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002764:	4b2e      	ldr	r3, [pc, #184]	@ (8002820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002766:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800276a:	4a2d      	ldr	r2, [pc, #180]	@ (8002820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800276c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002770:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002774:	e04d      	b.n	8002812 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800277c:	d141      	bne.n	8002802 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800277e:	4b28      	ldr	r3, [pc, #160]	@ (8002820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002786:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800278a:	d131      	bne.n	80027f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800278c:	4b24      	ldr	r3, [pc, #144]	@ (8002820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800278e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002792:	4a23      	ldr	r2, [pc, #140]	@ (8002820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002794:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002798:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800279c:	4b20      	ldr	r3, [pc, #128]	@ (8002820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80027a4:	4a1e      	ldr	r2, [pc, #120]	@ (8002820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80027ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002824 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2232      	movs	r2, #50	@ 0x32
 80027b2:	fb02 f303 	mul.w	r3, r2, r3
 80027b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002828 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80027b8:	fba2 2303 	umull	r2, r3, r2, r3
 80027bc:	0c9b      	lsrs	r3, r3, #18
 80027be:	3301      	adds	r3, #1
 80027c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027c2:	e002      	b.n	80027ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027ca:	4b15      	ldr	r3, [pc, #84]	@ (8002820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027d6:	d102      	bne.n	80027de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1f2      	bne.n	80027c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027de:	4b10      	ldr	r3, [pc, #64]	@ (8002820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027ea:	d112      	bne.n	8002812 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e011      	b.n	8002814 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002800:	e007      	b.n	8002812 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002802:	4b07      	ldr	r3, [pc, #28]	@ (8002820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800280a:	4a05      	ldr	r2, [pc, #20]	@ (8002820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800280c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002810:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	40007000 	.word	0x40007000
 8002824:	20000010 	.word	0x20000010
 8002828:	431bde83 	.word	0x431bde83

0800282c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002830:	4b05      	ldr	r3, [pc, #20]	@ (8002848 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	4a04      	ldr	r2, [pc, #16]	@ (8002848 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002836:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800283a:	6093      	str	r3, [r2, #8]
}
 800283c:	bf00      	nop
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	40007000 	.word	0x40007000

0800284c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b088      	sub	sp, #32
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e2fe      	b.n	8002e5c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	d075      	beq.n	8002956 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800286a:	4b97      	ldr	r3, [pc, #604]	@ (8002ac8 <HAL_RCC_OscConfig+0x27c>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f003 030c 	and.w	r3, r3, #12
 8002872:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002874:	4b94      	ldr	r3, [pc, #592]	@ (8002ac8 <HAL_RCC_OscConfig+0x27c>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	f003 0303 	and.w	r3, r3, #3
 800287c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	2b0c      	cmp	r3, #12
 8002882:	d102      	bne.n	800288a <HAL_RCC_OscConfig+0x3e>
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	2b03      	cmp	r3, #3
 8002888:	d002      	beq.n	8002890 <HAL_RCC_OscConfig+0x44>
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	2b08      	cmp	r3, #8
 800288e:	d10b      	bne.n	80028a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002890:	4b8d      	ldr	r3, [pc, #564]	@ (8002ac8 <HAL_RCC_OscConfig+0x27c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d05b      	beq.n	8002954 <HAL_RCC_OscConfig+0x108>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d157      	bne.n	8002954 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e2d9      	b.n	8002e5c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028b0:	d106      	bne.n	80028c0 <HAL_RCC_OscConfig+0x74>
 80028b2:	4b85      	ldr	r3, [pc, #532]	@ (8002ac8 <HAL_RCC_OscConfig+0x27c>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a84      	ldr	r2, [pc, #528]	@ (8002ac8 <HAL_RCC_OscConfig+0x27c>)
 80028b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	e01d      	b.n	80028fc <HAL_RCC_OscConfig+0xb0>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028c8:	d10c      	bne.n	80028e4 <HAL_RCC_OscConfig+0x98>
 80028ca:	4b7f      	ldr	r3, [pc, #508]	@ (8002ac8 <HAL_RCC_OscConfig+0x27c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a7e      	ldr	r2, [pc, #504]	@ (8002ac8 <HAL_RCC_OscConfig+0x27c>)
 80028d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028d4:	6013      	str	r3, [r2, #0]
 80028d6:	4b7c      	ldr	r3, [pc, #496]	@ (8002ac8 <HAL_RCC_OscConfig+0x27c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a7b      	ldr	r2, [pc, #492]	@ (8002ac8 <HAL_RCC_OscConfig+0x27c>)
 80028dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	e00b      	b.n	80028fc <HAL_RCC_OscConfig+0xb0>
 80028e4:	4b78      	ldr	r3, [pc, #480]	@ (8002ac8 <HAL_RCC_OscConfig+0x27c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a77      	ldr	r2, [pc, #476]	@ (8002ac8 <HAL_RCC_OscConfig+0x27c>)
 80028ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028ee:	6013      	str	r3, [r2, #0]
 80028f0:	4b75      	ldr	r3, [pc, #468]	@ (8002ac8 <HAL_RCC_OscConfig+0x27c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a74      	ldr	r2, [pc, #464]	@ (8002ac8 <HAL_RCC_OscConfig+0x27c>)
 80028f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d013      	beq.n	800292c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002904:	f7fe fca0 	bl	8001248 <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800290c:	f7fe fc9c 	bl	8001248 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b64      	cmp	r3, #100	@ 0x64
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e29e      	b.n	8002e5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800291e:	4b6a      	ldr	r3, [pc, #424]	@ (8002ac8 <HAL_RCC_OscConfig+0x27c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d0f0      	beq.n	800290c <HAL_RCC_OscConfig+0xc0>
 800292a:	e014      	b.n	8002956 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292c:	f7fe fc8c 	bl	8001248 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002934:	f7fe fc88 	bl	8001248 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b64      	cmp	r3, #100	@ 0x64
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e28a      	b.n	8002e5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002946:	4b60      	ldr	r3, [pc, #384]	@ (8002ac8 <HAL_RCC_OscConfig+0x27c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f0      	bne.n	8002934 <HAL_RCC_OscConfig+0xe8>
 8002952:	e000      	b.n	8002956 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d075      	beq.n	8002a4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002962:	4b59      	ldr	r3, [pc, #356]	@ (8002ac8 <HAL_RCC_OscConfig+0x27c>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 030c 	and.w	r3, r3, #12
 800296a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800296c:	4b56      	ldr	r3, [pc, #344]	@ (8002ac8 <HAL_RCC_OscConfig+0x27c>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	f003 0303 	and.w	r3, r3, #3
 8002974:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	2b0c      	cmp	r3, #12
 800297a:	d102      	bne.n	8002982 <HAL_RCC_OscConfig+0x136>
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	2b02      	cmp	r3, #2
 8002980:	d002      	beq.n	8002988 <HAL_RCC_OscConfig+0x13c>
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	2b04      	cmp	r3, #4
 8002986:	d11f      	bne.n	80029c8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002988:	4b4f      	ldr	r3, [pc, #316]	@ (8002ac8 <HAL_RCC_OscConfig+0x27c>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002990:	2b00      	cmp	r3, #0
 8002992:	d005      	beq.n	80029a0 <HAL_RCC_OscConfig+0x154>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d101      	bne.n	80029a0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e25d      	b.n	8002e5c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a0:	4b49      	ldr	r3, [pc, #292]	@ (8002ac8 <HAL_RCC_OscConfig+0x27c>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	061b      	lsls	r3, r3, #24
 80029ae:	4946      	ldr	r1, [pc, #280]	@ (8002ac8 <HAL_RCC_OscConfig+0x27c>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80029b4:	4b45      	ldr	r3, [pc, #276]	@ (8002acc <HAL_RCC_OscConfig+0x280>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fe fbf9 	bl	80011b0 <HAL_InitTick>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d043      	beq.n	8002a4c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e249      	b.n	8002e5c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d023      	beq.n	8002a18 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029d0:	4b3d      	ldr	r3, [pc, #244]	@ (8002ac8 <HAL_RCC_OscConfig+0x27c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a3c      	ldr	r2, [pc, #240]	@ (8002ac8 <HAL_RCC_OscConfig+0x27c>)
 80029d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029dc:	f7fe fc34 	bl	8001248 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029e4:	f7fe fc30 	bl	8001248 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e232      	b.n	8002e5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029f6:	4b34      	ldr	r3, [pc, #208]	@ (8002ac8 <HAL_RCC_OscConfig+0x27c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0f0      	beq.n	80029e4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a02:	4b31      	ldr	r3, [pc, #196]	@ (8002ac8 <HAL_RCC_OscConfig+0x27c>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	061b      	lsls	r3, r3, #24
 8002a10:	492d      	ldr	r1, [pc, #180]	@ (8002ac8 <HAL_RCC_OscConfig+0x27c>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	604b      	str	r3, [r1, #4]
 8002a16:	e01a      	b.n	8002a4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a18:	4b2b      	ldr	r3, [pc, #172]	@ (8002ac8 <HAL_RCC_OscConfig+0x27c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a2a      	ldr	r2, [pc, #168]	@ (8002ac8 <HAL_RCC_OscConfig+0x27c>)
 8002a1e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a24:	f7fe fc10 	bl	8001248 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a2c:	f7fe fc0c 	bl	8001248 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e20e      	b.n	8002e5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a3e:	4b22      	ldr	r3, [pc, #136]	@ (8002ac8 <HAL_RCC_OscConfig+0x27c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1f0      	bne.n	8002a2c <HAL_RCC_OscConfig+0x1e0>
 8002a4a:	e000      	b.n	8002a4e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0308 	and.w	r3, r3, #8
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d041      	beq.n	8002ade <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d01c      	beq.n	8002a9c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a62:	4b19      	ldr	r3, [pc, #100]	@ (8002ac8 <HAL_RCC_OscConfig+0x27c>)
 8002a64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a68:	4a17      	ldr	r2, [pc, #92]	@ (8002ac8 <HAL_RCC_OscConfig+0x27c>)
 8002a6a:	f043 0301 	orr.w	r3, r3, #1
 8002a6e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a72:	f7fe fbe9 	bl	8001248 <HAL_GetTick>
 8002a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a78:	e008      	b.n	8002a8c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a7a:	f7fe fbe5 	bl	8001248 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e1e7      	b.n	8002e5c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a8c:	4b0e      	ldr	r3, [pc, #56]	@ (8002ac8 <HAL_RCC_OscConfig+0x27c>)
 8002a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0ef      	beq.n	8002a7a <HAL_RCC_OscConfig+0x22e>
 8002a9a:	e020      	b.n	8002ade <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002ac8 <HAL_RCC_OscConfig+0x27c>)
 8002a9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002aa2:	4a09      	ldr	r2, [pc, #36]	@ (8002ac8 <HAL_RCC_OscConfig+0x27c>)
 8002aa4:	f023 0301 	bic.w	r3, r3, #1
 8002aa8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aac:	f7fe fbcc 	bl	8001248 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ab2:	e00d      	b.n	8002ad0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ab4:	f7fe fbc8 	bl	8001248 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d906      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e1ca      	b.n	8002e5c <HAL_RCC_OscConfig+0x610>
 8002ac6:	bf00      	nop
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ad0:	4b8c      	ldr	r3, [pc, #560]	@ (8002d04 <HAL_RCC_OscConfig+0x4b8>)
 8002ad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1ea      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0304 	and.w	r3, r3, #4
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f000 80a6 	beq.w	8002c38 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aec:	2300      	movs	r3, #0
 8002aee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002af0:	4b84      	ldr	r3, [pc, #528]	@ (8002d04 <HAL_RCC_OscConfig+0x4b8>)
 8002af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <HAL_RCC_OscConfig+0x2b4>
 8002afc:	2301      	movs	r3, #1
 8002afe:	e000      	b.n	8002b02 <HAL_RCC_OscConfig+0x2b6>
 8002b00:	2300      	movs	r3, #0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00d      	beq.n	8002b22 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b06:	4b7f      	ldr	r3, [pc, #508]	@ (8002d04 <HAL_RCC_OscConfig+0x4b8>)
 8002b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b0a:	4a7e      	ldr	r2, [pc, #504]	@ (8002d04 <HAL_RCC_OscConfig+0x4b8>)
 8002b0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b10:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b12:	4b7c      	ldr	r3, [pc, #496]	@ (8002d04 <HAL_RCC_OscConfig+0x4b8>)
 8002b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b22:	4b79      	ldr	r3, [pc, #484]	@ (8002d08 <HAL_RCC_OscConfig+0x4bc>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d118      	bne.n	8002b60 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b2e:	4b76      	ldr	r3, [pc, #472]	@ (8002d08 <HAL_RCC_OscConfig+0x4bc>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a75      	ldr	r2, [pc, #468]	@ (8002d08 <HAL_RCC_OscConfig+0x4bc>)
 8002b34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b3a:	f7fe fb85 	bl	8001248 <HAL_GetTick>
 8002b3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b40:	e008      	b.n	8002b54 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b42:	f7fe fb81 	bl	8001248 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e183      	b.n	8002e5c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b54:	4b6c      	ldr	r3, [pc, #432]	@ (8002d08 <HAL_RCC_OscConfig+0x4bc>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0f0      	beq.n	8002b42 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d108      	bne.n	8002b7a <HAL_RCC_OscConfig+0x32e>
 8002b68:	4b66      	ldr	r3, [pc, #408]	@ (8002d04 <HAL_RCC_OscConfig+0x4b8>)
 8002b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b6e:	4a65      	ldr	r2, [pc, #404]	@ (8002d04 <HAL_RCC_OscConfig+0x4b8>)
 8002b70:	f043 0301 	orr.w	r3, r3, #1
 8002b74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b78:	e024      	b.n	8002bc4 <HAL_RCC_OscConfig+0x378>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	2b05      	cmp	r3, #5
 8002b80:	d110      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x358>
 8002b82:	4b60      	ldr	r3, [pc, #384]	@ (8002d04 <HAL_RCC_OscConfig+0x4b8>)
 8002b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b88:	4a5e      	ldr	r2, [pc, #376]	@ (8002d04 <HAL_RCC_OscConfig+0x4b8>)
 8002b8a:	f043 0304 	orr.w	r3, r3, #4
 8002b8e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b92:	4b5c      	ldr	r3, [pc, #368]	@ (8002d04 <HAL_RCC_OscConfig+0x4b8>)
 8002b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b98:	4a5a      	ldr	r2, [pc, #360]	@ (8002d04 <HAL_RCC_OscConfig+0x4b8>)
 8002b9a:	f043 0301 	orr.w	r3, r3, #1
 8002b9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ba2:	e00f      	b.n	8002bc4 <HAL_RCC_OscConfig+0x378>
 8002ba4:	4b57      	ldr	r3, [pc, #348]	@ (8002d04 <HAL_RCC_OscConfig+0x4b8>)
 8002ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002baa:	4a56      	ldr	r2, [pc, #344]	@ (8002d04 <HAL_RCC_OscConfig+0x4b8>)
 8002bac:	f023 0301 	bic.w	r3, r3, #1
 8002bb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bb4:	4b53      	ldr	r3, [pc, #332]	@ (8002d04 <HAL_RCC_OscConfig+0x4b8>)
 8002bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bba:	4a52      	ldr	r2, [pc, #328]	@ (8002d04 <HAL_RCC_OscConfig+0x4b8>)
 8002bbc:	f023 0304 	bic.w	r3, r3, #4
 8002bc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d016      	beq.n	8002bfa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bcc:	f7fe fb3c 	bl	8001248 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bd2:	e00a      	b.n	8002bea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bd4:	f7fe fb38 	bl	8001248 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e138      	b.n	8002e5c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bea:	4b46      	ldr	r3, [pc, #280]	@ (8002d04 <HAL_RCC_OscConfig+0x4b8>)
 8002bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d0ed      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x388>
 8002bf8:	e015      	b.n	8002c26 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bfa:	f7fe fb25 	bl	8001248 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c00:	e00a      	b.n	8002c18 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c02:	f7fe fb21 	bl	8001248 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e121      	b.n	8002e5c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c18:	4b3a      	ldr	r3, [pc, #232]	@ (8002d04 <HAL_RCC_OscConfig+0x4b8>)
 8002c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1ed      	bne.n	8002c02 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c26:	7ffb      	ldrb	r3, [r7, #31]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d105      	bne.n	8002c38 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c2c:	4b35      	ldr	r3, [pc, #212]	@ (8002d04 <HAL_RCC_OscConfig+0x4b8>)
 8002c2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c30:	4a34      	ldr	r2, [pc, #208]	@ (8002d04 <HAL_RCC_OscConfig+0x4b8>)
 8002c32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c36:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0320 	and.w	r3, r3, #32
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d03c      	beq.n	8002cbe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d01c      	beq.n	8002c86 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c4c:	4b2d      	ldr	r3, [pc, #180]	@ (8002d04 <HAL_RCC_OscConfig+0x4b8>)
 8002c4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c52:	4a2c      	ldr	r2, [pc, #176]	@ (8002d04 <HAL_RCC_OscConfig+0x4b8>)
 8002c54:	f043 0301 	orr.w	r3, r3, #1
 8002c58:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c5c:	f7fe faf4 	bl	8001248 <HAL_GetTick>
 8002c60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c64:	f7fe faf0 	bl	8001248 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e0f2      	b.n	8002e5c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c76:	4b23      	ldr	r3, [pc, #140]	@ (8002d04 <HAL_RCC_OscConfig+0x4b8>)
 8002c78:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0ef      	beq.n	8002c64 <HAL_RCC_OscConfig+0x418>
 8002c84:	e01b      	b.n	8002cbe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c86:	4b1f      	ldr	r3, [pc, #124]	@ (8002d04 <HAL_RCC_OscConfig+0x4b8>)
 8002c88:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c8c:	4a1d      	ldr	r2, [pc, #116]	@ (8002d04 <HAL_RCC_OscConfig+0x4b8>)
 8002c8e:	f023 0301 	bic.w	r3, r3, #1
 8002c92:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c96:	f7fe fad7 	bl	8001248 <HAL_GetTick>
 8002c9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c9c:	e008      	b.n	8002cb0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c9e:	f7fe fad3 	bl	8001248 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e0d5      	b.n	8002e5c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002cb0:	4b14      	ldr	r3, [pc, #80]	@ (8002d04 <HAL_RCC_OscConfig+0x4b8>)
 8002cb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1ef      	bne.n	8002c9e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 80c9 	beq.w	8002e5a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8002d04 <HAL_RCC_OscConfig+0x4b8>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f003 030c 	and.w	r3, r3, #12
 8002cd0:	2b0c      	cmp	r3, #12
 8002cd2:	f000 8083 	beq.w	8002ddc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d15e      	bne.n	8002d9c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cde:	4b09      	ldr	r3, [pc, #36]	@ (8002d04 <HAL_RCC_OscConfig+0x4b8>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a08      	ldr	r2, [pc, #32]	@ (8002d04 <HAL_RCC_OscConfig+0x4b8>)
 8002ce4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ce8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cea:	f7fe faad 	bl	8001248 <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cf0:	e00c      	b.n	8002d0c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf2:	f7fe faa9 	bl	8001248 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d905      	bls.n	8002d0c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e0ab      	b.n	8002e5c <HAL_RCC_OscConfig+0x610>
 8002d04:	40021000 	.word	0x40021000
 8002d08:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d0c:	4b55      	ldr	r3, [pc, #340]	@ (8002e64 <HAL_RCC_OscConfig+0x618>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1ec      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d18:	4b52      	ldr	r3, [pc, #328]	@ (8002e64 <HAL_RCC_OscConfig+0x618>)
 8002d1a:	68da      	ldr	r2, [r3, #12]
 8002d1c:	4b52      	ldr	r3, [pc, #328]	@ (8002e68 <HAL_RCC_OscConfig+0x61c>)
 8002d1e:	4013      	ands	r3, r2
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	6a11      	ldr	r1, [r2, #32]
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d28:	3a01      	subs	r2, #1
 8002d2a:	0112      	lsls	r2, r2, #4
 8002d2c:	4311      	orrs	r1, r2
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002d32:	0212      	lsls	r2, r2, #8
 8002d34:	4311      	orrs	r1, r2
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002d3a:	0852      	lsrs	r2, r2, #1
 8002d3c:	3a01      	subs	r2, #1
 8002d3e:	0552      	lsls	r2, r2, #21
 8002d40:	4311      	orrs	r1, r2
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002d46:	0852      	lsrs	r2, r2, #1
 8002d48:	3a01      	subs	r2, #1
 8002d4a:	0652      	lsls	r2, r2, #25
 8002d4c:	4311      	orrs	r1, r2
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002d52:	06d2      	lsls	r2, r2, #27
 8002d54:	430a      	orrs	r2, r1
 8002d56:	4943      	ldr	r1, [pc, #268]	@ (8002e64 <HAL_RCC_OscConfig+0x618>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d5c:	4b41      	ldr	r3, [pc, #260]	@ (8002e64 <HAL_RCC_OscConfig+0x618>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a40      	ldr	r2, [pc, #256]	@ (8002e64 <HAL_RCC_OscConfig+0x618>)
 8002d62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d66:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d68:	4b3e      	ldr	r3, [pc, #248]	@ (8002e64 <HAL_RCC_OscConfig+0x618>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	4a3d      	ldr	r2, [pc, #244]	@ (8002e64 <HAL_RCC_OscConfig+0x618>)
 8002d6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d72:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d74:	f7fe fa68 	bl	8001248 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d7c:	f7fe fa64 	bl	8001248 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e066      	b.n	8002e5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d8e:	4b35      	ldr	r3, [pc, #212]	@ (8002e64 <HAL_RCC_OscConfig+0x618>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0f0      	beq.n	8002d7c <HAL_RCC_OscConfig+0x530>
 8002d9a:	e05e      	b.n	8002e5a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d9c:	4b31      	ldr	r3, [pc, #196]	@ (8002e64 <HAL_RCC_OscConfig+0x618>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a30      	ldr	r2, [pc, #192]	@ (8002e64 <HAL_RCC_OscConfig+0x618>)
 8002da2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002da6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da8:	f7fe fa4e 	bl	8001248 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db0:	f7fe fa4a 	bl	8001248 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e04c      	b.n	8002e5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dc2:	4b28      	ldr	r3, [pc, #160]	@ (8002e64 <HAL_RCC_OscConfig+0x618>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1f0      	bne.n	8002db0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002dce:	4b25      	ldr	r3, [pc, #148]	@ (8002e64 <HAL_RCC_OscConfig+0x618>)
 8002dd0:	68da      	ldr	r2, [r3, #12]
 8002dd2:	4924      	ldr	r1, [pc, #144]	@ (8002e64 <HAL_RCC_OscConfig+0x618>)
 8002dd4:	4b25      	ldr	r3, [pc, #148]	@ (8002e6c <HAL_RCC_OscConfig+0x620>)
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	60cb      	str	r3, [r1, #12]
 8002dda:	e03e      	b.n	8002e5a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	69db      	ldr	r3, [r3, #28]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d101      	bne.n	8002de8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e039      	b.n	8002e5c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002de8:	4b1e      	ldr	r3, [pc, #120]	@ (8002e64 <HAL_RCC_OscConfig+0x618>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f003 0203 	and.w	r2, r3, #3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d12c      	bne.n	8002e56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e06:	3b01      	subs	r3, #1
 8002e08:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d123      	bne.n	8002e56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e18:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d11b      	bne.n	8002e56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e28:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d113      	bne.n	8002e56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e38:	085b      	lsrs	r3, r3, #1
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d109      	bne.n	8002e56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e4c:	085b      	lsrs	r3, r3, #1
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d001      	beq.n	8002e5a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e000      	b.n	8002e5c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3720      	adds	r7, #32
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40021000 	.word	0x40021000
 8002e68:	019f800c 	.word	0x019f800c
 8002e6c:	feeefffc 	.word	0xfeeefffc

08002e70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e11e      	b.n	80030c6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e88:	4b91      	ldr	r3, [pc, #580]	@ (80030d0 <HAL_RCC_ClockConfig+0x260>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 030f 	and.w	r3, r3, #15
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d910      	bls.n	8002eb8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e96:	4b8e      	ldr	r3, [pc, #568]	@ (80030d0 <HAL_RCC_ClockConfig+0x260>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f023 020f 	bic.w	r2, r3, #15
 8002e9e:	498c      	ldr	r1, [pc, #560]	@ (80030d0 <HAL_RCC_ClockConfig+0x260>)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ea6:	4b8a      	ldr	r3, [pc, #552]	@ (80030d0 <HAL_RCC_ClockConfig+0x260>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d001      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e106      	b.n	80030c6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d073      	beq.n	8002fac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2b03      	cmp	r3, #3
 8002eca:	d129      	bne.n	8002f20 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ecc:	4b81      	ldr	r3, [pc, #516]	@ (80030d4 <HAL_RCC_ClockConfig+0x264>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e0f4      	b.n	80030c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002edc:	f000 f99e 	bl	800321c <RCC_GetSysClockFreqFromPLLSource>
 8002ee0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	4a7c      	ldr	r2, [pc, #496]	@ (80030d8 <HAL_RCC_ClockConfig+0x268>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d93f      	bls.n	8002f6a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002eea:	4b7a      	ldr	r3, [pc, #488]	@ (80030d4 <HAL_RCC_ClockConfig+0x264>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d009      	beq.n	8002f0a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d033      	beq.n	8002f6a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d12f      	bne.n	8002f6a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f0a:	4b72      	ldr	r3, [pc, #456]	@ (80030d4 <HAL_RCC_ClockConfig+0x264>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f12:	4a70      	ldr	r2, [pc, #448]	@ (80030d4 <HAL_RCC_ClockConfig+0x264>)
 8002f14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f18:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002f1a:	2380      	movs	r3, #128	@ 0x80
 8002f1c:	617b      	str	r3, [r7, #20]
 8002f1e:	e024      	b.n	8002f6a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d107      	bne.n	8002f38 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f28:	4b6a      	ldr	r3, [pc, #424]	@ (80030d4 <HAL_RCC_ClockConfig+0x264>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d109      	bne.n	8002f48 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0c6      	b.n	80030c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f38:	4b66      	ldr	r3, [pc, #408]	@ (80030d4 <HAL_RCC_ClockConfig+0x264>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e0be      	b.n	80030c6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002f48:	f000 f8ce 	bl	80030e8 <HAL_RCC_GetSysClockFreq>
 8002f4c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	4a61      	ldr	r2, [pc, #388]	@ (80030d8 <HAL_RCC_ClockConfig+0x268>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d909      	bls.n	8002f6a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f56:	4b5f      	ldr	r3, [pc, #380]	@ (80030d4 <HAL_RCC_ClockConfig+0x264>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f5e:	4a5d      	ldr	r2, [pc, #372]	@ (80030d4 <HAL_RCC_ClockConfig+0x264>)
 8002f60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f64:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002f66:	2380      	movs	r3, #128	@ 0x80
 8002f68:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f6a:	4b5a      	ldr	r3, [pc, #360]	@ (80030d4 <HAL_RCC_ClockConfig+0x264>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f023 0203 	bic.w	r2, r3, #3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	4957      	ldr	r1, [pc, #348]	@ (80030d4 <HAL_RCC_ClockConfig+0x264>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f7c:	f7fe f964 	bl	8001248 <HAL_GetTick>
 8002f80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f82:	e00a      	b.n	8002f9a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f84:	f7fe f960 	bl	8001248 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e095      	b.n	80030c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f9a:	4b4e      	ldr	r3, [pc, #312]	@ (80030d4 <HAL_RCC_ClockConfig+0x264>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 020c 	and.w	r2, r3, #12
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d1eb      	bne.n	8002f84 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d023      	beq.n	8003000 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d005      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fc4:	4b43      	ldr	r3, [pc, #268]	@ (80030d4 <HAL_RCC_ClockConfig+0x264>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	4a42      	ldr	r2, [pc, #264]	@ (80030d4 <HAL_RCC_ClockConfig+0x264>)
 8002fca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002fce:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0308 	and.w	r3, r3, #8
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d007      	beq.n	8002fec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002fdc:	4b3d      	ldr	r3, [pc, #244]	@ (80030d4 <HAL_RCC_ClockConfig+0x264>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002fe4:	4a3b      	ldr	r2, [pc, #236]	@ (80030d4 <HAL_RCC_ClockConfig+0x264>)
 8002fe6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002fea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fec:	4b39      	ldr	r3, [pc, #228]	@ (80030d4 <HAL_RCC_ClockConfig+0x264>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	4936      	ldr	r1, [pc, #216]	@ (80030d4 <HAL_RCC_ClockConfig+0x264>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	608b      	str	r3, [r1, #8]
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	2b80      	cmp	r3, #128	@ 0x80
 8003004:	d105      	bne.n	8003012 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003006:	4b33      	ldr	r3, [pc, #204]	@ (80030d4 <HAL_RCC_ClockConfig+0x264>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	4a32      	ldr	r2, [pc, #200]	@ (80030d4 <HAL_RCC_ClockConfig+0x264>)
 800300c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003010:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003012:	4b2f      	ldr	r3, [pc, #188]	@ (80030d0 <HAL_RCC_ClockConfig+0x260>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 030f 	and.w	r3, r3, #15
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	429a      	cmp	r2, r3
 800301e:	d21d      	bcs.n	800305c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003020:	4b2b      	ldr	r3, [pc, #172]	@ (80030d0 <HAL_RCC_ClockConfig+0x260>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f023 020f 	bic.w	r2, r3, #15
 8003028:	4929      	ldr	r1, [pc, #164]	@ (80030d0 <HAL_RCC_ClockConfig+0x260>)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	4313      	orrs	r3, r2
 800302e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003030:	f7fe f90a 	bl	8001248 <HAL_GetTick>
 8003034:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003036:	e00a      	b.n	800304e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003038:	f7fe f906 	bl	8001248 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003046:	4293      	cmp	r3, r2
 8003048:	d901      	bls.n	800304e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e03b      	b.n	80030c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800304e:	4b20      	ldr	r3, [pc, #128]	@ (80030d0 <HAL_RCC_ClockConfig+0x260>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	429a      	cmp	r2, r3
 800305a:	d1ed      	bne.n	8003038 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0304 	and.w	r3, r3, #4
 8003064:	2b00      	cmp	r3, #0
 8003066:	d008      	beq.n	800307a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003068:	4b1a      	ldr	r3, [pc, #104]	@ (80030d4 <HAL_RCC_ClockConfig+0x264>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	4917      	ldr	r1, [pc, #92]	@ (80030d4 <HAL_RCC_ClockConfig+0x264>)
 8003076:	4313      	orrs	r3, r2
 8003078:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0308 	and.w	r3, r3, #8
 8003082:	2b00      	cmp	r3, #0
 8003084:	d009      	beq.n	800309a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003086:	4b13      	ldr	r3, [pc, #76]	@ (80030d4 <HAL_RCC_ClockConfig+0x264>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	490f      	ldr	r1, [pc, #60]	@ (80030d4 <HAL_RCC_ClockConfig+0x264>)
 8003096:	4313      	orrs	r3, r2
 8003098:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800309a:	f000 f825 	bl	80030e8 <HAL_RCC_GetSysClockFreq>
 800309e:	4602      	mov	r2, r0
 80030a0:	4b0c      	ldr	r3, [pc, #48]	@ (80030d4 <HAL_RCC_ClockConfig+0x264>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	091b      	lsrs	r3, r3, #4
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	490c      	ldr	r1, [pc, #48]	@ (80030dc <HAL_RCC_ClockConfig+0x26c>)
 80030ac:	5ccb      	ldrb	r3, [r1, r3]
 80030ae:	f003 031f 	and.w	r3, r3, #31
 80030b2:	fa22 f303 	lsr.w	r3, r2, r3
 80030b6:	4a0a      	ldr	r2, [pc, #40]	@ (80030e0 <HAL_RCC_ClockConfig+0x270>)
 80030b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80030ba:	4b0a      	ldr	r3, [pc, #40]	@ (80030e4 <HAL_RCC_ClockConfig+0x274>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7fe f876 	bl	80011b0 <HAL_InitTick>
 80030c4:	4603      	mov	r3, r0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40022000 	.word	0x40022000
 80030d4:	40021000 	.word	0x40021000
 80030d8:	04c4b400 	.word	0x04c4b400
 80030dc:	080065d8 	.word	0x080065d8
 80030e0:	20000010 	.word	0x20000010
 80030e4:	20000014 	.word	0x20000014

080030e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b087      	sub	sp, #28
 80030ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80030ee:	4b2c      	ldr	r3, [pc, #176]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f003 030c 	and.w	r3, r3, #12
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	d102      	bne.n	8003100 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030fa:	4b2a      	ldr	r3, [pc, #168]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80030fc:	613b      	str	r3, [r7, #16]
 80030fe:	e047      	b.n	8003190 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003100:	4b27      	ldr	r3, [pc, #156]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f003 030c 	and.w	r3, r3, #12
 8003108:	2b08      	cmp	r3, #8
 800310a:	d102      	bne.n	8003112 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800310c:	4b26      	ldr	r3, [pc, #152]	@ (80031a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800310e:	613b      	str	r3, [r7, #16]
 8003110:	e03e      	b.n	8003190 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003112:	4b23      	ldr	r3, [pc, #140]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 030c 	and.w	r3, r3, #12
 800311a:	2b0c      	cmp	r3, #12
 800311c:	d136      	bne.n	800318c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800311e:	4b20      	ldr	r3, [pc, #128]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003128:	4b1d      	ldr	r3, [pc, #116]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	091b      	lsrs	r3, r3, #4
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	3301      	adds	r3, #1
 8003134:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2b03      	cmp	r3, #3
 800313a:	d10c      	bne.n	8003156 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800313c:	4a1a      	ldr	r2, [pc, #104]	@ (80031a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	fbb2 f3f3 	udiv	r3, r2, r3
 8003144:	4a16      	ldr	r2, [pc, #88]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003146:	68d2      	ldr	r2, [r2, #12]
 8003148:	0a12      	lsrs	r2, r2, #8
 800314a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800314e:	fb02 f303 	mul.w	r3, r2, r3
 8003152:	617b      	str	r3, [r7, #20]
      break;
 8003154:	e00c      	b.n	8003170 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003156:	4a13      	ldr	r2, [pc, #76]	@ (80031a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	fbb2 f3f3 	udiv	r3, r2, r3
 800315e:	4a10      	ldr	r2, [pc, #64]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003160:	68d2      	ldr	r2, [r2, #12]
 8003162:	0a12      	lsrs	r2, r2, #8
 8003164:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003168:	fb02 f303 	mul.w	r3, r2, r3
 800316c:	617b      	str	r3, [r7, #20]
      break;
 800316e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003170:	4b0b      	ldr	r3, [pc, #44]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	0e5b      	lsrs	r3, r3, #25
 8003176:	f003 0303 	and.w	r3, r3, #3
 800317a:	3301      	adds	r3, #1
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	fbb2 f3f3 	udiv	r3, r2, r3
 8003188:	613b      	str	r3, [r7, #16]
 800318a:	e001      	b.n	8003190 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800318c:	2300      	movs	r3, #0
 800318e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003190:	693b      	ldr	r3, [r7, #16]
}
 8003192:	4618      	mov	r0, r3
 8003194:	371c      	adds	r7, #28
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	40021000 	.word	0x40021000
 80031a4:	00f42400 	.word	0x00f42400
 80031a8:	007a1200 	.word	0x007a1200

080031ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031b0:	4b03      	ldr	r3, [pc, #12]	@ (80031c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80031b2:	681b      	ldr	r3, [r3, #0]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	20000010 	.word	0x20000010

080031c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80031c8:	f7ff fff0 	bl	80031ac <HAL_RCC_GetHCLKFreq>
 80031cc:	4602      	mov	r2, r0
 80031ce:	4b06      	ldr	r3, [pc, #24]	@ (80031e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	0a1b      	lsrs	r3, r3, #8
 80031d4:	f003 0307 	and.w	r3, r3, #7
 80031d8:	4904      	ldr	r1, [pc, #16]	@ (80031ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80031da:	5ccb      	ldrb	r3, [r1, r3]
 80031dc:	f003 031f 	and.w	r3, r3, #31
 80031e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40021000 	.word	0x40021000
 80031ec:	080065e8 	.word	0x080065e8

080031f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031f4:	f7ff ffda 	bl	80031ac <HAL_RCC_GetHCLKFreq>
 80031f8:	4602      	mov	r2, r0
 80031fa:	4b06      	ldr	r3, [pc, #24]	@ (8003214 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	0adb      	lsrs	r3, r3, #11
 8003200:	f003 0307 	and.w	r3, r3, #7
 8003204:	4904      	ldr	r1, [pc, #16]	@ (8003218 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003206:	5ccb      	ldrb	r3, [r1, r3]
 8003208:	f003 031f 	and.w	r3, r3, #31
 800320c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003210:	4618      	mov	r0, r3
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40021000 	.word	0x40021000
 8003218:	080065e8 	.word	0x080065e8

0800321c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800321c:	b480      	push	{r7}
 800321e:	b087      	sub	sp, #28
 8003220:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003222:	4b1e      	ldr	r3, [pc, #120]	@ (800329c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f003 0303 	and.w	r3, r3, #3
 800322a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800322c:	4b1b      	ldr	r3, [pc, #108]	@ (800329c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	091b      	lsrs	r3, r3, #4
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	3301      	adds	r3, #1
 8003238:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	2b03      	cmp	r3, #3
 800323e:	d10c      	bne.n	800325a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003240:	4a17      	ldr	r2, [pc, #92]	@ (80032a0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	fbb2 f3f3 	udiv	r3, r2, r3
 8003248:	4a14      	ldr	r2, [pc, #80]	@ (800329c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800324a:	68d2      	ldr	r2, [r2, #12]
 800324c:	0a12      	lsrs	r2, r2, #8
 800324e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003252:	fb02 f303 	mul.w	r3, r2, r3
 8003256:	617b      	str	r3, [r7, #20]
    break;
 8003258:	e00c      	b.n	8003274 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800325a:	4a12      	ldr	r2, [pc, #72]	@ (80032a4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003262:	4a0e      	ldr	r2, [pc, #56]	@ (800329c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003264:	68d2      	ldr	r2, [r2, #12]
 8003266:	0a12      	lsrs	r2, r2, #8
 8003268:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800326c:	fb02 f303 	mul.w	r3, r2, r3
 8003270:	617b      	str	r3, [r7, #20]
    break;
 8003272:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003274:	4b09      	ldr	r3, [pc, #36]	@ (800329c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	0e5b      	lsrs	r3, r3, #25
 800327a:	f003 0303 	and.w	r3, r3, #3
 800327e:	3301      	adds	r3, #1
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003284:	697a      	ldr	r2, [r7, #20]
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	fbb2 f3f3 	udiv	r3, r2, r3
 800328c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800328e:	687b      	ldr	r3, [r7, #4]
}
 8003290:	4618      	mov	r0, r3
 8003292:	371c      	adds	r7, #28
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	40021000 	.word	0x40021000
 80032a0:	007a1200 	.word	0x007a1200
 80032a4:	00f42400 	.word	0x00f42400

080032a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032b0:	2300      	movs	r3, #0
 80032b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032b4:	2300      	movs	r3, #0
 80032b6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 8098 	beq.w	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032c6:	2300      	movs	r3, #0
 80032c8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ca:	4b43      	ldr	r3, [pc, #268]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10d      	bne.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032d6:	4b40      	ldr	r3, [pc, #256]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032da:	4a3f      	ldr	r2, [pc, #252]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80032e2:	4b3d      	ldr	r3, [pc, #244]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ea:	60bb      	str	r3, [r7, #8]
 80032ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ee:	2301      	movs	r3, #1
 80032f0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032f2:	4b3a      	ldr	r3, [pc, #232]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a39      	ldr	r2, [pc, #228]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80032f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032fe:	f7fd ffa3 	bl	8001248 <HAL_GetTick>
 8003302:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003304:	e009      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003306:	f7fd ff9f 	bl	8001248 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d902      	bls.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	74fb      	strb	r3, [r7, #19]
        break;
 8003318:	e005      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800331a:	4b30      	ldr	r3, [pc, #192]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003322:	2b00      	cmp	r3, #0
 8003324:	d0ef      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003326:	7cfb      	ldrb	r3, [r7, #19]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d159      	bne.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800332c:	4b2a      	ldr	r3, [pc, #168]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800332e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003332:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003336:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d01e      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	429a      	cmp	r2, r3
 8003346:	d019      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003348:	4b23      	ldr	r3, [pc, #140]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800334a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800334e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003352:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003354:	4b20      	ldr	r3, [pc, #128]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003356:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800335a:	4a1f      	ldr	r2, [pc, #124]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800335c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003360:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003364:	4b1c      	ldr	r3, [pc, #112]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003366:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800336a:	4a1b      	ldr	r2, [pc, #108]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800336c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003370:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003374:	4a18      	ldr	r2, [pc, #96]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b00      	cmp	r3, #0
 8003384:	d016      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003386:	f7fd ff5f 	bl	8001248 <HAL_GetTick>
 800338a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800338c:	e00b      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800338e:	f7fd ff5b 	bl	8001248 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	f241 3288 	movw	r2, #5000	@ 0x1388
 800339c:	4293      	cmp	r3, r2
 800339e:	d902      	bls.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	74fb      	strb	r3, [r7, #19]
            break;
 80033a4:	e006      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033a6:	4b0c      	ldr	r3, [pc, #48]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0ec      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80033b4:	7cfb      	ldrb	r3, [r7, #19]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10b      	bne.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033ba:	4b07      	ldr	r3, [pc, #28]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033c8:	4903      	ldr	r1, [pc, #12]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80033d0:	e008      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033d2:	7cfb      	ldrb	r3, [r7, #19]
 80033d4:	74bb      	strb	r3, [r7, #18]
 80033d6:	e005      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80033d8:	40021000 	.word	0x40021000
 80033dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e0:	7cfb      	ldrb	r3, [r7, #19]
 80033e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033e4:	7c7b      	ldrb	r3, [r7, #17]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d105      	bne.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ea:	4ba7      	ldr	r3, [pc, #668]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ee:	4aa6      	ldr	r2, [pc, #664]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033f4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00a      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003402:	4ba1      	ldr	r3, [pc, #644]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003404:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003408:	f023 0203 	bic.w	r2, r3, #3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	499d      	ldr	r1, [pc, #628]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003412:	4313      	orrs	r3, r2
 8003414:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00a      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003424:	4b98      	ldr	r3, [pc, #608]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800342a:	f023 020c 	bic.w	r2, r3, #12
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	4995      	ldr	r1, [pc, #596]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003434:	4313      	orrs	r3, r2
 8003436:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0304 	and.w	r3, r3, #4
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00a      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003446:	4b90      	ldr	r3, [pc, #576]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003448:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800344c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	498c      	ldr	r1, [pc, #560]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003456:	4313      	orrs	r3, r2
 8003458:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0308 	and.w	r3, r3, #8
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00a      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003468:	4b87      	ldr	r3, [pc, #540]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800346a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800346e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	4984      	ldr	r1, [pc, #528]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003478:	4313      	orrs	r3, r2
 800347a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0310 	and.w	r3, r3, #16
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00a      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800348a:	4b7f      	ldr	r3, [pc, #508]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800348c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003490:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	497b      	ldr	r1, [pc, #492]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800349a:	4313      	orrs	r3, r2
 800349c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0320 	and.w	r3, r3, #32
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00a      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034ac:	4b76      	ldr	r3, [pc, #472]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034b2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	4973      	ldr	r1, [pc, #460]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00a      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034ce:	4b6e      	ldr	r3, [pc, #440]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034d4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	69db      	ldr	r3, [r3, #28]
 80034dc:	496a      	ldr	r1, [pc, #424]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00a      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034f0:	4b65      	ldr	r3, [pc, #404]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034f6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	4962      	ldr	r1, [pc, #392]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003500:	4313      	orrs	r3, r2
 8003502:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00a      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003512:	4b5d      	ldr	r3, [pc, #372]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003514:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003518:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003520:	4959      	ldr	r1, [pc, #356]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003522:	4313      	orrs	r3, r2
 8003524:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00a      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003534:	4b54      	ldr	r3, [pc, #336]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003536:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800353a:	f023 0203 	bic.w	r2, r3, #3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003542:	4951      	ldr	r1, [pc, #324]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003544:	4313      	orrs	r3, r2
 8003546:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00a      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003556:	4b4c      	ldr	r3, [pc, #304]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800355c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003564:	4948      	ldr	r1, [pc, #288]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003566:	4313      	orrs	r3, r2
 8003568:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003574:	2b00      	cmp	r3, #0
 8003576:	d015      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003578:	4b43      	ldr	r3, [pc, #268]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800357a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800357e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003586:	4940      	ldr	r1, [pc, #256]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003588:	4313      	orrs	r3, r2
 800358a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003592:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003596:	d105      	bne.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003598:	4b3b      	ldr	r3, [pc, #236]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	4a3a      	ldr	r2, [pc, #232]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800359e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035a2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d015      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80035b0:	4b35      	ldr	r3, [pc, #212]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035b6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035be:	4932      	ldr	r1, [pc, #200]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035ce:	d105      	bne.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035d0:	4b2d      	ldr	r3, [pc, #180]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	4a2c      	ldr	r2, [pc, #176]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035da:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d015      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80035e8:	4b27      	ldr	r3, [pc, #156]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ee:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f6:	4924      	ldr	r1, [pc, #144]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003602:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003606:	d105      	bne.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003608:	4b1f      	ldr	r3, [pc, #124]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	4a1e      	ldr	r2, [pc, #120]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800360e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003612:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d015      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003620:	4b19      	ldr	r3, [pc, #100]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003626:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800362e:	4916      	ldr	r1, [pc, #88]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003630:	4313      	orrs	r3, r2
 8003632:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800363a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800363e:	d105      	bne.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003640:	4b11      	ldr	r3, [pc, #68]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	4a10      	ldr	r2, [pc, #64]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003646:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800364a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d019      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003658:	4b0b      	ldr	r3, [pc, #44]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800365a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800365e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003666:	4908      	ldr	r1, [pc, #32]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003668:	4313      	orrs	r3, r2
 800366a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003672:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003676:	d109      	bne.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003678:	4b03      	ldr	r3, [pc, #12]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	4a02      	ldr	r2, [pc, #8]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800367e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003682:	60d3      	str	r3, [r2, #12]
 8003684:	e002      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003686:	bf00      	nop
 8003688:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d015      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003698:	4b29      	ldr	r3, [pc, #164]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800369a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800369e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036a6:	4926      	ldr	r1, [pc, #152]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036b6:	d105      	bne.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80036b8:	4b21      	ldr	r3, [pc, #132]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	4a20      	ldr	r2, [pc, #128]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80036be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036c2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d015      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80036d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80036d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036d6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036de:	4918      	ldr	r1, [pc, #96]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036ee:	d105      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80036f0:	4b13      	ldr	r3, [pc, #76]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	4a12      	ldr	r2, [pc, #72]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80036f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036fa:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d015      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003708:	4b0d      	ldr	r3, [pc, #52]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800370a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800370e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003716:	490a      	ldr	r1, [pc, #40]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003718:	4313      	orrs	r3, r2
 800371a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003722:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003726:	d105      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003728:	4b05      	ldr	r3, [pc, #20]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	4a04      	ldr	r2, [pc, #16]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800372e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003732:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003734:	7cbb      	ldrb	r3, [r7, #18]
}
 8003736:	4618      	mov	r0, r3
 8003738:	3718      	adds	r7, #24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	40021000 	.word	0x40021000

08003744 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e049      	b.n	80037ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d106      	bne.n	8003770 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7fd fb66 	bl	8000e3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2202      	movs	r2, #2
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	3304      	adds	r3, #4
 8003780:	4619      	mov	r1, r3
 8003782:	4610      	mov	r0, r2
 8003784:	f000 fa26 	bl	8003bd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
	...

080037f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b01      	cmp	r3, #1
 8003806:	d001      	beq.n	800380c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e054      	b.n	80038b6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2202      	movs	r2, #2
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68da      	ldr	r2, [r3, #12]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0201 	orr.w	r2, r2, #1
 8003822:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a26      	ldr	r2, [pc, #152]	@ (80038c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d022      	beq.n	8003874 <HAL_TIM_Base_Start_IT+0x80>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003836:	d01d      	beq.n	8003874 <HAL_TIM_Base_Start_IT+0x80>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a22      	ldr	r2, [pc, #136]	@ (80038c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d018      	beq.n	8003874 <HAL_TIM_Base_Start_IT+0x80>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a21      	ldr	r2, [pc, #132]	@ (80038cc <HAL_TIM_Base_Start_IT+0xd8>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d013      	beq.n	8003874 <HAL_TIM_Base_Start_IT+0x80>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a1f      	ldr	r2, [pc, #124]	@ (80038d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d00e      	beq.n	8003874 <HAL_TIM_Base_Start_IT+0x80>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a1e      	ldr	r2, [pc, #120]	@ (80038d4 <HAL_TIM_Base_Start_IT+0xe0>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d009      	beq.n	8003874 <HAL_TIM_Base_Start_IT+0x80>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a1c      	ldr	r2, [pc, #112]	@ (80038d8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d004      	beq.n	8003874 <HAL_TIM_Base_Start_IT+0x80>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a1b      	ldr	r2, [pc, #108]	@ (80038dc <HAL_TIM_Base_Start_IT+0xe8>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d115      	bne.n	80038a0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689a      	ldr	r2, [r3, #8]
 800387a:	4b19      	ldr	r3, [pc, #100]	@ (80038e0 <HAL_TIM_Base_Start_IT+0xec>)
 800387c:	4013      	ands	r3, r2
 800387e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2b06      	cmp	r3, #6
 8003884:	d015      	beq.n	80038b2 <HAL_TIM_Base_Start_IT+0xbe>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800388c:	d011      	beq.n	80038b2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f042 0201 	orr.w	r2, r2, #1
 800389c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800389e:	e008      	b.n	80038b2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0201 	orr.w	r2, r2, #1
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	e000      	b.n	80038b4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3714      	adds	r7, #20
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	40012c00 	.word	0x40012c00
 80038c8:	40000400 	.word	0x40000400
 80038cc:	40000800 	.word	0x40000800
 80038d0:	40000c00 	.word	0x40000c00
 80038d4:	40013400 	.word	0x40013400
 80038d8:	40014000 	.word	0x40014000
 80038dc:	40015000 	.word	0x40015000
 80038e0:	00010007 	.word	0x00010007

080038e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d020      	beq.n	8003948 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d01b      	beq.n	8003948 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f06f 0202 	mvn.w	r2, #2
 8003918:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	f003 0303 	and.w	r3, r3, #3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f931 	bl	8003b96 <HAL_TIM_IC_CaptureCallback>
 8003934:	e005      	b.n	8003942 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f923 	bl	8003b82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 f934 	bl	8003baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	f003 0304 	and.w	r3, r3, #4
 800394e:	2b00      	cmp	r3, #0
 8003950:	d020      	beq.n	8003994 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	2b00      	cmp	r3, #0
 800395a:	d01b      	beq.n	8003994 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f06f 0204 	mvn.w	r2, #4
 8003964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2202      	movs	r2, #2
 800396a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f90b 	bl	8003b96 <HAL_TIM_IC_CaptureCallback>
 8003980:	e005      	b.n	800398e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f8fd 	bl	8003b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 f90e 	bl	8003baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	f003 0308 	and.w	r3, r3, #8
 800399a:	2b00      	cmp	r3, #0
 800399c:	d020      	beq.n	80039e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f003 0308 	and.w	r3, r3, #8
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d01b      	beq.n	80039e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f06f 0208 	mvn.w	r2, #8
 80039b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2204      	movs	r2, #4
 80039b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	f003 0303 	and.w	r3, r3, #3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f8e5 	bl	8003b96 <HAL_TIM_IC_CaptureCallback>
 80039cc:	e005      	b.n	80039da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f8d7 	bl	8003b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 f8e8 	bl	8003baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	f003 0310 	and.w	r3, r3, #16
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d020      	beq.n	8003a2c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f003 0310 	and.w	r3, r3, #16
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d01b      	beq.n	8003a2c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f06f 0210 	mvn.w	r2, #16
 80039fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2208      	movs	r2, #8
 8003a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f8bf 	bl	8003b96 <HAL_TIM_IC_CaptureCallback>
 8003a18:	e005      	b.n	8003a26 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f8b1 	bl	8003b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 f8c2 	bl	8003baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00c      	beq.n	8003a50 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d007      	beq.n	8003a50 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f06f 0201 	mvn.w	r2, #1
 8003a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7fc fdb0 	bl	80005b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d104      	bne.n	8003a64 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00c      	beq.n	8003a7e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d007      	beq.n	8003a7e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003a76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 f9ff 	bl	8003e7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00c      	beq.n	8003aa2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d007      	beq.n	8003aa2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003a9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f9f7 	bl	8003e90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00c      	beq.n	8003ac6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d007      	beq.n	8003ac6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003abe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 f87c 	bl	8003bbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	f003 0320 	and.w	r3, r3, #32
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00c      	beq.n	8003aea <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f003 0320 	and.w	r3, r3, #32
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d007      	beq.n	8003aea <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f06f 0220 	mvn.w	r2, #32
 8003ae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 f9bf 	bl	8003e68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00c      	beq.n	8003b0e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d007      	beq.n	8003b0e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003b06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 f9cb 	bl	8003ea4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00c      	beq.n	8003b32 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d007      	beq.n	8003b32 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 f9c3 	bl	8003eb8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00c      	beq.n	8003b56 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d007      	beq.n	8003b56 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8003b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f9bb 	bl	8003ecc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00c      	beq.n	8003b7a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d007      	beq.n	8003b7a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003b72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f9b3 	bl	8003ee0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b7a:	bf00      	nop
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b083      	sub	sp, #12
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b083      	sub	sp, #12
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b9e:	bf00      	nop
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003baa:	b480      	push	{r7}
 8003bac:	b083      	sub	sp, #12
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bb2:	bf00      	nop
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b083      	sub	sp, #12
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bc6:	bf00      	nop
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
	...

08003bd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a4c      	ldr	r2, [pc, #304]	@ (8003d18 <TIM_Base_SetConfig+0x144>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d017      	beq.n	8003c1c <TIM_Base_SetConfig+0x48>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bf2:	d013      	beq.n	8003c1c <TIM_Base_SetConfig+0x48>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a49      	ldr	r2, [pc, #292]	@ (8003d1c <TIM_Base_SetConfig+0x148>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d00f      	beq.n	8003c1c <TIM_Base_SetConfig+0x48>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a48      	ldr	r2, [pc, #288]	@ (8003d20 <TIM_Base_SetConfig+0x14c>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d00b      	beq.n	8003c1c <TIM_Base_SetConfig+0x48>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a47      	ldr	r2, [pc, #284]	@ (8003d24 <TIM_Base_SetConfig+0x150>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d007      	beq.n	8003c1c <TIM_Base_SetConfig+0x48>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a46      	ldr	r2, [pc, #280]	@ (8003d28 <TIM_Base_SetConfig+0x154>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d003      	beq.n	8003c1c <TIM_Base_SetConfig+0x48>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a45      	ldr	r2, [pc, #276]	@ (8003d2c <TIM_Base_SetConfig+0x158>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d108      	bne.n	8003c2e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a39      	ldr	r2, [pc, #228]	@ (8003d18 <TIM_Base_SetConfig+0x144>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d023      	beq.n	8003c7e <TIM_Base_SetConfig+0xaa>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c3c:	d01f      	beq.n	8003c7e <TIM_Base_SetConfig+0xaa>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a36      	ldr	r2, [pc, #216]	@ (8003d1c <TIM_Base_SetConfig+0x148>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d01b      	beq.n	8003c7e <TIM_Base_SetConfig+0xaa>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a35      	ldr	r2, [pc, #212]	@ (8003d20 <TIM_Base_SetConfig+0x14c>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d017      	beq.n	8003c7e <TIM_Base_SetConfig+0xaa>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a34      	ldr	r2, [pc, #208]	@ (8003d24 <TIM_Base_SetConfig+0x150>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d013      	beq.n	8003c7e <TIM_Base_SetConfig+0xaa>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a33      	ldr	r2, [pc, #204]	@ (8003d28 <TIM_Base_SetConfig+0x154>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d00f      	beq.n	8003c7e <TIM_Base_SetConfig+0xaa>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a33      	ldr	r2, [pc, #204]	@ (8003d30 <TIM_Base_SetConfig+0x15c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d00b      	beq.n	8003c7e <TIM_Base_SetConfig+0xaa>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a32      	ldr	r2, [pc, #200]	@ (8003d34 <TIM_Base_SetConfig+0x160>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d007      	beq.n	8003c7e <TIM_Base_SetConfig+0xaa>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a31      	ldr	r2, [pc, #196]	@ (8003d38 <TIM_Base_SetConfig+0x164>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d003      	beq.n	8003c7e <TIM_Base_SetConfig+0xaa>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a2c      	ldr	r2, [pc, #176]	@ (8003d2c <TIM_Base_SetConfig+0x158>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d108      	bne.n	8003c90 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a18      	ldr	r2, [pc, #96]	@ (8003d18 <TIM_Base_SetConfig+0x144>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d013      	beq.n	8003ce4 <TIM_Base_SetConfig+0x110>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a1a      	ldr	r2, [pc, #104]	@ (8003d28 <TIM_Base_SetConfig+0x154>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d00f      	beq.n	8003ce4 <TIM_Base_SetConfig+0x110>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a1a      	ldr	r2, [pc, #104]	@ (8003d30 <TIM_Base_SetConfig+0x15c>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d00b      	beq.n	8003ce4 <TIM_Base_SetConfig+0x110>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a19      	ldr	r2, [pc, #100]	@ (8003d34 <TIM_Base_SetConfig+0x160>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d007      	beq.n	8003ce4 <TIM_Base_SetConfig+0x110>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a18      	ldr	r2, [pc, #96]	@ (8003d38 <TIM_Base_SetConfig+0x164>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d003      	beq.n	8003ce4 <TIM_Base_SetConfig+0x110>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a13      	ldr	r2, [pc, #76]	@ (8003d2c <TIM_Base_SetConfig+0x158>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d103      	bne.n	8003cec <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	691a      	ldr	r2, [r3, #16]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d105      	bne.n	8003d0a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	f023 0201 	bic.w	r2, r3, #1
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	611a      	str	r2, [r3, #16]
  }
}
 8003d0a:	bf00      	nop
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	40012c00 	.word	0x40012c00
 8003d1c:	40000400 	.word	0x40000400
 8003d20:	40000800 	.word	0x40000800
 8003d24:	40000c00 	.word	0x40000c00
 8003d28:	40013400 	.word	0x40013400
 8003d2c:	40015000 	.word	0x40015000
 8003d30:	40014000 	.word	0x40014000
 8003d34:	40014400 	.word	0x40014400
 8003d38:	40014800 	.word	0x40014800

08003d3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d101      	bne.n	8003d54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d50:	2302      	movs	r3, #2
 8003d52:	e074      	b.n	8003e3e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a34      	ldr	r2, [pc, #208]	@ (8003e4c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d009      	beq.n	8003d92 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a33      	ldr	r2, [pc, #204]	@ (8003e50 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d004      	beq.n	8003d92 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a31      	ldr	r2, [pc, #196]	@ (8003e54 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d108      	bne.n	8003da4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003d98:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003daa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a21      	ldr	r2, [pc, #132]	@ (8003e4c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d022      	beq.n	8003e12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dd4:	d01d      	beq.n	8003e12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a1f      	ldr	r2, [pc, #124]	@ (8003e58 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d018      	beq.n	8003e12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a1d      	ldr	r2, [pc, #116]	@ (8003e5c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d013      	beq.n	8003e12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a1c      	ldr	r2, [pc, #112]	@ (8003e60 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d00e      	beq.n	8003e12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a15      	ldr	r2, [pc, #84]	@ (8003e50 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d009      	beq.n	8003e12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a18      	ldr	r2, [pc, #96]	@ (8003e64 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d004      	beq.n	8003e12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a11      	ldr	r2, [pc, #68]	@ (8003e54 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d10c      	bne.n	8003e2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68ba      	ldr	r2, [r7, #8]
 8003e2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3714      	adds	r7, #20
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	40012c00 	.word	0x40012c00
 8003e50:	40013400 	.word	0x40013400
 8003e54:	40015000 	.word	0x40015000
 8003e58:	40000400 	.word	0x40000400
 8003e5c:	40000800 	.word	0x40000800
 8003e60:	40000c00 	.word	0x40000c00
 8003e64:	40014000 	.word	0x40014000

08003e68 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e042      	b.n	8003f8c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d106      	bne.n	8003f1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f7fc ffb5 	bl	8000e88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2224      	movs	r2, #36	@ 0x24
 8003f22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 0201 	bic.w	r2, r2, #1
 8003f34:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d002      	beq.n	8003f44 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 fef6 	bl	8004d30 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 fbf7 	bl	8004738 <UART_SetConfig>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d101      	bne.n	8003f54 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e01b      	b.n	8003f8c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689a      	ldr	r2, [r3, #8]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f042 0201 	orr.w	r2, r2, #1
 8003f82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 ff75 	bl	8004e74 <UART_CheckIdleState>
 8003f8a:	4603      	mov	r3, r0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3708      	adds	r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b08a      	sub	sp, #40	@ 0x28
 8003f98:	af02      	add	r7, sp, #8
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	603b      	str	r3, [r7, #0]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003faa:	2b20      	cmp	r3, #32
 8003fac:	d17b      	bne.n	80040a6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d002      	beq.n	8003fba <HAL_UART_Transmit+0x26>
 8003fb4:	88fb      	ldrh	r3, [r7, #6]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e074      	b.n	80040a8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2221      	movs	r2, #33	@ 0x21
 8003fca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fce:	f7fd f93b 	bl	8001248 <HAL_GetTick>
 8003fd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	88fa      	ldrh	r2, [r7, #6]
 8003fd8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	88fa      	ldrh	r2, [r7, #6]
 8003fe0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fec:	d108      	bne.n	8004000 <HAL_UART_Transmit+0x6c>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d104      	bne.n	8004000 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	61bb      	str	r3, [r7, #24]
 8003ffe:	e003      	b.n	8004008 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004004:	2300      	movs	r3, #0
 8004006:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004008:	e030      	b.n	800406c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	2200      	movs	r2, #0
 8004012:	2180      	movs	r1, #128	@ 0x80
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f000 ffd7 	bl	8004fc8 <UART_WaitOnFlagUntilTimeout>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d005      	beq.n	800402c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2220      	movs	r2, #32
 8004024:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e03d      	b.n	80040a8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10b      	bne.n	800404a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	881b      	ldrh	r3, [r3, #0]
 8004036:	461a      	mov	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004040:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	3302      	adds	r3, #2
 8004046:	61bb      	str	r3, [r7, #24]
 8004048:	e007      	b.n	800405a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	781a      	ldrb	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	3301      	adds	r3, #1
 8004058:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004060:	b29b      	uxth	r3, r3
 8004062:	3b01      	subs	r3, #1
 8004064:	b29a      	uxth	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004072:	b29b      	uxth	r3, r3
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1c8      	bne.n	800400a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	9300      	str	r3, [sp, #0]
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	2200      	movs	r2, #0
 8004080:	2140      	movs	r1, #64	@ 0x40
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f000 ffa0 	bl	8004fc8 <UART_WaitOnFlagUntilTimeout>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d005      	beq.n	800409a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2220      	movs	r2, #32
 8004092:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e006      	b.n	80040a8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2220      	movs	r2, #32
 800409e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80040a2:	2300      	movs	r3, #0
 80040a4:	e000      	b.n	80040a8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80040a6:	2302      	movs	r3, #2
  }
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3720      	adds	r7, #32
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b0ba      	sub	sp, #232	@ 0xe8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80040d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80040da:	f640 030f 	movw	r3, #2063	@ 0x80f
 80040de:	4013      	ands	r3, r2
 80040e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80040e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d11b      	bne.n	8004124 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80040ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040f0:	f003 0320 	and.w	r3, r3, #32
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d015      	beq.n	8004124 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80040f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040fc:	f003 0320 	and.w	r3, r3, #32
 8004100:	2b00      	cmp	r3, #0
 8004102:	d105      	bne.n	8004110 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004104:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004108:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d009      	beq.n	8004124 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004114:	2b00      	cmp	r3, #0
 8004116:	f000 82e3 	beq.w	80046e0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	4798      	blx	r3
      }
      return;
 8004122:	e2dd      	b.n	80046e0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004124:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004128:	2b00      	cmp	r3, #0
 800412a:	f000 8123 	beq.w	8004374 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800412e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004132:	4b8d      	ldr	r3, [pc, #564]	@ (8004368 <HAL_UART_IRQHandler+0x2b8>)
 8004134:	4013      	ands	r3, r2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d106      	bne.n	8004148 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800413a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800413e:	4b8b      	ldr	r3, [pc, #556]	@ (800436c <HAL_UART_IRQHandler+0x2bc>)
 8004140:	4013      	ands	r3, r2
 8004142:	2b00      	cmp	r3, #0
 8004144:	f000 8116 	beq.w	8004374 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b00      	cmp	r3, #0
 8004152:	d011      	beq.n	8004178 <HAL_UART_IRQHandler+0xc8>
 8004154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004158:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00b      	beq.n	8004178 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2201      	movs	r2, #1
 8004166:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800416e:	f043 0201 	orr.w	r2, r3, #1
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d011      	beq.n	80041a8 <HAL_UART_IRQHandler+0xf8>
 8004184:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00b      	beq.n	80041a8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2202      	movs	r2, #2
 8004196:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800419e:	f043 0204 	orr.w	r2, r3, #4
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d011      	beq.n	80041d8 <HAL_UART_IRQHandler+0x128>
 80041b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00b      	beq.n	80041d8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2204      	movs	r2, #4
 80041c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ce:	f043 0202 	orr.w	r2, r3, #2
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80041d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041dc:	f003 0308 	and.w	r3, r3, #8
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d017      	beq.n	8004214 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80041e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041e8:	f003 0320 	and.w	r3, r3, #32
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d105      	bne.n	80041fc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80041f0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80041f4:	4b5c      	ldr	r3, [pc, #368]	@ (8004368 <HAL_UART_IRQHandler+0x2b8>)
 80041f6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00b      	beq.n	8004214 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2208      	movs	r2, #8
 8004202:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800420a:	f043 0208 	orr.w	r2, r3, #8
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004218:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800421c:	2b00      	cmp	r3, #0
 800421e:	d012      	beq.n	8004246 <HAL_UART_IRQHandler+0x196>
 8004220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004224:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00c      	beq.n	8004246 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004234:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800423c:	f043 0220 	orr.w	r2, r3, #32
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 8249 	beq.w	80046e4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004256:	f003 0320 	and.w	r3, r3, #32
 800425a:	2b00      	cmp	r3, #0
 800425c:	d013      	beq.n	8004286 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800425e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004262:	f003 0320 	and.w	r3, r3, #32
 8004266:	2b00      	cmp	r3, #0
 8004268:	d105      	bne.n	8004276 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800426a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800426e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d007      	beq.n	8004286 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800428c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800429a:	2b40      	cmp	r3, #64	@ 0x40
 800429c:	d005      	beq.n	80042aa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800429e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042a2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d054      	beq.n	8004354 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 fef9 	bl	80050a2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042ba:	2b40      	cmp	r3, #64	@ 0x40
 80042bc:	d146      	bne.n	800434c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	3308      	adds	r3, #8
 80042c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80042cc:	e853 3f00 	ldrex	r3, [r3]
 80042d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80042d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80042d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	3308      	adds	r3, #8
 80042e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80042ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80042ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80042f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80042fa:	e841 2300 	strex	r3, r2, [r1]
 80042fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004302:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1d9      	bne.n	80042be <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004310:	2b00      	cmp	r3, #0
 8004312:	d017      	beq.n	8004344 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800431a:	4a15      	ldr	r2, [pc, #84]	@ (8004370 <HAL_UART_IRQHandler+0x2c0>)
 800431c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004324:	4618      	mov	r0, r3
 8004326:	f7fd f925 	bl	8001574 <HAL_DMA_Abort_IT>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d019      	beq.n	8004364 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800433e:	4610      	mov	r0, r2
 8004340:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004342:	e00f      	b.n	8004364 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 f9e1 	bl	800470c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800434a:	e00b      	b.n	8004364 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 f9dd 	bl	800470c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004352:	e007      	b.n	8004364 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 f9d9 	bl	800470c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004362:	e1bf      	b.n	80046e4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004364:	bf00      	nop
    return;
 8004366:	e1bd      	b.n	80046e4 <HAL_UART_IRQHandler+0x634>
 8004368:	10000001 	.word	0x10000001
 800436c:	04000120 	.word	0x04000120
 8004370:	0800516f 	.word	0x0800516f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004378:	2b01      	cmp	r3, #1
 800437a:	f040 8153 	bne.w	8004624 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800437e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004382:	f003 0310 	and.w	r3, r3, #16
 8004386:	2b00      	cmp	r3, #0
 8004388:	f000 814c 	beq.w	8004624 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800438c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004390:	f003 0310 	and.w	r3, r3, #16
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 8145 	beq.w	8004624 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2210      	movs	r2, #16
 80043a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ac:	2b40      	cmp	r3, #64	@ 0x40
 80043ae:	f040 80bb 	bne.w	8004528 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80043c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 818f 	beq.w	80046e8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80043d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80043d4:	429a      	cmp	r2, r3
 80043d6:	f080 8187 	bcs.w	80046e8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80043e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0320 	and.w	r3, r3, #32
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f040 8087 	bne.w	8004506 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004400:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004404:	e853 3f00 	ldrex	r3, [r3]
 8004408:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800440c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004410:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004414:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	461a      	mov	r2, r3
 800441e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004422:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004426:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800442e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004432:	e841 2300 	strex	r3, r2, [r1]
 8004436:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800443a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1da      	bne.n	80043f8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	3308      	adds	r3, #8
 8004448:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800444c:	e853 3f00 	ldrex	r3, [r3]
 8004450:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004452:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004454:	f023 0301 	bic.w	r3, r3, #1
 8004458:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	3308      	adds	r3, #8
 8004462:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004466:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800446a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800446e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004472:	e841 2300 	strex	r3, r2, [r1]
 8004476:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004478:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1e1      	bne.n	8004442 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	3308      	adds	r3, #8
 8004484:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004486:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004488:	e853 3f00 	ldrex	r3, [r3]
 800448c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800448e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004490:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004494:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	3308      	adds	r3, #8
 800449e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80044a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80044a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80044a8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80044aa:	e841 2300 	strex	r3, r2, [r1]
 80044ae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80044b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1e3      	bne.n	800447e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2220      	movs	r2, #32
 80044ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044cc:	e853 3f00 	ldrex	r3, [r3]
 80044d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80044d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044d4:	f023 0310 	bic.w	r3, r3, #16
 80044d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	461a      	mov	r2, r3
 80044e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80044e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80044e8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80044ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80044ee:	e841 2300 	strex	r3, r2, [r1]
 80044f2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80044f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1e4      	bne.n	80044c4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004500:	4618      	mov	r0, r3
 8004502:	f7fc ffde 	bl	80014c2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2202      	movs	r2, #2
 800450a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004518:	b29b      	uxth	r3, r3
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	b29b      	uxth	r3, r3
 800451e:	4619      	mov	r1, r3
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 f8fd 	bl	8004720 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004526:	e0df      	b.n	80046e8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004534:	b29b      	uxth	r3, r3
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004542:	b29b      	uxth	r3, r3
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 80d1 	beq.w	80046ec <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800454a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800454e:	2b00      	cmp	r3, #0
 8004550:	f000 80cc 	beq.w	80046ec <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800455c:	e853 3f00 	ldrex	r3, [r3]
 8004560:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004564:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004568:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	461a      	mov	r2, r3
 8004572:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004576:	647b      	str	r3, [r7, #68]	@ 0x44
 8004578:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800457c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800457e:	e841 2300 	strex	r3, r2, [r1]
 8004582:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004584:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1e4      	bne.n	8004554 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	3308      	adds	r3, #8
 8004590:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004594:	e853 3f00 	ldrex	r3, [r3]
 8004598:	623b      	str	r3, [r7, #32]
   return(result);
 800459a:	6a3b      	ldr	r3, [r7, #32]
 800459c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045a0:	f023 0301 	bic.w	r3, r3, #1
 80045a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	3308      	adds	r3, #8
 80045ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80045b2:	633a      	str	r2, [r7, #48]	@ 0x30
 80045b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045ba:	e841 2300 	strex	r3, r2, [r1]
 80045be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80045c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1e1      	bne.n	800458a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2220      	movs	r2, #32
 80045ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	e853 3f00 	ldrex	r3, [r3]
 80045e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f023 0310 	bic.w	r3, r3, #16
 80045ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	461a      	mov	r2, r3
 80045f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80045fc:	61fb      	str	r3, [r7, #28]
 80045fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004600:	69b9      	ldr	r1, [r7, #24]
 8004602:	69fa      	ldr	r2, [r7, #28]
 8004604:	e841 2300 	strex	r3, r2, [r1]
 8004608:	617b      	str	r3, [r7, #20]
   return(result);
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1e4      	bne.n	80045da <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2202      	movs	r2, #2
 8004614:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004616:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800461a:	4619      	mov	r1, r3
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 f87f 	bl	8004720 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004622:	e063      	b.n	80046ec <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004628:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00e      	beq.n	800464e <HAL_UART_IRQHandler+0x59e>
 8004630:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004634:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d008      	beq.n	800464e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004644:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 fdd2 	bl	80051f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800464c:	e051      	b.n	80046f2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800464e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004656:	2b00      	cmp	r3, #0
 8004658:	d014      	beq.n	8004684 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800465a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800465e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004662:	2b00      	cmp	r3, #0
 8004664:	d105      	bne.n	8004672 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004666:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800466a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d008      	beq.n	8004684 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004676:	2b00      	cmp	r3, #0
 8004678:	d03a      	beq.n	80046f0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	4798      	blx	r3
    }
    return;
 8004682:	e035      	b.n	80046f0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004688:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800468c:	2b00      	cmp	r3, #0
 800468e:	d009      	beq.n	80046a4 <HAL_UART_IRQHandler+0x5f4>
 8004690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004698:	2b00      	cmp	r3, #0
 800469a:	d003      	beq.n	80046a4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f000 fd7c 	bl	800519a <UART_EndTransmit_IT>
    return;
 80046a2:	e026      	b.n	80046f2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80046a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d009      	beq.n	80046c4 <HAL_UART_IRQHandler+0x614>
 80046b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046b4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d003      	beq.n	80046c4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 fdab 	bl	8005218 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80046c2:	e016      	b.n	80046f2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80046c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d010      	beq.n	80046f2 <HAL_UART_IRQHandler+0x642>
 80046d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	da0c      	bge.n	80046f2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 fd93 	bl	8005204 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80046de:	e008      	b.n	80046f2 <HAL_UART_IRQHandler+0x642>
      return;
 80046e0:	bf00      	nop
 80046e2:	e006      	b.n	80046f2 <HAL_UART_IRQHandler+0x642>
    return;
 80046e4:	bf00      	nop
 80046e6:	e004      	b.n	80046f2 <HAL_UART_IRQHandler+0x642>
      return;
 80046e8:	bf00      	nop
 80046ea:	e002      	b.n	80046f2 <HAL_UART_IRQHandler+0x642>
      return;
 80046ec:	bf00      	nop
 80046ee:	e000      	b.n	80046f2 <HAL_UART_IRQHandler+0x642>
    return;
 80046f0:	bf00      	nop
  }
}
 80046f2:	37e8      	adds	r7, #232	@ 0xe8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	460b      	mov	r3, r1
 800472a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004738:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800473c:	b08c      	sub	sp, #48	@ 0x30
 800473e:	af00      	add	r7, sp, #0
 8004740:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004742:	2300      	movs	r3, #0
 8004744:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	689a      	ldr	r2, [r3, #8]
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	431a      	orrs	r2, r3
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	431a      	orrs	r2, r3
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	69db      	ldr	r3, [r3, #28]
 800475c:	4313      	orrs	r3, r2
 800475e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	4baa      	ldr	r3, [pc, #680]	@ (8004a10 <UART_SetConfig+0x2d8>)
 8004768:	4013      	ands	r3, r2
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	6812      	ldr	r2, [r2, #0]
 800476e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004770:	430b      	orrs	r3, r1
 8004772:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	68da      	ldr	r2, [r3, #12]
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	430a      	orrs	r2, r1
 8004788:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a9f      	ldr	r2, [pc, #636]	@ (8004a14 <UART_SetConfig+0x2dc>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d004      	beq.n	80047a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047a0:	4313      	orrs	r3, r2
 80047a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80047ae:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	6812      	ldr	r2, [r2, #0]
 80047b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047b8:	430b      	orrs	r3, r1
 80047ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c2:	f023 010f 	bic.w	r1, r3, #15
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	430a      	orrs	r2, r1
 80047d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a90      	ldr	r2, [pc, #576]	@ (8004a18 <UART_SetConfig+0x2e0>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d125      	bne.n	8004828 <UART_SetConfig+0xf0>
 80047dc:	4b8f      	ldr	r3, [pc, #572]	@ (8004a1c <UART_SetConfig+0x2e4>)
 80047de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047e2:	f003 0303 	and.w	r3, r3, #3
 80047e6:	2b03      	cmp	r3, #3
 80047e8:	d81a      	bhi.n	8004820 <UART_SetConfig+0xe8>
 80047ea:	a201      	add	r2, pc, #4	@ (adr r2, 80047f0 <UART_SetConfig+0xb8>)
 80047ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f0:	08004801 	.word	0x08004801
 80047f4:	08004811 	.word	0x08004811
 80047f8:	08004809 	.word	0x08004809
 80047fc:	08004819 	.word	0x08004819
 8004800:	2301      	movs	r3, #1
 8004802:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004806:	e116      	b.n	8004a36 <UART_SetConfig+0x2fe>
 8004808:	2302      	movs	r3, #2
 800480a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800480e:	e112      	b.n	8004a36 <UART_SetConfig+0x2fe>
 8004810:	2304      	movs	r3, #4
 8004812:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004816:	e10e      	b.n	8004a36 <UART_SetConfig+0x2fe>
 8004818:	2308      	movs	r3, #8
 800481a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800481e:	e10a      	b.n	8004a36 <UART_SetConfig+0x2fe>
 8004820:	2310      	movs	r3, #16
 8004822:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004826:	e106      	b.n	8004a36 <UART_SetConfig+0x2fe>
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a7c      	ldr	r2, [pc, #496]	@ (8004a20 <UART_SetConfig+0x2e8>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d138      	bne.n	80048a4 <UART_SetConfig+0x16c>
 8004832:	4b7a      	ldr	r3, [pc, #488]	@ (8004a1c <UART_SetConfig+0x2e4>)
 8004834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004838:	f003 030c 	and.w	r3, r3, #12
 800483c:	2b0c      	cmp	r3, #12
 800483e:	d82d      	bhi.n	800489c <UART_SetConfig+0x164>
 8004840:	a201      	add	r2, pc, #4	@ (adr r2, 8004848 <UART_SetConfig+0x110>)
 8004842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004846:	bf00      	nop
 8004848:	0800487d 	.word	0x0800487d
 800484c:	0800489d 	.word	0x0800489d
 8004850:	0800489d 	.word	0x0800489d
 8004854:	0800489d 	.word	0x0800489d
 8004858:	0800488d 	.word	0x0800488d
 800485c:	0800489d 	.word	0x0800489d
 8004860:	0800489d 	.word	0x0800489d
 8004864:	0800489d 	.word	0x0800489d
 8004868:	08004885 	.word	0x08004885
 800486c:	0800489d 	.word	0x0800489d
 8004870:	0800489d 	.word	0x0800489d
 8004874:	0800489d 	.word	0x0800489d
 8004878:	08004895 	.word	0x08004895
 800487c:	2300      	movs	r3, #0
 800487e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004882:	e0d8      	b.n	8004a36 <UART_SetConfig+0x2fe>
 8004884:	2302      	movs	r3, #2
 8004886:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800488a:	e0d4      	b.n	8004a36 <UART_SetConfig+0x2fe>
 800488c:	2304      	movs	r3, #4
 800488e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004892:	e0d0      	b.n	8004a36 <UART_SetConfig+0x2fe>
 8004894:	2308      	movs	r3, #8
 8004896:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800489a:	e0cc      	b.n	8004a36 <UART_SetConfig+0x2fe>
 800489c:	2310      	movs	r3, #16
 800489e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048a2:	e0c8      	b.n	8004a36 <UART_SetConfig+0x2fe>
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a5e      	ldr	r2, [pc, #376]	@ (8004a24 <UART_SetConfig+0x2ec>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d125      	bne.n	80048fa <UART_SetConfig+0x1c2>
 80048ae:	4b5b      	ldr	r3, [pc, #364]	@ (8004a1c <UART_SetConfig+0x2e4>)
 80048b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048b4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80048b8:	2b30      	cmp	r3, #48	@ 0x30
 80048ba:	d016      	beq.n	80048ea <UART_SetConfig+0x1b2>
 80048bc:	2b30      	cmp	r3, #48	@ 0x30
 80048be:	d818      	bhi.n	80048f2 <UART_SetConfig+0x1ba>
 80048c0:	2b20      	cmp	r3, #32
 80048c2:	d00a      	beq.n	80048da <UART_SetConfig+0x1a2>
 80048c4:	2b20      	cmp	r3, #32
 80048c6:	d814      	bhi.n	80048f2 <UART_SetConfig+0x1ba>
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d002      	beq.n	80048d2 <UART_SetConfig+0x19a>
 80048cc:	2b10      	cmp	r3, #16
 80048ce:	d008      	beq.n	80048e2 <UART_SetConfig+0x1aa>
 80048d0:	e00f      	b.n	80048f2 <UART_SetConfig+0x1ba>
 80048d2:	2300      	movs	r3, #0
 80048d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048d8:	e0ad      	b.n	8004a36 <UART_SetConfig+0x2fe>
 80048da:	2302      	movs	r3, #2
 80048dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048e0:	e0a9      	b.n	8004a36 <UART_SetConfig+0x2fe>
 80048e2:	2304      	movs	r3, #4
 80048e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048e8:	e0a5      	b.n	8004a36 <UART_SetConfig+0x2fe>
 80048ea:	2308      	movs	r3, #8
 80048ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048f0:	e0a1      	b.n	8004a36 <UART_SetConfig+0x2fe>
 80048f2:	2310      	movs	r3, #16
 80048f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048f8:	e09d      	b.n	8004a36 <UART_SetConfig+0x2fe>
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a4a      	ldr	r2, [pc, #296]	@ (8004a28 <UART_SetConfig+0x2f0>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d125      	bne.n	8004950 <UART_SetConfig+0x218>
 8004904:	4b45      	ldr	r3, [pc, #276]	@ (8004a1c <UART_SetConfig+0x2e4>)
 8004906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800490a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800490e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004910:	d016      	beq.n	8004940 <UART_SetConfig+0x208>
 8004912:	2bc0      	cmp	r3, #192	@ 0xc0
 8004914:	d818      	bhi.n	8004948 <UART_SetConfig+0x210>
 8004916:	2b80      	cmp	r3, #128	@ 0x80
 8004918:	d00a      	beq.n	8004930 <UART_SetConfig+0x1f8>
 800491a:	2b80      	cmp	r3, #128	@ 0x80
 800491c:	d814      	bhi.n	8004948 <UART_SetConfig+0x210>
 800491e:	2b00      	cmp	r3, #0
 8004920:	d002      	beq.n	8004928 <UART_SetConfig+0x1f0>
 8004922:	2b40      	cmp	r3, #64	@ 0x40
 8004924:	d008      	beq.n	8004938 <UART_SetConfig+0x200>
 8004926:	e00f      	b.n	8004948 <UART_SetConfig+0x210>
 8004928:	2300      	movs	r3, #0
 800492a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800492e:	e082      	b.n	8004a36 <UART_SetConfig+0x2fe>
 8004930:	2302      	movs	r3, #2
 8004932:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004936:	e07e      	b.n	8004a36 <UART_SetConfig+0x2fe>
 8004938:	2304      	movs	r3, #4
 800493a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800493e:	e07a      	b.n	8004a36 <UART_SetConfig+0x2fe>
 8004940:	2308      	movs	r3, #8
 8004942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004946:	e076      	b.n	8004a36 <UART_SetConfig+0x2fe>
 8004948:	2310      	movs	r3, #16
 800494a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800494e:	e072      	b.n	8004a36 <UART_SetConfig+0x2fe>
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a35      	ldr	r2, [pc, #212]	@ (8004a2c <UART_SetConfig+0x2f4>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d12a      	bne.n	80049b0 <UART_SetConfig+0x278>
 800495a:	4b30      	ldr	r3, [pc, #192]	@ (8004a1c <UART_SetConfig+0x2e4>)
 800495c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004960:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004964:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004968:	d01a      	beq.n	80049a0 <UART_SetConfig+0x268>
 800496a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800496e:	d81b      	bhi.n	80049a8 <UART_SetConfig+0x270>
 8004970:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004974:	d00c      	beq.n	8004990 <UART_SetConfig+0x258>
 8004976:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800497a:	d815      	bhi.n	80049a8 <UART_SetConfig+0x270>
 800497c:	2b00      	cmp	r3, #0
 800497e:	d003      	beq.n	8004988 <UART_SetConfig+0x250>
 8004980:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004984:	d008      	beq.n	8004998 <UART_SetConfig+0x260>
 8004986:	e00f      	b.n	80049a8 <UART_SetConfig+0x270>
 8004988:	2300      	movs	r3, #0
 800498a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800498e:	e052      	b.n	8004a36 <UART_SetConfig+0x2fe>
 8004990:	2302      	movs	r3, #2
 8004992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004996:	e04e      	b.n	8004a36 <UART_SetConfig+0x2fe>
 8004998:	2304      	movs	r3, #4
 800499a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800499e:	e04a      	b.n	8004a36 <UART_SetConfig+0x2fe>
 80049a0:	2308      	movs	r3, #8
 80049a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049a6:	e046      	b.n	8004a36 <UART_SetConfig+0x2fe>
 80049a8:	2310      	movs	r3, #16
 80049aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049ae:	e042      	b.n	8004a36 <UART_SetConfig+0x2fe>
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a17      	ldr	r2, [pc, #92]	@ (8004a14 <UART_SetConfig+0x2dc>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d13a      	bne.n	8004a30 <UART_SetConfig+0x2f8>
 80049ba:	4b18      	ldr	r3, [pc, #96]	@ (8004a1c <UART_SetConfig+0x2e4>)
 80049bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049c0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80049c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80049c8:	d01a      	beq.n	8004a00 <UART_SetConfig+0x2c8>
 80049ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80049ce:	d81b      	bhi.n	8004a08 <UART_SetConfig+0x2d0>
 80049d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049d4:	d00c      	beq.n	80049f0 <UART_SetConfig+0x2b8>
 80049d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049da:	d815      	bhi.n	8004a08 <UART_SetConfig+0x2d0>
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d003      	beq.n	80049e8 <UART_SetConfig+0x2b0>
 80049e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049e4:	d008      	beq.n	80049f8 <UART_SetConfig+0x2c0>
 80049e6:	e00f      	b.n	8004a08 <UART_SetConfig+0x2d0>
 80049e8:	2300      	movs	r3, #0
 80049ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049ee:	e022      	b.n	8004a36 <UART_SetConfig+0x2fe>
 80049f0:	2302      	movs	r3, #2
 80049f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049f6:	e01e      	b.n	8004a36 <UART_SetConfig+0x2fe>
 80049f8:	2304      	movs	r3, #4
 80049fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049fe:	e01a      	b.n	8004a36 <UART_SetConfig+0x2fe>
 8004a00:	2308      	movs	r3, #8
 8004a02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a06:	e016      	b.n	8004a36 <UART_SetConfig+0x2fe>
 8004a08:	2310      	movs	r3, #16
 8004a0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a0e:	e012      	b.n	8004a36 <UART_SetConfig+0x2fe>
 8004a10:	cfff69f3 	.word	0xcfff69f3
 8004a14:	40008000 	.word	0x40008000
 8004a18:	40013800 	.word	0x40013800
 8004a1c:	40021000 	.word	0x40021000
 8004a20:	40004400 	.word	0x40004400
 8004a24:	40004800 	.word	0x40004800
 8004a28:	40004c00 	.word	0x40004c00
 8004a2c:	40005000 	.word	0x40005000
 8004a30:	2310      	movs	r3, #16
 8004a32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4aae      	ldr	r2, [pc, #696]	@ (8004cf4 <UART_SetConfig+0x5bc>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	f040 8097 	bne.w	8004b70 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a42:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004a46:	2b08      	cmp	r3, #8
 8004a48:	d823      	bhi.n	8004a92 <UART_SetConfig+0x35a>
 8004a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8004a50 <UART_SetConfig+0x318>)
 8004a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a50:	08004a75 	.word	0x08004a75
 8004a54:	08004a93 	.word	0x08004a93
 8004a58:	08004a7d 	.word	0x08004a7d
 8004a5c:	08004a93 	.word	0x08004a93
 8004a60:	08004a83 	.word	0x08004a83
 8004a64:	08004a93 	.word	0x08004a93
 8004a68:	08004a93 	.word	0x08004a93
 8004a6c:	08004a93 	.word	0x08004a93
 8004a70:	08004a8b 	.word	0x08004a8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a74:	f7fe fba6 	bl	80031c4 <HAL_RCC_GetPCLK1Freq>
 8004a78:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a7a:	e010      	b.n	8004a9e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a7c:	4b9e      	ldr	r3, [pc, #632]	@ (8004cf8 <UART_SetConfig+0x5c0>)
 8004a7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004a80:	e00d      	b.n	8004a9e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a82:	f7fe fb31 	bl	80030e8 <HAL_RCC_GetSysClockFreq>
 8004a86:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a88:	e009      	b.n	8004a9e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004a90:	e005      	b.n	8004a9e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004a9c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f000 8130 	beq.w	8004d06 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aaa:	4a94      	ldr	r2, [pc, #592]	@ (8004cfc <UART_SetConfig+0x5c4>)
 8004aac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ab8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	685a      	ldr	r2, [r3, #4]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	005b      	lsls	r3, r3, #1
 8004ac2:	4413      	add	r3, r2
 8004ac4:	69ba      	ldr	r2, [r7, #24]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d305      	bcc.n	8004ad6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ad0:	69ba      	ldr	r2, [r7, #24]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d903      	bls.n	8004ade <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004adc:	e113      	b.n	8004d06 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	60bb      	str	r3, [r7, #8]
 8004ae4:	60fa      	str	r2, [r7, #12]
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aea:	4a84      	ldr	r2, [pc, #528]	@ (8004cfc <UART_SetConfig+0x5c4>)
 8004aec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	2200      	movs	r2, #0
 8004af4:	603b      	str	r3, [r7, #0]
 8004af6:	607a      	str	r2, [r7, #4]
 8004af8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004afc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004b00:	f7fb fbde 	bl	80002c0 <__aeabi_uldivmod>
 8004b04:	4602      	mov	r2, r0
 8004b06:	460b      	mov	r3, r1
 8004b08:	4610      	mov	r0, r2
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	f04f 0200 	mov.w	r2, #0
 8004b10:	f04f 0300 	mov.w	r3, #0
 8004b14:	020b      	lsls	r3, r1, #8
 8004b16:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004b1a:	0202      	lsls	r2, r0, #8
 8004b1c:	6979      	ldr	r1, [r7, #20]
 8004b1e:	6849      	ldr	r1, [r1, #4]
 8004b20:	0849      	lsrs	r1, r1, #1
 8004b22:	2000      	movs	r0, #0
 8004b24:	460c      	mov	r4, r1
 8004b26:	4605      	mov	r5, r0
 8004b28:	eb12 0804 	adds.w	r8, r2, r4
 8004b2c:	eb43 0905 	adc.w	r9, r3, r5
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	469a      	mov	sl, r3
 8004b38:	4693      	mov	fp, r2
 8004b3a:	4652      	mov	r2, sl
 8004b3c:	465b      	mov	r3, fp
 8004b3e:	4640      	mov	r0, r8
 8004b40:	4649      	mov	r1, r9
 8004b42:	f7fb fbbd 	bl	80002c0 <__aeabi_uldivmod>
 8004b46:	4602      	mov	r2, r0
 8004b48:	460b      	mov	r3, r1
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b4e:	6a3b      	ldr	r3, [r7, #32]
 8004b50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b54:	d308      	bcc.n	8004b68 <UART_SetConfig+0x430>
 8004b56:	6a3b      	ldr	r3, [r7, #32]
 8004b58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b5c:	d204      	bcs.n	8004b68 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	6a3a      	ldr	r2, [r7, #32]
 8004b64:	60da      	str	r2, [r3, #12]
 8004b66:	e0ce      	b.n	8004d06 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004b6e:	e0ca      	b.n	8004d06 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	69db      	ldr	r3, [r3, #28]
 8004b74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b78:	d166      	bne.n	8004c48 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004b7a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004b7e:	2b08      	cmp	r3, #8
 8004b80:	d827      	bhi.n	8004bd2 <UART_SetConfig+0x49a>
 8004b82:	a201      	add	r2, pc, #4	@ (adr r2, 8004b88 <UART_SetConfig+0x450>)
 8004b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b88:	08004bad 	.word	0x08004bad
 8004b8c:	08004bb5 	.word	0x08004bb5
 8004b90:	08004bbd 	.word	0x08004bbd
 8004b94:	08004bd3 	.word	0x08004bd3
 8004b98:	08004bc3 	.word	0x08004bc3
 8004b9c:	08004bd3 	.word	0x08004bd3
 8004ba0:	08004bd3 	.word	0x08004bd3
 8004ba4:	08004bd3 	.word	0x08004bd3
 8004ba8:	08004bcb 	.word	0x08004bcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bac:	f7fe fb0a 	bl	80031c4 <HAL_RCC_GetPCLK1Freq>
 8004bb0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004bb2:	e014      	b.n	8004bde <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bb4:	f7fe fb1c 	bl	80031f0 <HAL_RCC_GetPCLK2Freq>
 8004bb8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004bba:	e010      	b.n	8004bde <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bbc:	4b4e      	ldr	r3, [pc, #312]	@ (8004cf8 <UART_SetConfig+0x5c0>)
 8004bbe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004bc0:	e00d      	b.n	8004bde <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bc2:	f7fe fa91 	bl	80030e8 <HAL_RCC_GetSysClockFreq>
 8004bc6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004bc8:	e009      	b.n	8004bde <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004bd0:	e005      	b.n	8004bde <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004bdc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f000 8090 	beq.w	8004d06 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bea:	4a44      	ldr	r2, [pc, #272]	@ (8004cfc <UART_SetConfig+0x5c4>)
 8004bec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bf8:	005a      	lsls	r2, r3, #1
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	085b      	lsrs	r3, r3, #1
 8004c00:	441a      	add	r2, r3
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c0a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	2b0f      	cmp	r3, #15
 8004c10:	d916      	bls.n	8004c40 <UART_SetConfig+0x508>
 8004c12:	6a3b      	ldr	r3, [r7, #32]
 8004c14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c18:	d212      	bcs.n	8004c40 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c1a:	6a3b      	ldr	r3, [r7, #32]
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	f023 030f 	bic.w	r3, r3, #15
 8004c22:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c24:	6a3b      	ldr	r3, [r7, #32]
 8004c26:	085b      	lsrs	r3, r3, #1
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	f003 0307 	and.w	r3, r3, #7
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	8bfb      	ldrh	r3, [r7, #30]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	8bfa      	ldrh	r2, [r7, #30]
 8004c3c:	60da      	str	r2, [r3, #12]
 8004c3e:	e062      	b.n	8004d06 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004c46:	e05e      	b.n	8004d06 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c48:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004c4c:	2b08      	cmp	r3, #8
 8004c4e:	d828      	bhi.n	8004ca2 <UART_SetConfig+0x56a>
 8004c50:	a201      	add	r2, pc, #4	@ (adr r2, 8004c58 <UART_SetConfig+0x520>)
 8004c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c56:	bf00      	nop
 8004c58:	08004c7d 	.word	0x08004c7d
 8004c5c:	08004c85 	.word	0x08004c85
 8004c60:	08004c8d 	.word	0x08004c8d
 8004c64:	08004ca3 	.word	0x08004ca3
 8004c68:	08004c93 	.word	0x08004c93
 8004c6c:	08004ca3 	.word	0x08004ca3
 8004c70:	08004ca3 	.word	0x08004ca3
 8004c74:	08004ca3 	.word	0x08004ca3
 8004c78:	08004c9b 	.word	0x08004c9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c7c:	f7fe faa2 	bl	80031c4 <HAL_RCC_GetPCLK1Freq>
 8004c80:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c82:	e014      	b.n	8004cae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c84:	f7fe fab4 	bl	80031f0 <HAL_RCC_GetPCLK2Freq>
 8004c88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c8a:	e010      	b.n	8004cae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8004cf8 <UART_SetConfig+0x5c0>)
 8004c8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004c90:	e00d      	b.n	8004cae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c92:	f7fe fa29 	bl	80030e8 <HAL_RCC_GetSysClockFreq>
 8004c96:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c98:	e009      	b.n	8004cae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ca0:	e005      	b.n	8004cae <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004cac:	bf00      	nop
    }

    if (pclk != 0U)
 8004cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d028      	beq.n	8004d06 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb8:	4a10      	ldr	r2, [pc, #64]	@ (8004cfc <UART_SetConfig+0x5c4>)
 8004cba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc2:	fbb3 f2f2 	udiv	r2, r3, r2
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	085b      	lsrs	r3, r3, #1
 8004ccc:	441a      	add	r2, r3
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cd8:	6a3b      	ldr	r3, [r7, #32]
 8004cda:	2b0f      	cmp	r3, #15
 8004cdc:	d910      	bls.n	8004d00 <UART_SetConfig+0x5c8>
 8004cde:	6a3b      	ldr	r3, [r7, #32]
 8004ce0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ce4:	d20c      	bcs.n	8004d00 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ce6:	6a3b      	ldr	r3, [r7, #32]
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	60da      	str	r2, [r3, #12]
 8004cf0:	e009      	b.n	8004d06 <UART_SetConfig+0x5ce>
 8004cf2:	bf00      	nop
 8004cf4:	40008000 	.word	0x40008000
 8004cf8:	00f42400 	.word	0x00f42400
 8004cfc:	08006600 	.word	0x08006600
      }
      else
      {
        ret = HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004d22:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3730      	adds	r7, #48	@ 0x30
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004d30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d3c:	f003 0308 	and.w	r3, r3, #8
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00a      	beq.n	8004d5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	430a      	orrs	r2, r1
 8004d58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00a      	beq.n	8004d7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00a      	beq.n	8004d9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da2:	f003 0304 	and.w	r3, r3, #4
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00a      	beq.n	8004dc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc4:	f003 0310 	and.w	r3, r3, #16
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d00a      	beq.n	8004de2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	430a      	orrs	r2, r1
 8004de0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de6:	f003 0320 	and.w	r3, r3, #32
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00a      	beq.n	8004e04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	430a      	orrs	r2, r1
 8004e02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d01a      	beq.n	8004e46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e2e:	d10a      	bne.n	8004e46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	430a      	orrs	r2, r1
 8004e44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00a      	beq.n	8004e68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	430a      	orrs	r2, r1
 8004e66:	605a      	str	r2, [r3, #4]
  }
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b098      	sub	sp, #96	@ 0x60
 8004e78:	af02      	add	r7, sp, #8
 8004e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e84:	f7fc f9e0 	bl	8001248 <HAL_GetTick>
 8004e88:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0308 	and.w	r3, r3, #8
 8004e94:	2b08      	cmp	r3, #8
 8004e96:	d12f      	bne.n	8004ef8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f88e 	bl	8004fc8 <UART_WaitOnFlagUntilTimeout>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d022      	beq.n	8004ef8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eba:	e853 3f00 	ldrex	r3, [r3]
 8004ebe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ec2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ec6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	461a      	mov	r2, r3
 8004ece:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ed0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ed2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ed6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ed8:	e841 2300 	strex	r3, r2, [r1]
 8004edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ede:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1e6      	bne.n	8004eb2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e063      	b.n	8004fc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0304 	and.w	r3, r3, #4
 8004f02:	2b04      	cmp	r3, #4
 8004f04:	d149      	bne.n	8004f9a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f06:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 f857 	bl	8004fc8 <UART_WaitOnFlagUntilTimeout>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d03c      	beq.n	8004f9a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f28:	e853 3f00 	ldrex	r3, [r3]
 8004f2c:	623b      	str	r3, [r7, #32]
   return(result);
 8004f2e:	6a3b      	ldr	r3, [r7, #32]
 8004f30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f40:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f46:	e841 2300 	strex	r3, r2, [r1]
 8004f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1e6      	bne.n	8004f20 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	3308      	adds	r3, #8
 8004f58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	e853 3f00 	ldrex	r3, [r3]
 8004f60:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f023 0301 	bic.w	r3, r3, #1
 8004f68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	3308      	adds	r3, #8
 8004f70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f72:	61fa      	str	r2, [r7, #28]
 8004f74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f76:	69b9      	ldr	r1, [r7, #24]
 8004f78:	69fa      	ldr	r2, [r7, #28]
 8004f7a:	e841 2300 	strex	r3, r2, [r1]
 8004f7e:	617b      	str	r3, [r7, #20]
   return(result);
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1e5      	bne.n	8004f52 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2220      	movs	r2, #32
 8004f8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e012      	b.n	8004fc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2220      	movs	r2, #32
 8004f9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2220      	movs	r2, #32
 8004fa6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3758      	adds	r7, #88	@ 0x58
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	603b      	str	r3, [r7, #0]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fd8:	e04f      	b.n	800507a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe0:	d04b      	beq.n	800507a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fe2:	f7fc f931 	bl	8001248 <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d302      	bcc.n	8004ff8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d101      	bne.n	8004ffc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e04e      	b.n	800509a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0304 	and.w	r3, r3, #4
 8005006:	2b00      	cmp	r3, #0
 8005008:	d037      	beq.n	800507a <UART_WaitOnFlagUntilTimeout+0xb2>
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	2b80      	cmp	r3, #128	@ 0x80
 800500e:	d034      	beq.n	800507a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	2b40      	cmp	r3, #64	@ 0x40
 8005014:	d031      	beq.n	800507a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	69db      	ldr	r3, [r3, #28]
 800501c:	f003 0308 	and.w	r3, r3, #8
 8005020:	2b08      	cmp	r3, #8
 8005022:	d110      	bne.n	8005046 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2208      	movs	r2, #8
 800502a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f000 f838 	bl	80050a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2208      	movs	r2, #8
 8005036:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e029      	b.n	800509a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	69db      	ldr	r3, [r3, #28]
 800504c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005050:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005054:	d111      	bne.n	800507a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800505e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 f81e 	bl	80050a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2220      	movs	r2, #32
 800506a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e00f      	b.n	800509a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	69da      	ldr	r2, [r3, #28]
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	4013      	ands	r3, r2
 8005084:	68ba      	ldr	r2, [r7, #8]
 8005086:	429a      	cmp	r2, r3
 8005088:	bf0c      	ite	eq
 800508a:	2301      	moveq	r3, #1
 800508c:	2300      	movne	r3, #0
 800508e:	b2db      	uxtb	r3, r3
 8005090:	461a      	mov	r2, r3
 8005092:	79fb      	ldrb	r3, [r7, #7]
 8005094:	429a      	cmp	r2, r3
 8005096:	d0a0      	beq.n	8004fda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3710      	adds	r7, #16
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050a2:	b480      	push	{r7}
 80050a4:	b095      	sub	sp, #84	@ 0x54
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050b2:	e853 3f00 	ldrex	r3, [r3]
 80050b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80050b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	461a      	mov	r2, r3
 80050c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80050ca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80050ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050d0:	e841 2300 	strex	r3, r2, [r1]
 80050d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80050d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1e6      	bne.n	80050aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	3308      	adds	r3, #8
 80050e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e4:	6a3b      	ldr	r3, [r7, #32]
 80050e6:	e853 3f00 	ldrex	r3, [r3]
 80050ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050f2:	f023 0301 	bic.w	r3, r3, #1
 80050f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	3308      	adds	r3, #8
 80050fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005100:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005102:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005104:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005106:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005108:	e841 2300 	strex	r3, r2, [r1]
 800510c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800510e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1e3      	bne.n	80050dc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005118:	2b01      	cmp	r3, #1
 800511a:	d118      	bne.n	800514e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	e853 3f00 	ldrex	r3, [r3]
 8005128:	60bb      	str	r3, [r7, #8]
   return(result);
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	f023 0310 	bic.w	r3, r3, #16
 8005130:	647b      	str	r3, [r7, #68]	@ 0x44
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	461a      	mov	r2, r3
 8005138:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800513a:	61bb      	str	r3, [r7, #24]
 800513c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513e:	6979      	ldr	r1, [r7, #20]
 8005140:	69ba      	ldr	r2, [r7, #24]
 8005142:	e841 2300 	strex	r3, r2, [r1]
 8005146:	613b      	str	r3, [r7, #16]
   return(result);
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1e6      	bne.n	800511c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2220      	movs	r2, #32
 8005152:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005162:	bf00      	nop
 8005164:	3754      	adds	r7, #84	@ 0x54
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr

0800516e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b084      	sub	sp, #16
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800517a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f7ff fabd 	bl	800470c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005192:	bf00      	nop
 8005194:	3710      	adds	r7, #16
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b088      	sub	sp, #32
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	e853 3f00 	ldrex	r3, [r3]
 80051ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051b6:	61fb      	str	r3, [r7, #28]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	461a      	mov	r2, r3
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	61bb      	str	r3, [r7, #24]
 80051c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c4:	6979      	ldr	r1, [r7, #20]
 80051c6:	69ba      	ldr	r2, [r7, #24]
 80051c8:	e841 2300 	strex	r3, r2, [r1]
 80051cc:	613b      	str	r3, [r7, #16]
   return(result);
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1e6      	bne.n	80051a2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2220      	movs	r2, #32
 80051d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f7ff fa88 	bl	80046f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051e8:	bf00      	nop
 80051ea:	3720      	adds	r7, #32
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800520c:	bf00      	nop
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800523a:	2b01      	cmp	r3, #1
 800523c:	d101      	bne.n	8005242 <HAL_UARTEx_DisableFifoMode+0x16>
 800523e:	2302      	movs	r3, #2
 8005240:	e027      	b.n	8005292 <HAL_UARTEx_DisableFifoMode+0x66>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2224      	movs	r2, #36	@ 0x24
 800524e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f022 0201 	bic.w	r2, r2, #1
 8005268:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005270:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2220      	movs	r2, #32
 8005284:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3714      	adds	r7, #20
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b084      	sub	sp, #16
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
 80052a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d101      	bne.n	80052b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80052b2:	2302      	movs	r3, #2
 80052b4:	e02d      	b.n	8005312 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2224      	movs	r2, #36	@ 0x24
 80052c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f022 0201 	bic.w	r2, r2, #1
 80052dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	683a      	ldr	r2, [r7, #0]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f850 	bl	8005398 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2220      	movs	r2, #32
 8005304:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b084      	sub	sp, #16
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
 8005322:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800532a:	2b01      	cmp	r3, #1
 800532c:	d101      	bne.n	8005332 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800532e:	2302      	movs	r3, #2
 8005330:	e02d      	b.n	800538e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2224      	movs	r2, #36	@ 0x24
 800533e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 0201 	bic.w	r2, r2, #1
 8005358:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	683a      	ldr	r2, [r7, #0]
 800536a:	430a      	orrs	r2, r1
 800536c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f812 	bl	8005398 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2220      	movs	r2, #32
 8005380:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
	...

08005398 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d108      	bne.n	80053ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80053b8:	e031      	b.n	800541e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80053ba:	2308      	movs	r3, #8
 80053bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80053be:	2308      	movs	r3, #8
 80053c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	0e5b      	lsrs	r3, r3, #25
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	f003 0307 	and.w	r3, r3, #7
 80053d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	0f5b      	lsrs	r3, r3, #29
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	f003 0307 	and.w	r3, r3, #7
 80053e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80053e2:	7bbb      	ldrb	r3, [r7, #14]
 80053e4:	7b3a      	ldrb	r2, [r7, #12]
 80053e6:	4911      	ldr	r1, [pc, #68]	@ (800542c <UARTEx_SetNbDataToProcess+0x94>)
 80053e8:	5c8a      	ldrb	r2, [r1, r2]
 80053ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80053ee:	7b3a      	ldrb	r2, [r7, #12]
 80053f0:	490f      	ldr	r1, [pc, #60]	@ (8005430 <UARTEx_SetNbDataToProcess+0x98>)
 80053f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80053f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005400:	7bfb      	ldrb	r3, [r7, #15]
 8005402:	7b7a      	ldrb	r2, [r7, #13]
 8005404:	4909      	ldr	r1, [pc, #36]	@ (800542c <UARTEx_SetNbDataToProcess+0x94>)
 8005406:	5c8a      	ldrb	r2, [r1, r2]
 8005408:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800540c:	7b7a      	ldrb	r2, [r7, #13]
 800540e:	4908      	ldr	r1, [pc, #32]	@ (8005430 <UARTEx_SetNbDataToProcess+0x98>)
 8005410:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005412:	fb93 f3f2 	sdiv	r3, r3, r2
 8005416:	b29a      	uxth	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800541e:	bf00      	nop
 8005420:	3714      	adds	r7, #20
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	08006618 	.word	0x08006618
 8005430:	08006620 	.word	0x08006620

08005434 <std>:
 8005434:	2300      	movs	r3, #0
 8005436:	b510      	push	{r4, lr}
 8005438:	4604      	mov	r4, r0
 800543a:	e9c0 3300 	strd	r3, r3, [r0]
 800543e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005442:	6083      	str	r3, [r0, #8]
 8005444:	8181      	strh	r1, [r0, #12]
 8005446:	6643      	str	r3, [r0, #100]	@ 0x64
 8005448:	81c2      	strh	r2, [r0, #14]
 800544a:	6183      	str	r3, [r0, #24]
 800544c:	4619      	mov	r1, r3
 800544e:	2208      	movs	r2, #8
 8005450:	305c      	adds	r0, #92	@ 0x5c
 8005452:	f000 fab5 	bl	80059c0 <memset>
 8005456:	4b0d      	ldr	r3, [pc, #52]	@ (800548c <std+0x58>)
 8005458:	6263      	str	r3, [r4, #36]	@ 0x24
 800545a:	4b0d      	ldr	r3, [pc, #52]	@ (8005490 <std+0x5c>)
 800545c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800545e:	4b0d      	ldr	r3, [pc, #52]	@ (8005494 <std+0x60>)
 8005460:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005462:	4b0d      	ldr	r3, [pc, #52]	@ (8005498 <std+0x64>)
 8005464:	6323      	str	r3, [r4, #48]	@ 0x30
 8005466:	4b0d      	ldr	r3, [pc, #52]	@ (800549c <std+0x68>)
 8005468:	6224      	str	r4, [r4, #32]
 800546a:	429c      	cmp	r4, r3
 800546c:	d006      	beq.n	800547c <std+0x48>
 800546e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005472:	4294      	cmp	r4, r2
 8005474:	d002      	beq.n	800547c <std+0x48>
 8005476:	33d0      	adds	r3, #208	@ 0xd0
 8005478:	429c      	cmp	r4, r3
 800547a:	d105      	bne.n	8005488 <std+0x54>
 800547c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005484:	f000 bb14 	b.w	8005ab0 <__retarget_lock_init_recursive>
 8005488:	bd10      	pop	{r4, pc}
 800548a:	bf00      	nop
 800548c:	08005811 	.word	0x08005811
 8005490:	08005833 	.word	0x08005833
 8005494:	0800586b 	.word	0x0800586b
 8005498:	0800588f 	.word	0x0800588f
 800549c:	20000260 	.word	0x20000260

080054a0 <stdio_exit_handler>:
 80054a0:	4a02      	ldr	r2, [pc, #8]	@ (80054ac <stdio_exit_handler+0xc>)
 80054a2:	4903      	ldr	r1, [pc, #12]	@ (80054b0 <stdio_exit_handler+0x10>)
 80054a4:	4803      	ldr	r0, [pc, #12]	@ (80054b4 <stdio_exit_handler+0x14>)
 80054a6:	f000 b869 	b.w	800557c <_fwalk_sglue>
 80054aa:	bf00      	nop
 80054ac:	2000001c 	.word	0x2000001c
 80054b0:	08006361 	.word	0x08006361
 80054b4:	2000002c 	.word	0x2000002c

080054b8 <cleanup_stdio>:
 80054b8:	6841      	ldr	r1, [r0, #4]
 80054ba:	4b0c      	ldr	r3, [pc, #48]	@ (80054ec <cleanup_stdio+0x34>)
 80054bc:	4299      	cmp	r1, r3
 80054be:	b510      	push	{r4, lr}
 80054c0:	4604      	mov	r4, r0
 80054c2:	d001      	beq.n	80054c8 <cleanup_stdio+0x10>
 80054c4:	f000 ff4c 	bl	8006360 <_fflush_r>
 80054c8:	68a1      	ldr	r1, [r4, #8]
 80054ca:	4b09      	ldr	r3, [pc, #36]	@ (80054f0 <cleanup_stdio+0x38>)
 80054cc:	4299      	cmp	r1, r3
 80054ce:	d002      	beq.n	80054d6 <cleanup_stdio+0x1e>
 80054d0:	4620      	mov	r0, r4
 80054d2:	f000 ff45 	bl	8006360 <_fflush_r>
 80054d6:	68e1      	ldr	r1, [r4, #12]
 80054d8:	4b06      	ldr	r3, [pc, #24]	@ (80054f4 <cleanup_stdio+0x3c>)
 80054da:	4299      	cmp	r1, r3
 80054dc:	d004      	beq.n	80054e8 <cleanup_stdio+0x30>
 80054de:	4620      	mov	r0, r4
 80054e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054e4:	f000 bf3c 	b.w	8006360 <_fflush_r>
 80054e8:	bd10      	pop	{r4, pc}
 80054ea:	bf00      	nop
 80054ec:	20000260 	.word	0x20000260
 80054f0:	200002c8 	.word	0x200002c8
 80054f4:	20000330 	.word	0x20000330

080054f8 <global_stdio_init.part.0>:
 80054f8:	b510      	push	{r4, lr}
 80054fa:	4b0b      	ldr	r3, [pc, #44]	@ (8005528 <global_stdio_init.part.0+0x30>)
 80054fc:	4c0b      	ldr	r4, [pc, #44]	@ (800552c <global_stdio_init.part.0+0x34>)
 80054fe:	4a0c      	ldr	r2, [pc, #48]	@ (8005530 <global_stdio_init.part.0+0x38>)
 8005500:	601a      	str	r2, [r3, #0]
 8005502:	4620      	mov	r0, r4
 8005504:	2200      	movs	r2, #0
 8005506:	2104      	movs	r1, #4
 8005508:	f7ff ff94 	bl	8005434 <std>
 800550c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005510:	2201      	movs	r2, #1
 8005512:	2109      	movs	r1, #9
 8005514:	f7ff ff8e 	bl	8005434 <std>
 8005518:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800551c:	2202      	movs	r2, #2
 800551e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005522:	2112      	movs	r1, #18
 8005524:	f7ff bf86 	b.w	8005434 <std>
 8005528:	20000398 	.word	0x20000398
 800552c:	20000260 	.word	0x20000260
 8005530:	080054a1 	.word	0x080054a1

08005534 <__sfp_lock_acquire>:
 8005534:	4801      	ldr	r0, [pc, #4]	@ (800553c <__sfp_lock_acquire+0x8>)
 8005536:	f000 babc 	b.w	8005ab2 <__retarget_lock_acquire_recursive>
 800553a:	bf00      	nop
 800553c:	200003a1 	.word	0x200003a1

08005540 <__sfp_lock_release>:
 8005540:	4801      	ldr	r0, [pc, #4]	@ (8005548 <__sfp_lock_release+0x8>)
 8005542:	f000 bab7 	b.w	8005ab4 <__retarget_lock_release_recursive>
 8005546:	bf00      	nop
 8005548:	200003a1 	.word	0x200003a1

0800554c <__sinit>:
 800554c:	b510      	push	{r4, lr}
 800554e:	4604      	mov	r4, r0
 8005550:	f7ff fff0 	bl	8005534 <__sfp_lock_acquire>
 8005554:	6a23      	ldr	r3, [r4, #32]
 8005556:	b11b      	cbz	r3, 8005560 <__sinit+0x14>
 8005558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800555c:	f7ff bff0 	b.w	8005540 <__sfp_lock_release>
 8005560:	4b04      	ldr	r3, [pc, #16]	@ (8005574 <__sinit+0x28>)
 8005562:	6223      	str	r3, [r4, #32]
 8005564:	4b04      	ldr	r3, [pc, #16]	@ (8005578 <__sinit+0x2c>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1f5      	bne.n	8005558 <__sinit+0xc>
 800556c:	f7ff ffc4 	bl	80054f8 <global_stdio_init.part.0>
 8005570:	e7f2      	b.n	8005558 <__sinit+0xc>
 8005572:	bf00      	nop
 8005574:	080054b9 	.word	0x080054b9
 8005578:	20000398 	.word	0x20000398

0800557c <_fwalk_sglue>:
 800557c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005580:	4607      	mov	r7, r0
 8005582:	4688      	mov	r8, r1
 8005584:	4614      	mov	r4, r2
 8005586:	2600      	movs	r6, #0
 8005588:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800558c:	f1b9 0901 	subs.w	r9, r9, #1
 8005590:	d505      	bpl.n	800559e <_fwalk_sglue+0x22>
 8005592:	6824      	ldr	r4, [r4, #0]
 8005594:	2c00      	cmp	r4, #0
 8005596:	d1f7      	bne.n	8005588 <_fwalk_sglue+0xc>
 8005598:	4630      	mov	r0, r6
 800559a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800559e:	89ab      	ldrh	r3, [r5, #12]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d907      	bls.n	80055b4 <_fwalk_sglue+0x38>
 80055a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80055a8:	3301      	adds	r3, #1
 80055aa:	d003      	beq.n	80055b4 <_fwalk_sglue+0x38>
 80055ac:	4629      	mov	r1, r5
 80055ae:	4638      	mov	r0, r7
 80055b0:	47c0      	blx	r8
 80055b2:	4306      	orrs	r6, r0
 80055b4:	3568      	adds	r5, #104	@ 0x68
 80055b6:	e7e9      	b.n	800558c <_fwalk_sglue+0x10>

080055b8 <iprintf>:
 80055b8:	b40f      	push	{r0, r1, r2, r3}
 80055ba:	b507      	push	{r0, r1, r2, lr}
 80055bc:	4906      	ldr	r1, [pc, #24]	@ (80055d8 <iprintf+0x20>)
 80055be:	ab04      	add	r3, sp, #16
 80055c0:	6808      	ldr	r0, [r1, #0]
 80055c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80055c6:	6881      	ldr	r1, [r0, #8]
 80055c8:	9301      	str	r3, [sp, #4]
 80055ca:	f000 fb9f 	bl	8005d0c <_vfiprintf_r>
 80055ce:	b003      	add	sp, #12
 80055d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80055d4:	b004      	add	sp, #16
 80055d6:	4770      	bx	lr
 80055d8:	20000028 	.word	0x20000028

080055dc <_puts_r>:
 80055dc:	6a03      	ldr	r3, [r0, #32]
 80055de:	b570      	push	{r4, r5, r6, lr}
 80055e0:	6884      	ldr	r4, [r0, #8]
 80055e2:	4605      	mov	r5, r0
 80055e4:	460e      	mov	r6, r1
 80055e6:	b90b      	cbnz	r3, 80055ec <_puts_r+0x10>
 80055e8:	f7ff ffb0 	bl	800554c <__sinit>
 80055ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80055ee:	07db      	lsls	r3, r3, #31
 80055f0:	d405      	bmi.n	80055fe <_puts_r+0x22>
 80055f2:	89a3      	ldrh	r3, [r4, #12]
 80055f4:	0598      	lsls	r0, r3, #22
 80055f6:	d402      	bmi.n	80055fe <_puts_r+0x22>
 80055f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80055fa:	f000 fa5a 	bl	8005ab2 <__retarget_lock_acquire_recursive>
 80055fe:	89a3      	ldrh	r3, [r4, #12]
 8005600:	0719      	lsls	r1, r3, #28
 8005602:	d502      	bpl.n	800560a <_puts_r+0x2e>
 8005604:	6923      	ldr	r3, [r4, #16]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d135      	bne.n	8005676 <_puts_r+0x9a>
 800560a:	4621      	mov	r1, r4
 800560c:	4628      	mov	r0, r5
 800560e:	f000 f981 	bl	8005914 <__swsetup_r>
 8005612:	b380      	cbz	r0, 8005676 <_puts_r+0x9a>
 8005614:	f04f 35ff 	mov.w	r5, #4294967295
 8005618:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800561a:	07da      	lsls	r2, r3, #31
 800561c:	d405      	bmi.n	800562a <_puts_r+0x4e>
 800561e:	89a3      	ldrh	r3, [r4, #12]
 8005620:	059b      	lsls	r3, r3, #22
 8005622:	d402      	bmi.n	800562a <_puts_r+0x4e>
 8005624:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005626:	f000 fa45 	bl	8005ab4 <__retarget_lock_release_recursive>
 800562a:	4628      	mov	r0, r5
 800562c:	bd70      	pop	{r4, r5, r6, pc}
 800562e:	2b00      	cmp	r3, #0
 8005630:	da04      	bge.n	800563c <_puts_r+0x60>
 8005632:	69a2      	ldr	r2, [r4, #24]
 8005634:	429a      	cmp	r2, r3
 8005636:	dc17      	bgt.n	8005668 <_puts_r+0x8c>
 8005638:	290a      	cmp	r1, #10
 800563a:	d015      	beq.n	8005668 <_puts_r+0x8c>
 800563c:	6823      	ldr	r3, [r4, #0]
 800563e:	1c5a      	adds	r2, r3, #1
 8005640:	6022      	str	r2, [r4, #0]
 8005642:	7019      	strb	r1, [r3, #0]
 8005644:	68a3      	ldr	r3, [r4, #8]
 8005646:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800564a:	3b01      	subs	r3, #1
 800564c:	60a3      	str	r3, [r4, #8]
 800564e:	2900      	cmp	r1, #0
 8005650:	d1ed      	bne.n	800562e <_puts_r+0x52>
 8005652:	2b00      	cmp	r3, #0
 8005654:	da11      	bge.n	800567a <_puts_r+0x9e>
 8005656:	4622      	mov	r2, r4
 8005658:	210a      	movs	r1, #10
 800565a:	4628      	mov	r0, r5
 800565c:	f000 f91b 	bl	8005896 <__swbuf_r>
 8005660:	3001      	adds	r0, #1
 8005662:	d0d7      	beq.n	8005614 <_puts_r+0x38>
 8005664:	250a      	movs	r5, #10
 8005666:	e7d7      	b.n	8005618 <_puts_r+0x3c>
 8005668:	4622      	mov	r2, r4
 800566a:	4628      	mov	r0, r5
 800566c:	f000 f913 	bl	8005896 <__swbuf_r>
 8005670:	3001      	adds	r0, #1
 8005672:	d1e7      	bne.n	8005644 <_puts_r+0x68>
 8005674:	e7ce      	b.n	8005614 <_puts_r+0x38>
 8005676:	3e01      	subs	r6, #1
 8005678:	e7e4      	b.n	8005644 <_puts_r+0x68>
 800567a:	6823      	ldr	r3, [r4, #0]
 800567c:	1c5a      	adds	r2, r3, #1
 800567e:	6022      	str	r2, [r4, #0]
 8005680:	220a      	movs	r2, #10
 8005682:	701a      	strb	r2, [r3, #0]
 8005684:	e7ee      	b.n	8005664 <_puts_r+0x88>
	...

08005688 <puts>:
 8005688:	4b02      	ldr	r3, [pc, #8]	@ (8005694 <puts+0xc>)
 800568a:	4601      	mov	r1, r0
 800568c:	6818      	ldr	r0, [r3, #0]
 800568e:	f7ff bfa5 	b.w	80055dc <_puts_r>
 8005692:	bf00      	nop
 8005694:	20000028 	.word	0x20000028

08005698 <setbuf>:
 8005698:	fab1 f281 	clz	r2, r1
 800569c:	0952      	lsrs	r2, r2, #5
 800569e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80056a2:	0052      	lsls	r2, r2, #1
 80056a4:	f000 b800 	b.w	80056a8 <setvbuf>

080056a8 <setvbuf>:
 80056a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80056ac:	461d      	mov	r5, r3
 80056ae:	4b57      	ldr	r3, [pc, #348]	@ (800580c <setvbuf+0x164>)
 80056b0:	681f      	ldr	r7, [r3, #0]
 80056b2:	4604      	mov	r4, r0
 80056b4:	460e      	mov	r6, r1
 80056b6:	4690      	mov	r8, r2
 80056b8:	b127      	cbz	r7, 80056c4 <setvbuf+0x1c>
 80056ba:	6a3b      	ldr	r3, [r7, #32]
 80056bc:	b913      	cbnz	r3, 80056c4 <setvbuf+0x1c>
 80056be:	4638      	mov	r0, r7
 80056c0:	f7ff ff44 	bl	800554c <__sinit>
 80056c4:	f1b8 0f02 	cmp.w	r8, #2
 80056c8:	d006      	beq.n	80056d8 <setvbuf+0x30>
 80056ca:	f1b8 0f01 	cmp.w	r8, #1
 80056ce:	f200 809a 	bhi.w	8005806 <setvbuf+0x15e>
 80056d2:	2d00      	cmp	r5, #0
 80056d4:	f2c0 8097 	blt.w	8005806 <setvbuf+0x15e>
 80056d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80056da:	07d9      	lsls	r1, r3, #31
 80056dc:	d405      	bmi.n	80056ea <setvbuf+0x42>
 80056de:	89a3      	ldrh	r3, [r4, #12]
 80056e0:	059a      	lsls	r2, r3, #22
 80056e2:	d402      	bmi.n	80056ea <setvbuf+0x42>
 80056e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80056e6:	f000 f9e4 	bl	8005ab2 <__retarget_lock_acquire_recursive>
 80056ea:	4621      	mov	r1, r4
 80056ec:	4638      	mov	r0, r7
 80056ee:	f000 fe37 	bl	8006360 <_fflush_r>
 80056f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80056f4:	b141      	cbz	r1, 8005708 <setvbuf+0x60>
 80056f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80056fa:	4299      	cmp	r1, r3
 80056fc:	d002      	beq.n	8005704 <setvbuf+0x5c>
 80056fe:	4638      	mov	r0, r7
 8005700:	f000 f9da 	bl	8005ab8 <_free_r>
 8005704:	2300      	movs	r3, #0
 8005706:	6363      	str	r3, [r4, #52]	@ 0x34
 8005708:	2300      	movs	r3, #0
 800570a:	61a3      	str	r3, [r4, #24]
 800570c:	6063      	str	r3, [r4, #4]
 800570e:	89a3      	ldrh	r3, [r4, #12]
 8005710:	061b      	lsls	r3, r3, #24
 8005712:	d503      	bpl.n	800571c <setvbuf+0x74>
 8005714:	6921      	ldr	r1, [r4, #16]
 8005716:	4638      	mov	r0, r7
 8005718:	f000 f9ce 	bl	8005ab8 <_free_r>
 800571c:	89a3      	ldrh	r3, [r4, #12]
 800571e:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8005722:	f023 0303 	bic.w	r3, r3, #3
 8005726:	f1b8 0f02 	cmp.w	r8, #2
 800572a:	81a3      	strh	r3, [r4, #12]
 800572c:	d061      	beq.n	80057f2 <setvbuf+0x14a>
 800572e:	ab01      	add	r3, sp, #4
 8005730:	466a      	mov	r2, sp
 8005732:	4621      	mov	r1, r4
 8005734:	4638      	mov	r0, r7
 8005736:	f000 fe3b 	bl	80063b0 <__swhatbuf_r>
 800573a:	89a3      	ldrh	r3, [r4, #12]
 800573c:	4318      	orrs	r0, r3
 800573e:	81a0      	strh	r0, [r4, #12]
 8005740:	bb2d      	cbnz	r5, 800578e <setvbuf+0xe6>
 8005742:	9d00      	ldr	r5, [sp, #0]
 8005744:	4628      	mov	r0, r5
 8005746:	f000 fa01 	bl	8005b4c <malloc>
 800574a:	4606      	mov	r6, r0
 800574c:	2800      	cmp	r0, #0
 800574e:	d152      	bne.n	80057f6 <setvbuf+0x14e>
 8005750:	f8dd 9000 	ldr.w	r9, [sp]
 8005754:	45a9      	cmp	r9, r5
 8005756:	d140      	bne.n	80057da <setvbuf+0x132>
 8005758:	f04f 35ff 	mov.w	r5, #4294967295
 800575c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005760:	f043 0202 	orr.w	r2, r3, #2
 8005764:	81a2      	strh	r2, [r4, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	60a2      	str	r2, [r4, #8]
 800576a:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800576e:	6022      	str	r2, [r4, #0]
 8005770:	6122      	str	r2, [r4, #16]
 8005772:	2201      	movs	r2, #1
 8005774:	6162      	str	r2, [r4, #20]
 8005776:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005778:	07d6      	lsls	r6, r2, #31
 800577a:	d404      	bmi.n	8005786 <setvbuf+0xde>
 800577c:	0598      	lsls	r0, r3, #22
 800577e:	d402      	bmi.n	8005786 <setvbuf+0xde>
 8005780:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005782:	f000 f997 	bl	8005ab4 <__retarget_lock_release_recursive>
 8005786:	4628      	mov	r0, r5
 8005788:	b003      	add	sp, #12
 800578a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800578e:	2e00      	cmp	r6, #0
 8005790:	d0d8      	beq.n	8005744 <setvbuf+0x9c>
 8005792:	6a3b      	ldr	r3, [r7, #32]
 8005794:	b913      	cbnz	r3, 800579c <setvbuf+0xf4>
 8005796:	4638      	mov	r0, r7
 8005798:	f7ff fed8 	bl	800554c <__sinit>
 800579c:	f1b8 0f01 	cmp.w	r8, #1
 80057a0:	bf08      	it	eq
 80057a2:	89a3      	ldrheq	r3, [r4, #12]
 80057a4:	6026      	str	r6, [r4, #0]
 80057a6:	bf04      	itt	eq
 80057a8:	f043 0301 	orreq.w	r3, r3, #1
 80057ac:	81a3      	strheq	r3, [r4, #12]
 80057ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057b2:	f013 0208 	ands.w	r2, r3, #8
 80057b6:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80057ba:	d01e      	beq.n	80057fa <setvbuf+0x152>
 80057bc:	07d9      	lsls	r1, r3, #31
 80057be:	bf41      	itttt	mi
 80057c0:	2200      	movmi	r2, #0
 80057c2:	426d      	negmi	r5, r5
 80057c4:	60a2      	strmi	r2, [r4, #8]
 80057c6:	61a5      	strmi	r5, [r4, #24]
 80057c8:	bf58      	it	pl
 80057ca:	60a5      	strpl	r5, [r4, #8]
 80057cc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80057ce:	07d2      	lsls	r2, r2, #31
 80057d0:	d401      	bmi.n	80057d6 <setvbuf+0x12e>
 80057d2:	059b      	lsls	r3, r3, #22
 80057d4:	d513      	bpl.n	80057fe <setvbuf+0x156>
 80057d6:	2500      	movs	r5, #0
 80057d8:	e7d5      	b.n	8005786 <setvbuf+0xde>
 80057da:	4648      	mov	r0, r9
 80057dc:	f000 f9b6 	bl	8005b4c <malloc>
 80057e0:	4606      	mov	r6, r0
 80057e2:	2800      	cmp	r0, #0
 80057e4:	d0b8      	beq.n	8005758 <setvbuf+0xb0>
 80057e6:	89a3      	ldrh	r3, [r4, #12]
 80057e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057ec:	81a3      	strh	r3, [r4, #12]
 80057ee:	464d      	mov	r5, r9
 80057f0:	e7cf      	b.n	8005792 <setvbuf+0xea>
 80057f2:	2500      	movs	r5, #0
 80057f4:	e7b2      	b.n	800575c <setvbuf+0xb4>
 80057f6:	46a9      	mov	r9, r5
 80057f8:	e7f5      	b.n	80057e6 <setvbuf+0x13e>
 80057fa:	60a2      	str	r2, [r4, #8]
 80057fc:	e7e6      	b.n	80057cc <setvbuf+0x124>
 80057fe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005800:	f000 f958 	bl	8005ab4 <__retarget_lock_release_recursive>
 8005804:	e7e7      	b.n	80057d6 <setvbuf+0x12e>
 8005806:	f04f 35ff 	mov.w	r5, #4294967295
 800580a:	e7bc      	b.n	8005786 <setvbuf+0xde>
 800580c:	20000028 	.word	0x20000028

08005810 <__sread>:
 8005810:	b510      	push	{r4, lr}
 8005812:	460c      	mov	r4, r1
 8005814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005818:	f000 f8fc 	bl	8005a14 <_read_r>
 800581c:	2800      	cmp	r0, #0
 800581e:	bfab      	itete	ge
 8005820:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005822:	89a3      	ldrhlt	r3, [r4, #12]
 8005824:	181b      	addge	r3, r3, r0
 8005826:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800582a:	bfac      	ite	ge
 800582c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800582e:	81a3      	strhlt	r3, [r4, #12]
 8005830:	bd10      	pop	{r4, pc}

08005832 <__swrite>:
 8005832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005836:	461f      	mov	r7, r3
 8005838:	898b      	ldrh	r3, [r1, #12]
 800583a:	05db      	lsls	r3, r3, #23
 800583c:	4605      	mov	r5, r0
 800583e:	460c      	mov	r4, r1
 8005840:	4616      	mov	r6, r2
 8005842:	d505      	bpl.n	8005850 <__swrite+0x1e>
 8005844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005848:	2302      	movs	r3, #2
 800584a:	2200      	movs	r2, #0
 800584c:	f000 f8d0 	bl	80059f0 <_lseek_r>
 8005850:	89a3      	ldrh	r3, [r4, #12]
 8005852:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005856:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800585a:	81a3      	strh	r3, [r4, #12]
 800585c:	4632      	mov	r2, r6
 800585e:	463b      	mov	r3, r7
 8005860:	4628      	mov	r0, r5
 8005862:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005866:	f000 b8e7 	b.w	8005a38 <_write_r>

0800586a <__sseek>:
 800586a:	b510      	push	{r4, lr}
 800586c:	460c      	mov	r4, r1
 800586e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005872:	f000 f8bd 	bl	80059f0 <_lseek_r>
 8005876:	1c43      	adds	r3, r0, #1
 8005878:	89a3      	ldrh	r3, [r4, #12]
 800587a:	bf15      	itete	ne
 800587c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800587e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005882:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005886:	81a3      	strheq	r3, [r4, #12]
 8005888:	bf18      	it	ne
 800588a:	81a3      	strhne	r3, [r4, #12]
 800588c:	bd10      	pop	{r4, pc}

0800588e <__sclose>:
 800588e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005892:	f000 b89d 	b.w	80059d0 <_close_r>

08005896 <__swbuf_r>:
 8005896:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005898:	460e      	mov	r6, r1
 800589a:	4614      	mov	r4, r2
 800589c:	4605      	mov	r5, r0
 800589e:	b118      	cbz	r0, 80058a8 <__swbuf_r+0x12>
 80058a0:	6a03      	ldr	r3, [r0, #32]
 80058a2:	b90b      	cbnz	r3, 80058a8 <__swbuf_r+0x12>
 80058a4:	f7ff fe52 	bl	800554c <__sinit>
 80058a8:	69a3      	ldr	r3, [r4, #24]
 80058aa:	60a3      	str	r3, [r4, #8]
 80058ac:	89a3      	ldrh	r3, [r4, #12]
 80058ae:	071a      	lsls	r2, r3, #28
 80058b0:	d501      	bpl.n	80058b6 <__swbuf_r+0x20>
 80058b2:	6923      	ldr	r3, [r4, #16]
 80058b4:	b943      	cbnz	r3, 80058c8 <__swbuf_r+0x32>
 80058b6:	4621      	mov	r1, r4
 80058b8:	4628      	mov	r0, r5
 80058ba:	f000 f82b 	bl	8005914 <__swsetup_r>
 80058be:	b118      	cbz	r0, 80058c8 <__swbuf_r+0x32>
 80058c0:	f04f 37ff 	mov.w	r7, #4294967295
 80058c4:	4638      	mov	r0, r7
 80058c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058c8:	6823      	ldr	r3, [r4, #0]
 80058ca:	6922      	ldr	r2, [r4, #16]
 80058cc:	1a98      	subs	r0, r3, r2
 80058ce:	6963      	ldr	r3, [r4, #20]
 80058d0:	b2f6      	uxtb	r6, r6
 80058d2:	4283      	cmp	r3, r0
 80058d4:	4637      	mov	r7, r6
 80058d6:	dc05      	bgt.n	80058e4 <__swbuf_r+0x4e>
 80058d8:	4621      	mov	r1, r4
 80058da:	4628      	mov	r0, r5
 80058dc:	f000 fd40 	bl	8006360 <_fflush_r>
 80058e0:	2800      	cmp	r0, #0
 80058e2:	d1ed      	bne.n	80058c0 <__swbuf_r+0x2a>
 80058e4:	68a3      	ldr	r3, [r4, #8]
 80058e6:	3b01      	subs	r3, #1
 80058e8:	60a3      	str	r3, [r4, #8]
 80058ea:	6823      	ldr	r3, [r4, #0]
 80058ec:	1c5a      	adds	r2, r3, #1
 80058ee:	6022      	str	r2, [r4, #0]
 80058f0:	701e      	strb	r6, [r3, #0]
 80058f2:	6962      	ldr	r2, [r4, #20]
 80058f4:	1c43      	adds	r3, r0, #1
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d004      	beq.n	8005904 <__swbuf_r+0x6e>
 80058fa:	89a3      	ldrh	r3, [r4, #12]
 80058fc:	07db      	lsls	r3, r3, #31
 80058fe:	d5e1      	bpl.n	80058c4 <__swbuf_r+0x2e>
 8005900:	2e0a      	cmp	r6, #10
 8005902:	d1df      	bne.n	80058c4 <__swbuf_r+0x2e>
 8005904:	4621      	mov	r1, r4
 8005906:	4628      	mov	r0, r5
 8005908:	f000 fd2a 	bl	8006360 <_fflush_r>
 800590c:	2800      	cmp	r0, #0
 800590e:	d0d9      	beq.n	80058c4 <__swbuf_r+0x2e>
 8005910:	e7d6      	b.n	80058c0 <__swbuf_r+0x2a>
	...

08005914 <__swsetup_r>:
 8005914:	b538      	push	{r3, r4, r5, lr}
 8005916:	4b29      	ldr	r3, [pc, #164]	@ (80059bc <__swsetup_r+0xa8>)
 8005918:	4605      	mov	r5, r0
 800591a:	6818      	ldr	r0, [r3, #0]
 800591c:	460c      	mov	r4, r1
 800591e:	b118      	cbz	r0, 8005928 <__swsetup_r+0x14>
 8005920:	6a03      	ldr	r3, [r0, #32]
 8005922:	b90b      	cbnz	r3, 8005928 <__swsetup_r+0x14>
 8005924:	f7ff fe12 	bl	800554c <__sinit>
 8005928:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800592c:	0719      	lsls	r1, r3, #28
 800592e:	d422      	bmi.n	8005976 <__swsetup_r+0x62>
 8005930:	06da      	lsls	r2, r3, #27
 8005932:	d407      	bmi.n	8005944 <__swsetup_r+0x30>
 8005934:	2209      	movs	r2, #9
 8005936:	602a      	str	r2, [r5, #0]
 8005938:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800593c:	81a3      	strh	r3, [r4, #12]
 800593e:	f04f 30ff 	mov.w	r0, #4294967295
 8005942:	e033      	b.n	80059ac <__swsetup_r+0x98>
 8005944:	0758      	lsls	r0, r3, #29
 8005946:	d512      	bpl.n	800596e <__swsetup_r+0x5a>
 8005948:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800594a:	b141      	cbz	r1, 800595e <__swsetup_r+0x4a>
 800594c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005950:	4299      	cmp	r1, r3
 8005952:	d002      	beq.n	800595a <__swsetup_r+0x46>
 8005954:	4628      	mov	r0, r5
 8005956:	f000 f8af 	bl	8005ab8 <_free_r>
 800595a:	2300      	movs	r3, #0
 800595c:	6363      	str	r3, [r4, #52]	@ 0x34
 800595e:	89a3      	ldrh	r3, [r4, #12]
 8005960:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005964:	81a3      	strh	r3, [r4, #12]
 8005966:	2300      	movs	r3, #0
 8005968:	6063      	str	r3, [r4, #4]
 800596a:	6923      	ldr	r3, [r4, #16]
 800596c:	6023      	str	r3, [r4, #0]
 800596e:	89a3      	ldrh	r3, [r4, #12]
 8005970:	f043 0308 	orr.w	r3, r3, #8
 8005974:	81a3      	strh	r3, [r4, #12]
 8005976:	6923      	ldr	r3, [r4, #16]
 8005978:	b94b      	cbnz	r3, 800598e <__swsetup_r+0x7a>
 800597a:	89a3      	ldrh	r3, [r4, #12]
 800597c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005980:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005984:	d003      	beq.n	800598e <__swsetup_r+0x7a>
 8005986:	4621      	mov	r1, r4
 8005988:	4628      	mov	r0, r5
 800598a:	f000 fd37 	bl	80063fc <__smakebuf_r>
 800598e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005992:	f013 0201 	ands.w	r2, r3, #1
 8005996:	d00a      	beq.n	80059ae <__swsetup_r+0x9a>
 8005998:	2200      	movs	r2, #0
 800599a:	60a2      	str	r2, [r4, #8]
 800599c:	6962      	ldr	r2, [r4, #20]
 800599e:	4252      	negs	r2, r2
 80059a0:	61a2      	str	r2, [r4, #24]
 80059a2:	6922      	ldr	r2, [r4, #16]
 80059a4:	b942      	cbnz	r2, 80059b8 <__swsetup_r+0xa4>
 80059a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80059aa:	d1c5      	bne.n	8005938 <__swsetup_r+0x24>
 80059ac:	bd38      	pop	{r3, r4, r5, pc}
 80059ae:	0799      	lsls	r1, r3, #30
 80059b0:	bf58      	it	pl
 80059b2:	6962      	ldrpl	r2, [r4, #20]
 80059b4:	60a2      	str	r2, [r4, #8]
 80059b6:	e7f4      	b.n	80059a2 <__swsetup_r+0x8e>
 80059b8:	2000      	movs	r0, #0
 80059ba:	e7f7      	b.n	80059ac <__swsetup_r+0x98>
 80059bc:	20000028 	.word	0x20000028

080059c0 <memset>:
 80059c0:	4402      	add	r2, r0
 80059c2:	4603      	mov	r3, r0
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d100      	bne.n	80059ca <memset+0xa>
 80059c8:	4770      	bx	lr
 80059ca:	f803 1b01 	strb.w	r1, [r3], #1
 80059ce:	e7f9      	b.n	80059c4 <memset+0x4>

080059d0 <_close_r>:
 80059d0:	b538      	push	{r3, r4, r5, lr}
 80059d2:	4d06      	ldr	r5, [pc, #24]	@ (80059ec <_close_r+0x1c>)
 80059d4:	2300      	movs	r3, #0
 80059d6:	4604      	mov	r4, r0
 80059d8:	4608      	mov	r0, r1
 80059da:	602b      	str	r3, [r5, #0]
 80059dc:	f7fb fb29 	bl	8001032 <_close>
 80059e0:	1c43      	adds	r3, r0, #1
 80059e2:	d102      	bne.n	80059ea <_close_r+0x1a>
 80059e4:	682b      	ldr	r3, [r5, #0]
 80059e6:	b103      	cbz	r3, 80059ea <_close_r+0x1a>
 80059e8:	6023      	str	r3, [r4, #0]
 80059ea:	bd38      	pop	{r3, r4, r5, pc}
 80059ec:	2000039c 	.word	0x2000039c

080059f0 <_lseek_r>:
 80059f0:	b538      	push	{r3, r4, r5, lr}
 80059f2:	4d07      	ldr	r5, [pc, #28]	@ (8005a10 <_lseek_r+0x20>)
 80059f4:	4604      	mov	r4, r0
 80059f6:	4608      	mov	r0, r1
 80059f8:	4611      	mov	r1, r2
 80059fa:	2200      	movs	r2, #0
 80059fc:	602a      	str	r2, [r5, #0]
 80059fe:	461a      	mov	r2, r3
 8005a00:	f7fb fb3e 	bl	8001080 <_lseek>
 8005a04:	1c43      	adds	r3, r0, #1
 8005a06:	d102      	bne.n	8005a0e <_lseek_r+0x1e>
 8005a08:	682b      	ldr	r3, [r5, #0]
 8005a0a:	b103      	cbz	r3, 8005a0e <_lseek_r+0x1e>
 8005a0c:	6023      	str	r3, [r4, #0]
 8005a0e:	bd38      	pop	{r3, r4, r5, pc}
 8005a10:	2000039c 	.word	0x2000039c

08005a14 <_read_r>:
 8005a14:	b538      	push	{r3, r4, r5, lr}
 8005a16:	4d07      	ldr	r5, [pc, #28]	@ (8005a34 <_read_r+0x20>)
 8005a18:	4604      	mov	r4, r0
 8005a1a:	4608      	mov	r0, r1
 8005a1c:	4611      	mov	r1, r2
 8005a1e:	2200      	movs	r2, #0
 8005a20:	602a      	str	r2, [r5, #0]
 8005a22:	461a      	mov	r2, r3
 8005a24:	f7fb fae8 	bl	8000ff8 <_read>
 8005a28:	1c43      	adds	r3, r0, #1
 8005a2a:	d102      	bne.n	8005a32 <_read_r+0x1e>
 8005a2c:	682b      	ldr	r3, [r5, #0]
 8005a2e:	b103      	cbz	r3, 8005a32 <_read_r+0x1e>
 8005a30:	6023      	str	r3, [r4, #0]
 8005a32:	bd38      	pop	{r3, r4, r5, pc}
 8005a34:	2000039c 	.word	0x2000039c

08005a38 <_write_r>:
 8005a38:	b538      	push	{r3, r4, r5, lr}
 8005a3a:	4d07      	ldr	r5, [pc, #28]	@ (8005a58 <_write_r+0x20>)
 8005a3c:	4604      	mov	r4, r0
 8005a3e:	4608      	mov	r0, r1
 8005a40:	4611      	mov	r1, r2
 8005a42:	2200      	movs	r2, #0
 8005a44:	602a      	str	r2, [r5, #0]
 8005a46:	461a      	mov	r2, r3
 8005a48:	f7fa fedc 	bl	8000804 <_write>
 8005a4c:	1c43      	adds	r3, r0, #1
 8005a4e:	d102      	bne.n	8005a56 <_write_r+0x1e>
 8005a50:	682b      	ldr	r3, [r5, #0]
 8005a52:	b103      	cbz	r3, 8005a56 <_write_r+0x1e>
 8005a54:	6023      	str	r3, [r4, #0]
 8005a56:	bd38      	pop	{r3, r4, r5, pc}
 8005a58:	2000039c 	.word	0x2000039c

08005a5c <__errno>:
 8005a5c:	4b01      	ldr	r3, [pc, #4]	@ (8005a64 <__errno+0x8>)
 8005a5e:	6818      	ldr	r0, [r3, #0]
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	20000028 	.word	0x20000028

08005a68 <__libc_init_array>:
 8005a68:	b570      	push	{r4, r5, r6, lr}
 8005a6a:	4d0d      	ldr	r5, [pc, #52]	@ (8005aa0 <__libc_init_array+0x38>)
 8005a6c:	4c0d      	ldr	r4, [pc, #52]	@ (8005aa4 <__libc_init_array+0x3c>)
 8005a6e:	1b64      	subs	r4, r4, r5
 8005a70:	10a4      	asrs	r4, r4, #2
 8005a72:	2600      	movs	r6, #0
 8005a74:	42a6      	cmp	r6, r4
 8005a76:	d109      	bne.n	8005a8c <__libc_init_array+0x24>
 8005a78:	4d0b      	ldr	r5, [pc, #44]	@ (8005aa8 <__libc_init_array+0x40>)
 8005a7a:	4c0c      	ldr	r4, [pc, #48]	@ (8005aac <__libc_init_array+0x44>)
 8005a7c:	f000 fd2c 	bl	80064d8 <_init>
 8005a80:	1b64      	subs	r4, r4, r5
 8005a82:	10a4      	asrs	r4, r4, #2
 8005a84:	2600      	movs	r6, #0
 8005a86:	42a6      	cmp	r6, r4
 8005a88:	d105      	bne.n	8005a96 <__libc_init_array+0x2e>
 8005a8a:	bd70      	pop	{r4, r5, r6, pc}
 8005a8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a90:	4798      	blx	r3
 8005a92:	3601      	adds	r6, #1
 8005a94:	e7ee      	b.n	8005a74 <__libc_init_array+0xc>
 8005a96:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a9a:	4798      	blx	r3
 8005a9c:	3601      	adds	r6, #1
 8005a9e:	e7f2      	b.n	8005a86 <__libc_init_array+0x1e>
 8005aa0:	08006664 	.word	0x08006664
 8005aa4:	08006664 	.word	0x08006664
 8005aa8:	08006664 	.word	0x08006664
 8005aac:	08006668 	.word	0x08006668

08005ab0 <__retarget_lock_init_recursive>:
 8005ab0:	4770      	bx	lr

08005ab2 <__retarget_lock_acquire_recursive>:
 8005ab2:	4770      	bx	lr

08005ab4 <__retarget_lock_release_recursive>:
 8005ab4:	4770      	bx	lr
	...

08005ab8 <_free_r>:
 8005ab8:	b538      	push	{r3, r4, r5, lr}
 8005aba:	4605      	mov	r5, r0
 8005abc:	2900      	cmp	r1, #0
 8005abe:	d041      	beq.n	8005b44 <_free_r+0x8c>
 8005ac0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ac4:	1f0c      	subs	r4, r1, #4
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	bfb8      	it	lt
 8005aca:	18e4      	addlt	r4, r4, r3
 8005acc:	f000 f8e8 	bl	8005ca0 <__malloc_lock>
 8005ad0:	4a1d      	ldr	r2, [pc, #116]	@ (8005b48 <_free_r+0x90>)
 8005ad2:	6813      	ldr	r3, [r2, #0]
 8005ad4:	b933      	cbnz	r3, 8005ae4 <_free_r+0x2c>
 8005ad6:	6063      	str	r3, [r4, #4]
 8005ad8:	6014      	str	r4, [r2, #0]
 8005ada:	4628      	mov	r0, r5
 8005adc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ae0:	f000 b8e4 	b.w	8005cac <__malloc_unlock>
 8005ae4:	42a3      	cmp	r3, r4
 8005ae6:	d908      	bls.n	8005afa <_free_r+0x42>
 8005ae8:	6820      	ldr	r0, [r4, #0]
 8005aea:	1821      	adds	r1, r4, r0
 8005aec:	428b      	cmp	r3, r1
 8005aee:	bf01      	itttt	eq
 8005af0:	6819      	ldreq	r1, [r3, #0]
 8005af2:	685b      	ldreq	r3, [r3, #4]
 8005af4:	1809      	addeq	r1, r1, r0
 8005af6:	6021      	streq	r1, [r4, #0]
 8005af8:	e7ed      	b.n	8005ad6 <_free_r+0x1e>
 8005afa:	461a      	mov	r2, r3
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	b10b      	cbz	r3, 8005b04 <_free_r+0x4c>
 8005b00:	42a3      	cmp	r3, r4
 8005b02:	d9fa      	bls.n	8005afa <_free_r+0x42>
 8005b04:	6811      	ldr	r1, [r2, #0]
 8005b06:	1850      	adds	r0, r2, r1
 8005b08:	42a0      	cmp	r0, r4
 8005b0a:	d10b      	bne.n	8005b24 <_free_r+0x6c>
 8005b0c:	6820      	ldr	r0, [r4, #0]
 8005b0e:	4401      	add	r1, r0
 8005b10:	1850      	adds	r0, r2, r1
 8005b12:	4283      	cmp	r3, r0
 8005b14:	6011      	str	r1, [r2, #0]
 8005b16:	d1e0      	bne.n	8005ada <_free_r+0x22>
 8005b18:	6818      	ldr	r0, [r3, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	6053      	str	r3, [r2, #4]
 8005b1e:	4408      	add	r0, r1
 8005b20:	6010      	str	r0, [r2, #0]
 8005b22:	e7da      	b.n	8005ada <_free_r+0x22>
 8005b24:	d902      	bls.n	8005b2c <_free_r+0x74>
 8005b26:	230c      	movs	r3, #12
 8005b28:	602b      	str	r3, [r5, #0]
 8005b2a:	e7d6      	b.n	8005ada <_free_r+0x22>
 8005b2c:	6820      	ldr	r0, [r4, #0]
 8005b2e:	1821      	adds	r1, r4, r0
 8005b30:	428b      	cmp	r3, r1
 8005b32:	bf04      	itt	eq
 8005b34:	6819      	ldreq	r1, [r3, #0]
 8005b36:	685b      	ldreq	r3, [r3, #4]
 8005b38:	6063      	str	r3, [r4, #4]
 8005b3a:	bf04      	itt	eq
 8005b3c:	1809      	addeq	r1, r1, r0
 8005b3e:	6021      	streq	r1, [r4, #0]
 8005b40:	6054      	str	r4, [r2, #4]
 8005b42:	e7ca      	b.n	8005ada <_free_r+0x22>
 8005b44:	bd38      	pop	{r3, r4, r5, pc}
 8005b46:	bf00      	nop
 8005b48:	200003a8 	.word	0x200003a8

08005b4c <malloc>:
 8005b4c:	4b02      	ldr	r3, [pc, #8]	@ (8005b58 <malloc+0xc>)
 8005b4e:	4601      	mov	r1, r0
 8005b50:	6818      	ldr	r0, [r3, #0]
 8005b52:	f000 b825 	b.w	8005ba0 <_malloc_r>
 8005b56:	bf00      	nop
 8005b58:	20000028 	.word	0x20000028

08005b5c <sbrk_aligned>:
 8005b5c:	b570      	push	{r4, r5, r6, lr}
 8005b5e:	4e0f      	ldr	r6, [pc, #60]	@ (8005b9c <sbrk_aligned+0x40>)
 8005b60:	460c      	mov	r4, r1
 8005b62:	6831      	ldr	r1, [r6, #0]
 8005b64:	4605      	mov	r5, r0
 8005b66:	b911      	cbnz	r1, 8005b6e <sbrk_aligned+0x12>
 8005b68:	f000 fca6 	bl	80064b8 <_sbrk_r>
 8005b6c:	6030      	str	r0, [r6, #0]
 8005b6e:	4621      	mov	r1, r4
 8005b70:	4628      	mov	r0, r5
 8005b72:	f000 fca1 	bl	80064b8 <_sbrk_r>
 8005b76:	1c43      	adds	r3, r0, #1
 8005b78:	d103      	bne.n	8005b82 <sbrk_aligned+0x26>
 8005b7a:	f04f 34ff 	mov.w	r4, #4294967295
 8005b7e:	4620      	mov	r0, r4
 8005b80:	bd70      	pop	{r4, r5, r6, pc}
 8005b82:	1cc4      	adds	r4, r0, #3
 8005b84:	f024 0403 	bic.w	r4, r4, #3
 8005b88:	42a0      	cmp	r0, r4
 8005b8a:	d0f8      	beq.n	8005b7e <sbrk_aligned+0x22>
 8005b8c:	1a21      	subs	r1, r4, r0
 8005b8e:	4628      	mov	r0, r5
 8005b90:	f000 fc92 	bl	80064b8 <_sbrk_r>
 8005b94:	3001      	adds	r0, #1
 8005b96:	d1f2      	bne.n	8005b7e <sbrk_aligned+0x22>
 8005b98:	e7ef      	b.n	8005b7a <sbrk_aligned+0x1e>
 8005b9a:	bf00      	nop
 8005b9c:	200003a4 	.word	0x200003a4

08005ba0 <_malloc_r>:
 8005ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ba4:	1ccd      	adds	r5, r1, #3
 8005ba6:	f025 0503 	bic.w	r5, r5, #3
 8005baa:	3508      	adds	r5, #8
 8005bac:	2d0c      	cmp	r5, #12
 8005bae:	bf38      	it	cc
 8005bb0:	250c      	movcc	r5, #12
 8005bb2:	2d00      	cmp	r5, #0
 8005bb4:	4606      	mov	r6, r0
 8005bb6:	db01      	blt.n	8005bbc <_malloc_r+0x1c>
 8005bb8:	42a9      	cmp	r1, r5
 8005bba:	d904      	bls.n	8005bc6 <_malloc_r+0x26>
 8005bbc:	230c      	movs	r3, #12
 8005bbe:	6033      	str	r3, [r6, #0]
 8005bc0:	2000      	movs	r0, #0
 8005bc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bc6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c9c <_malloc_r+0xfc>
 8005bca:	f000 f869 	bl	8005ca0 <__malloc_lock>
 8005bce:	f8d8 3000 	ldr.w	r3, [r8]
 8005bd2:	461c      	mov	r4, r3
 8005bd4:	bb44      	cbnz	r4, 8005c28 <_malloc_r+0x88>
 8005bd6:	4629      	mov	r1, r5
 8005bd8:	4630      	mov	r0, r6
 8005bda:	f7ff ffbf 	bl	8005b5c <sbrk_aligned>
 8005bde:	1c43      	adds	r3, r0, #1
 8005be0:	4604      	mov	r4, r0
 8005be2:	d158      	bne.n	8005c96 <_malloc_r+0xf6>
 8005be4:	f8d8 4000 	ldr.w	r4, [r8]
 8005be8:	4627      	mov	r7, r4
 8005bea:	2f00      	cmp	r7, #0
 8005bec:	d143      	bne.n	8005c76 <_malloc_r+0xd6>
 8005bee:	2c00      	cmp	r4, #0
 8005bf0:	d04b      	beq.n	8005c8a <_malloc_r+0xea>
 8005bf2:	6823      	ldr	r3, [r4, #0]
 8005bf4:	4639      	mov	r1, r7
 8005bf6:	4630      	mov	r0, r6
 8005bf8:	eb04 0903 	add.w	r9, r4, r3
 8005bfc:	f000 fc5c 	bl	80064b8 <_sbrk_r>
 8005c00:	4581      	cmp	r9, r0
 8005c02:	d142      	bne.n	8005c8a <_malloc_r+0xea>
 8005c04:	6821      	ldr	r1, [r4, #0]
 8005c06:	1a6d      	subs	r5, r5, r1
 8005c08:	4629      	mov	r1, r5
 8005c0a:	4630      	mov	r0, r6
 8005c0c:	f7ff ffa6 	bl	8005b5c <sbrk_aligned>
 8005c10:	3001      	adds	r0, #1
 8005c12:	d03a      	beq.n	8005c8a <_malloc_r+0xea>
 8005c14:	6823      	ldr	r3, [r4, #0]
 8005c16:	442b      	add	r3, r5
 8005c18:	6023      	str	r3, [r4, #0]
 8005c1a:	f8d8 3000 	ldr.w	r3, [r8]
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	bb62      	cbnz	r2, 8005c7c <_malloc_r+0xdc>
 8005c22:	f8c8 7000 	str.w	r7, [r8]
 8005c26:	e00f      	b.n	8005c48 <_malloc_r+0xa8>
 8005c28:	6822      	ldr	r2, [r4, #0]
 8005c2a:	1b52      	subs	r2, r2, r5
 8005c2c:	d420      	bmi.n	8005c70 <_malloc_r+0xd0>
 8005c2e:	2a0b      	cmp	r2, #11
 8005c30:	d917      	bls.n	8005c62 <_malloc_r+0xc2>
 8005c32:	1961      	adds	r1, r4, r5
 8005c34:	42a3      	cmp	r3, r4
 8005c36:	6025      	str	r5, [r4, #0]
 8005c38:	bf18      	it	ne
 8005c3a:	6059      	strne	r1, [r3, #4]
 8005c3c:	6863      	ldr	r3, [r4, #4]
 8005c3e:	bf08      	it	eq
 8005c40:	f8c8 1000 	streq.w	r1, [r8]
 8005c44:	5162      	str	r2, [r4, r5]
 8005c46:	604b      	str	r3, [r1, #4]
 8005c48:	4630      	mov	r0, r6
 8005c4a:	f000 f82f 	bl	8005cac <__malloc_unlock>
 8005c4e:	f104 000b 	add.w	r0, r4, #11
 8005c52:	1d23      	adds	r3, r4, #4
 8005c54:	f020 0007 	bic.w	r0, r0, #7
 8005c58:	1ac2      	subs	r2, r0, r3
 8005c5a:	bf1c      	itt	ne
 8005c5c:	1a1b      	subne	r3, r3, r0
 8005c5e:	50a3      	strne	r3, [r4, r2]
 8005c60:	e7af      	b.n	8005bc2 <_malloc_r+0x22>
 8005c62:	6862      	ldr	r2, [r4, #4]
 8005c64:	42a3      	cmp	r3, r4
 8005c66:	bf0c      	ite	eq
 8005c68:	f8c8 2000 	streq.w	r2, [r8]
 8005c6c:	605a      	strne	r2, [r3, #4]
 8005c6e:	e7eb      	b.n	8005c48 <_malloc_r+0xa8>
 8005c70:	4623      	mov	r3, r4
 8005c72:	6864      	ldr	r4, [r4, #4]
 8005c74:	e7ae      	b.n	8005bd4 <_malloc_r+0x34>
 8005c76:	463c      	mov	r4, r7
 8005c78:	687f      	ldr	r7, [r7, #4]
 8005c7a:	e7b6      	b.n	8005bea <_malloc_r+0x4a>
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	42a3      	cmp	r3, r4
 8005c82:	d1fb      	bne.n	8005c7c <_malloc_r+0xdc>
 8005c84:	2300      	movs	r3, #0
 8005c86:	6053      	str	r3, [r2, #4]
 8005c88:	e7de      	b.n	8005c48 <_malloc_r+0xa8>
 8005c8a:	230c      	movs	r3, #12
 8005c8c:	6033      	str	r3, [r6, #0]
 8005c8e:	4630      	mov	r0, r6
 8005c90:	f000 f80c 	bl	8005cac <__malloc_unlock>
 8005c94:	e794      	b.n	8005bc0 <_malloc_r+0x20>
 8005c96:	6005      	str	r5, [r0, #0]
 8005c98:	e7d6      	b.n	8005c48 <_malloc_r+0xa8>
 8005c9a:	bf00      	nop
 8005c9c:	200003a8 	.word	0x200003a8

08005ca0 <__malloc_lock>:
 8005ca0:	4801      	ldr	r0, [pc, #4]	@ (8005ca8 <__malloc_lock+0x8>)
 8005ca2:	f7ff bf06 	b.w	8005ab2 <__retarget_lock_acquire_recursive>
 8005ca6:	bf00      	nop
 8005ca8:	200003a0 	.word	0x200003a0

08005cac <__malloc_unlock>:
 8005cac:	4801      	ldr	r0, [pc, #4]	@ (8005cb4 <__malloc_unlock+0x8>)
 8005cae:	f7ff bf01 	b.w	8005ab4 <__retarget_lock_release_recursive>
 8005cb2:	bf00      	nop
 8005cb4:	200003a0 	.word	0x200003a0

08005cb8 <__sfputc_r>:
 8005cb8:	6893      	ldr	r3, [r2, #8]
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	b410      	push	{r4}
 8005cc0:	6093      	str	r3, [r2, #8]
 8005cc2:	da08      	bge.n	8005cd6 <__sfputc_r+0x1e>
 8005cc4:	6994      	ldr	r4, [r2, #24]
 8005cc6:	42a3      	cmp	r3, r4
 8005cc8:	db01      	blt.n	8005cce <__sfputc_r+0x16>
 8005cca:	290a      	cmp	r1, #10
 8005ccc:	d103      	bne.n	8005cd6 <__sfputc_r+0x1e>
 8005cce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005cd2:	f7ff bde0 	b.w	8005896 <__swbuf_r>
 8005cd6:	6813      	ldr	r3, [r2, #0]
 8005cd8:	1c58      	adds	r0, r3, #1
 8005cda:	6010      	str	r0, [r2, #0]
 8005cdc:	7019      	strb	r1, [r3, #0]
 8005cde:	4608      	mov	r0, r1
 8005ce0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ce4:	4770      	bx	lr

08005ce6 <__sfputs_r>:
 8005ce6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ce8:	4606      	mov	r6, r0
 8005cea:	460f      	mov	r7, r1
 8005cec:	4614      	mov	r4, r2
 8005cee:	18d5      	adds	r5, r2, r3
 8005cf0:	42ac      	cmp	r4, r5
 8005cf2:	d101      	bne.n	8005cf8 <__sfputs_r+0x12>
 8005cf4:	2000      	movs	r0, #0
 8005cf6:	e007      	b.n	8005d08 <__sfputs_r+0x22>
 8005cf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cfc:	463a      	mov	r2, r7
 8005cfe:	4630      	mov	r0, r6
 8005d00:	f7ff ffda 	bl	8005cb8 <__sfputc_r>
 8005d04:	1c43      	adds	r3, r0, #1
 8005d06:	d1f3      	bne.n	8005cf0 <__sfputs_r+0xa>
 8005d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d0c <_vfiprintf_r>:
 8005d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d10:	460d      	mov	r5, r1
 8005d12:	b09d      	sub	sp, #116	@ 0x74
 8005d14:	4614      	mov	r4, r2
 8005d16:	4698      	mov	r8, r3
 8005d18:	4606      	mov	r6, r0
 8005d1a:	b118      	cbz	r0, 8005d24 <_vfiprintf_r+0x18>
 8005d1c:	6a03      	ldr	r3, [r0, #32]
 8005d1e:	b90b      	cbnz	r3, 8005d24 <_vfiprintf_r+0x18>
 8005d20:	f7ff fc14 	bl	800554c <__sinit>
 8005d24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d26:	07d9      	lsls	r1, r3, #31
 8005d28:	d405      	bmi.n	8005d36 <_vfiprintf_r+0x2a>
 8005d2a:	89ab      	ldrh	r3, [r5, #12]
 8005d2c:	059a      	lsls	r2, r3, #22
 8005d2e:	d402      	bmi.n	8005d36 <_vfiprintf_r+0x2a>
 8005d30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d32:	f7ff febe 	bl	8005ab2 <__retarget_lock_acquire_recursive>
 8005d36:	89ab      	ldrh	r3, [r5, #12]
 8005d38:	071b      	lsls	r3, r3, #28
 8005d3a:	d501      	bpl.n	8005d40 <_vfiprintf_r+0x34>
 8005d3c:	692b      	ldr	r3, [r5, #16]
 8005d3e:	b99b      	cbnz	r3, 8005d68 <_vfiprintf_r+0x5c>
 8005d40:	4629      	mov	r1, r5
 8005d42:	4630      	mov	r0, r6
 8005d44:	f7ff fde6 	bl	8005914 <__swsetup_r>
 8005d48:	b170      	cbz	r0, 8005d68 <_vfiprintf_r+0x5c>
 8005d4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d4c:	07dc      	lsls	r4, r3, #31
 8005d4e:	d504      	bpl.n	8005d5a <_vfiprintf_r+0x4e>
 8005d50:	f04f 30ff 	mov.w	r0, #4294967295
 8005d54:	b01d      	add	sp, #116	@ 0x74
 8005d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d5a:	89ab      	ldrh	r3, [r5, #12]
 8005d5c:	0598      	lsls	r0, r3, #22
 8005d5e:	d4f7      	bmi.n	8005d50 <_vfiprintf_r+0x44>
 8005d60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d62:	f7ff fea7 	bl	8005ab4 <__retarget_lock_release_recursive>
 8005d66:	e7f3      	b.n	8005d50 <_vfiprintf_r+0x44>
 8005d68:	2300      	movs	r3, #0
 8005d6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d6c:	2320      	movs	r3, #32
 8005d6e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005d72:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d76:	2330      	movs	r3, #48	@ 0x30
 8005d78:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005f28 <_vfiprintf_r+0x21c>
 8005d7c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005d80:	f04f 0901 	mov.w	r9, #1
 8005d84:	4623      	mov	r3, r4
 8005d86:	469a      	mov	sl, r3
 8005d88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d8c:	b10a      	cbz	r2, 8005d92 <_vfiprintf_r+0x86>
 8005d8e:	2a25      	cmp	r2, #37	@ 0x25
 8005d90:	d1f9      	bne.n	8005d86 <_vfiprintf_r+0x7a>
 8005d92:	ebba 0b04 	subs.w	fp, sl, r4
 8005d96:	d00b      	beq.n	8005db0 <_vfiprintf_r+0xa4>
 8005d98:	465b      	mov	r3, fp
 8005d9a:	4622      	mov	r2, r4
 8005d9c:	4629      	mov	r1, r5
 8005d9e:	4630      	mov	r0, r6
 8005da0:	f7ff ffa1 	bl	8005ce6 <__sfputs_r>
 8005da4:	3001      	adds	r0, #1
 8005da6:	f000 80a7 	beq.w	8005ef8 <_vfiprintf_r+0x1ec>
 8005daa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005dac:	445a      	add	r2, fp
 8005dae:	9209      	str	r2, [sp, #36]	@ 0x24
 8005db0:	f89a 3000 	ldrb.w	r3, [sl]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f000 809f 	beq.w	8005ef8 <_vfiprintf_r+0x1ec>
 8005dba:	2300      	movs	r3, #0
 8005dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8005dc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005dc4:	f10a 0a01 	add.w	sl, sl, #1
 8005dc8:	9304      	str	r3, [sp, #16]
 8005dca:	9307      	str	r3, [sp, #28]
 8005dcc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005dd0:	931a      	str	r3, [sp, #104]	@ 0x68
 8005dd2:	4654      	mov	r4, sl
 8005dd4:	2205      	movs	r2, #5
 8005dd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dda:	4853      	ldr	r0, [pc, #332]	@ (8005f28 <_vfiprintf_r+0x21c>)
 8005ddc:	f7fa fa20 	bl	8000220 <memchr>
 8005de0:	9a04      	ldr	r2, [sp, #16]
 8005de2:	b9d8      	cbnz	r0, 8005e1c <_vfiprintf_r+0x110>
 8005de4:	06d1      	lsls	r1, r2, #27
 8005de6:	bf44      	itt	mi
 8005de8:	2320      	movmi	r3, #32
 8005dea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005dee:	0713      	lsls	r3, r2, #28
 8005df0:	bf44      	itt	mi
 8005df2:	232b      	movmi	r3, #43	@ 0x2b
 8005df4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005df8:	f89a 3000 	ldrb.w	r3, [sl]
 8005dfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8005dfe:	d015      	beq.n	8005e2c <_vfiprintf_r+0x120>
 8005e00:	9a07      	ldr	r2, [sp, #28]
 8005e02:	4654      	mov	r4, sl
 8005e04:	2000      	movs	r0, #0
 8005e06:	f04f 0c0a 	mov.w	ip, #10
 8005e0a:	4621      	mov	r1, r4
 8005e0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e10:	3b30      	subs	r3, #48	@ 0x30
 8005e12:	2b09      	cmp	r3, #9
 8005e14:	d94b      	bls.n	8005eae <_vfiprintf_r+0x1a2>
 8005e16:	b1b0      	cbz	r0, 8005e46 <_vfiprintf_r+0x13a>
 8005e18:	9207      	str	r2, [sp, #28]
 8005e1a:	e014      	b.n	8005e46 <_vfiprintf_r+0x13a>
 8005e1c:	eba0 0308 	sub.w	r3, r0, r8
 8005e20:	fa09 f303 	lsl.w	r3, r9, r3
 8005e24:	4313      	orrs	r3, r2
 8005e26:	9304      	str	r3, [sp, #16]
 8005e28:	46a2      	mov	sl, r4
 8005e2a:	e7d2      	b.n	8005dd2 <_vfiprintf_r+0xc6>
 8005e2c:	9b03      	ldr	r3, [sp, #12]
 8005e2e:	1d19      	adds	r1, r3, #4
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	9103      	str	r1, [sp, #12]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	bfbb      	ittet	lt
 8005e38:	425b      	neglt	r3, r3
 8005e3a:	f042 0202 	orrlt.w	r2, r2, #2
 8005e3e:	9307      	strge	r3, [sp, #28]
 8005e40:	9307      	strlt	r3, [sp, #28]
 8005e42:	bfb8      	it	lt
 8005e44:	9204      	strlt	r2, [sp, #16]
 8005e46:	7823      	ldrb	r3, [r4, #0]
 8005e48:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e4a:	d10a      	bne.n	8005e62 <_vfiprintf_r+0x156>
 8005e4c:	7863      	ldrb	r3, [r4, #1]
 8005e4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e50:	d132      	bne.n	8005eb8 <_vfiprintf_r+0x1ac>
 8005e52:	9b03      	ldr	r3, [sp, #12]
 8005e54:	1d1a      	adds	r2, r3, #4
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	9203      	str	r2, [sp, #12]
 8005e5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005e5e:	3402      	adds	r4, #2
 8005e60:	9305      	str	r3, [sp, #20]
 8005e62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005f38 <_vfiprintf_r+0x22c>
 8005e66:	7821      	ldrb	r1, [r4, #0]
 8005e68:	2203      	movs	r2, #3
 8005e6a:	4650      	mov	r0, sl
 8005e6c:	f7fa f9d8 	bl	8000220 <memchr>
 8005e70:	b138      	cbz	r0, 8005e82 <_vfiprintf_r+0x176>
 8005e72:	9b04      	ldr	r3, [sp, #16]
 8005e74:	eba0 000a 	sub.w	r0, r0, sl
 8005e78:	2240      	movs	r2, #64	@ 0x40
 8005e7a:	4082      	lsls	r2, r0
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	3401      	adds	r4, #1
 8005e80:	9304      	str	r3, [sp, #16]
 8005e82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e86:	4829      	ldr	r0, [pc, #164]	@ (8005f2c <_vfiprintf_r+0x220>)
 8005e88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005e8c:	2206      	movs	r2, #6
 8005e8e:	f7fa f9c7 	bl	8000220 <memchr>
 8005e92:	2800      	cmp	r0, #0
 8005e94:	d03f      	beq.n	8005f16 <_vfiprintf_r+0x20a>
 8005e96:	4b26      	ldr	r3, [pc, #152]	@ (8005f30 <_vfiprintf_r+0x224>)
 8005e98:	bb1b      	cbnz	r3, 8005ee2 <_vfiprintf_r+0x1d6>
 8005e9a:	9b03      	ldr	r3, [sp, #12]
 8005e9c:	3307      	adds	r3, #7
 8005e9e:	f023 0307 	bic.w	r3, r3, #7
 8005ea2:	3308      	adds	r3, #8
 8005ea4:	9303      	str	r3, [sp, #12]
 8005ea6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ea8:	443b      	add	r3, r7
 8005eaa:	9309      	str	r3, [sp, #36]	@ 0x24
 8005eac:	e76a      	b.n	8005d84 <_vfiprintf_r+0x78>
 8005eae:	fb0c 3202 	mla	r2, ip, r2, r3
 8005eb2:	460c      	mov	r4, r1
 8005eb4:	2001      	movs	r0, #1
 8005eb6:	e7a8      	b.n	8005e0a <_vfiprintf_r+0xfe>
 8005eb8:	2300      	movs	r3, #0
 8005eba:	3401      	adds	r4, #1
 8005ebc:	9305      	str	r3, [sp, #20]
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	f04f 0c0a 	mov.w	ip, #10
 8005ec4:	4620      	mov	r0, r4
 8005ec6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005eca:	3a30      	subs	r2, #48	@ 0x30
 8005ecc:	2a09      	cmp	r2, #9
 8005ece:	d903      	bls.n	8005ed8 <_vfiprintf_r+0x1cc>
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d0c6      	beq.n	8005e62 <_vfiprintf_r+0x156>
 8005ed4:	9105      	str	r1, [sp, #20]
 8005ed6:	e7c4      	b.n	8005e62 <_vfiprintf_r+0x156>
 8005ed8:	fb0c 2101 	mla	r1, ip, r1, r2
 8005edc:	4604      	mov	r4, r0
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e7f0      	b.n	8005ec4 <_vfiprintf_r+0x1b8>
 8005ee2:	ab03      	add	r3, sp, #12
 8005ee4:	9300      	str	r3, [sp, #0]
 8005ee6:	462a      	mov	r2, r5
 8005ee8:	4b12      	ldr	r3, [pc, #72]	@ (8005f34 <_vfiprintf_r+0x228>)
 8005eea:	a904      	add	r1, sp, #16
 8005eec:	4630      	mov	r0, r6
 8005eee:	f3af 8000 	nop.w
 8005ef2:	4607      	mov	r7, r0
 8005ef4:	1c78      	adds	r0, r7, #1
 8005ef6:	d1d6      	bne.n	8005ea6 <_vfiprintf_r+0x19a>
 8005ef8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005efa:	07d9      	lsls	r1, r3, #31
 8005efc:	d405      	bmi.n	8005f0a <_vfiprintf_r+0x1fe>
 8005efe:	89ab      	ldrh	r3, [r5, #12]
 8005f00:	059a      	lsls	r2, r3, #22
 8005f02:	d402      	bmi.n	8005f0a <_vfiprintf_r+0x1fe>
 8005f04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f06:	f7ff fdd5 	bl	8005ab4 <__retarget_lock_release_recursive>
 8005f0a:	89ab      	ldrh	r3, [r5, #12]
 8005f0c:	065b      	lsls	r3, r3, #25
 8005f0e:	f53f af1f 	bmi.w	8005d50 <_vfiprintf_r+0x44>
 8005f12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f14:	e71e      	b.n	8005d54 <_vfiprintf_r+0x48>
 8005f16:	ab03      	add	r3, sp, #12
 8005f18:	9300      	str	r3, [sp, #0]
 8005f1a:	462a      	mov	r2, r5
 8005f1c:	4b05      	ldr	r3, [pc, #20]	@ (8005f34 <_vfiprintf_r+0x228>)
 8005f1e:	a904      	add	r1, sp, #16
 8005f20:	4630      	mov	r0, r6
 8005f22:	f000 f879 	bl	8006018 <_printf_i>
 8005f26:	e7e4      	b.n	8005ef2 <_vfiprintf_r+0x1e6>
 8005f28:	08006628 	.word	0x08006628
 8005f2c:	08006632 	.word	0x08006632
 8005f30:	00000000 	.word	0x00000000
 8005f34:	08005ce7 	.word	0x08005ce7
 8005f38:	0800662e 	.word	0x0800662e

08005f3c <_printf_common>:
 8005f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f40:	4616      	mov	r6, r2
 8005f42:	4698      	mov	r8, r3
 8005f44:	688a      	ldr	r2, [r1, #8]
 8005f46:	690b      	ldr	r3, [r1, #16]
 8005f48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	bfb8      	it	lt
 8005f50:	4613      	movlt	r3, r2
 8005f52:	6033      	str	r3, [r6, #0]
 8005f54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005f58:	4607      	mov	r7, r0
 8005f5a:	460c      	mov	r4, r1
 8005f5c:	b10a      	cbz	r2, 8005f62 <_printf_common+0x26>
 8005f5e:	3301      	adds	r3, #1
 8005f60:	6033      	str	r3, [r6, #0]
 8005f62:	6823      	ldr	r3, [r4, #0]
 8005f64:	0699      	lsls	r1, r3, #26
 8005f66:	bf42      	ittt	mi
 8005f68:	6833      	ldrmi	r3, [r6, #0]
 8005f6a:	3302      	addmi	r3, #2
 8005f6c:	6033      	strmi	r3, [r6, #0]
 8005f6e:	6825      	ldr	r5, [r4, #0]
 8005f70:	f015 0506 	ands.w	r5, r5, #6
 8005f74:	d106      	bne.n	8005f84 <_printf_common+0x48>
 8005f76:	f104 0a19 	add.w	sl, r4, #25
 8005f7a:	68e3      	ldr	r3, [r4, #12]
 8005f7c:	6832      	ldr	r2, [r6, #0]
 8005f7e:	1a9b      	subs	r3, r3, r2
 8005f80:	42ab      	cmp	r3, r5
 8005f82:	dc26      	bgt.n	8005fd2 <_printf_common+0x96>
 8005f84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005f88:	6822      	ldr	r2, [r4, #0]
 8005f8a:	3b00      	subs	r3, #0
 8005f8c:	bf18      	it	ne
 8005f8e:	2301      	movne	r3, #1
 8005f90:	0692      	lsls	r2, r2, #26
 8005f92:	d42b      	bmi.n	8005fec <_printf_common+0xb0>
 8005f94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f98:	4641      	mov	r1, r8
 8005f9a:	4638      	mov	r0, r7
 8005f9c:	47c8      	blx	r9
 8005f9e:	3001      	adds	r0, #1
 8005fa0:	d01e      	beq.n	8005fe0 <_printf_common+0xa4>
 8005fa2:	6823      	ldr	r3, [r4, #0]
 8005fa4:	6922      	ldr	r2, [r4, #16]
 8005fa6:	f003 0306 	and.w	r3, r3, #6
 8005faa:	2b04      	cmp	r3, #4
 8005fac:	bf02      	ittt	eq
 8005fae:	68e5      	ldreq	r5, [r4, #12]
 8005fb0:	6833      	ldreq	r3, [r6, #0]
 8005fb2:	1aed      	subeq	r5, r5, r3
 8005fb4:	68a3      	ldr	r3, [r4, #8]
 8005fb6:	bf0c      	ite	eq
 8005fb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fbc:	2500      	movne	r5, #0
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	bfc4      	itt	gt
 8005fc2:	1a9b      	subgt	r3, r3, r2
 8005fc4:	18ed      	addgt	r5, r5, r3
 8005fc6:	2600      	movs	r6, #0
 8005fc8:	341a      	adds	r4, #26
 8005fca:	42b5      	cmp	r5, r6
 8005fcc:	d11a      	bne.n	8006004 <_printf_common+0xc8>
 8005fce:	2000      	movs	r0, #0
 8005fd0:	e008      	b.n	8005fe4 <_printf_common+0xa8>
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	4652      	mov	r2, sl
 8005fd6:	4641      	mov	r1, r8
 8005fd8:	4638      	mov	r0, r7
 8005fda:	47c8      	blx	r9
 8005fdc:	3001      	adds	r0, #1
 8005fde:	d103      	bne.n	8005fe8 <_printf_common+0xac>
 8005fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fe8:	3501      	adds	r5, #1
 8005fea:	e7c6      	b.n	8005f7a <_printf_common+0x3e>
 8005fec:	18e1      	adds	r1, r4, r3
 8005fee:	1c5a      	adds	r2, r3, #1
 8005ff0:	2030      	movs	r0, #48	@ 0x30
 8005ff2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005ff6:	4422      	add	r2, r4
 8005ff8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005ffc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006000:	3302      	adds	r3, #2
 8006002:	e7c7      	b.n	8005f94 <_printf_common+0x58>
 8006004:	2301      	movs	r3, #1
 8006006:	4622      	mov	r2, r4
 8006008:	4641      	mov	r1, r8
 800600a:	4638      	mov	r0, r7
 800600c:	47c8      	blx	r9
 800600e:	3001      	adds	r0, #1
 8006010:	d0e6      	beq.n	8005fe0 <_printf_common+0xa4>
 8006012:	3601      	adds	r6, #1
 8006014:	e7d9      	b.n	8005fca <_printf_common+0x8e>
	...

08006018 <_printf_i>:
 8006018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800601c:	7e0f      	ldrb	r7, [r1, #24]
 800601e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006020:	2f78      	cmp	r7, #120	@ 0x78
 8006022:	4691      	mov	r9, r2
 8006024:	4680      	mov	r8, r0
 8006026:	460c      	mov	r4, r1
 8006028:	469a      	mov	sl, r3
 800602a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800602e:	d807      	bhi.n	8006040 <_printf_i+0x28>
 8006030:	2f62      	cmp	r7, #98	@ 0x62
 8006032:	d80a      	bhi.n	800604a <_printf_i+0x32>
 8006034:	2f00      	cmp	r7, #0
 8006036:	f000 80d2 	beq.w	80061de <_printf_i+0x1c6>
 800603a:	2f58      	cmp	r7, #88	@ 0x58
 800603c:	f000 80b9 	beq.w	80061b2 <_printf_i+0x19a>
 8006040:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006044:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006048:	e03a      	b.n	80060c0 <_printf_i+0xa8>
 800604a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800604e:	2b15      	cmp	r3, #21
 8006050:	d8f6      	bhi.n	8006040 <_printf_i+0x28>
 8006052:	a101      	add	r1, pc, #4	@ (adr r1, 8006058 <_printf_i+0x40>)
 8006054:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006058:	080060b1 	.word	0x080060b1
 800605c:	080060c5 	.word	0x080060c5
 8006060:	08006041 	.word	0x08006041
 8006064:	08006041 	.word	0x08006041
 8006068:	08006041 	.word	0x08006041
 800606c:	08006041 	.word	0x08006041
 8006070:	080060c5 	.word	0x080060c5
 8006074:	08006041 	.word	0x08006041
 8006078:	08006041 	.word	0x08006041
 800607c:	08006041 	.word	0x08006041
 8006080:	08006041 	.word	0x08006041
 8006084:	080061c5 	.word	0x080061c5
 8006088:	080060ef 	.word	0x080060ef
 800608c:	0800617f 	.word	0x0800617f
 8006090:	08006041 	.word	0x08006041
 8006094:	08006041 	.word	0x08006041
 8006098:	080061e7 	.word	0x080061e7
 800609c:	08006041 	.word	0x08006041
 80060a0:	080060ef 	.word	0x080060ef
 80060a4:	08006041 	.word	0x08006041
 80060a8:	08006041 	.word	0x08006041
 80060ac:	08006187 	.word	0x08006187
 80060b0:	6833      	ldr	r3, [r6, #0]
 80060b2:	1d1a      	adds	r2, r3, #4
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	6032      	str	r2, [r6, #0]
 80060b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80060c0:	2301      	movs	r3, #1
 80060c2:	e09d      	b.n	8006200 <_printf_i+0x1e8>
 80060c4:	6833      	ldr	r3, [r6, #0]
 80060c6:	6820      	ldr	r0, [r4, #0]
 80060c8:	1d19      	adds	r1, r3, #4
 80060ca:	6031      	str	r1, [r6, #0]
 80060cc:	0606      	lsls	r6, r0, #24
 80060ce:	d501      	bpl.n	80060d4 <_printf_i+0xbc>
 80060d0:	681d      	ldr	r5, [r3, #0]
 80060d2:	e003      	b.n	80060dc <_printf_i+0xc4>
 80060d4:	0645      	lsls	r5, r0, #25
 80060d6:	d5fb      	bpl.n	80060d0 <_printf_i+0xb8>
 80060d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80060dc:	2d00      	cmp	r5, #0
 80060de:	da03      	bge.n	80060e8 <_printf_i+0xd0>
 80060e0:	232d      	movs	r3, #45	@ 0x2d
 80060e2:	426d      	negs	r5, r5
 80060e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060e8:	4859      	ldr	r0, [pc, #356]	@ (8006250 <_printf_i+0x238>)
 80060ea:	230a      	movs	r3, #10
 80060ec:	e011      	b.n	8006112 <_printf_i+0xfa>
 80060ee:	6821      	ldr	r1, [r4, #0]
 80060f0:	6833      	ldr	r3, [r6, #0]
 80060f2:	0608      	lsls	r0, r1, #24
 80060f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80060f8:	d402      	bmi.n	8006100 <_printf_i+0xe8>
 80060fa:	0649      	lsls	r1, r1, #25
 80060fc:	bf48      	it	mi
 80060fe:	b2ad      	uxthmi	r5, r5
 8006100:	2f6f      	cmp	r7, #111	@ 0x6f
 8006102:	4853      	ldr	r0, [pc, #332]	@ (8006250 <_printf_i+0x238>)
 8006104:	6033      	str	r3, [r6, #0]
 8006106:	bf14      	ite	ne
 8006108:	230a      	movne	r3, #10
 800610a:	2308      	moveq	r3, #8
 800610c:	2100      	movs	r1, #0
 800610e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006112:	6866      	ldr	r6, [r4, #4]
 8006114:	60a6      	str	r6, [r4, #8]
 8006116:	2e00      	cmp	r6, #0
 8006118:	bfa2      	ittt	ge
 800611a:	6821      	ldrge	r1, [r4, #0]
 800611c:	f021 0104 	bicge.w	r1, r1, #4
 8006120:	6021      	strge	r1, [r4, #0]
 8006122:	b90d      	cbnz	r5, 8006128 <_printf_i+0x110>
 8006124:	2e00      	cmp	r6, #0
 8006126:	d04b      	beq.n	80061c0 <_printf_i+0x1a8>
 8006128:	4616      	mov	r6, r2
 800612a:	fbb5 f1f3 	udiv	r1, r5, r3
 800612e:	fb03 5711 	mls	r7, r3, r1, r5
 8006132:	5dc7      	ldrb	r7, [r0, r7]
 8006134:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006138:	462f      	mov	r7, r5
 800613a:	42bb      	cmp	r3, r7
 800613c:	460d      	mov	r5, r1
 800613e:	d9f4      	bls.n	800612a <_printf_i+0x112>
 8006140:	2b08      	cmp	r3, #8
 8006142:	d10b      	bne.n	800615c <_printf_i+0x144>
 8006144:	6823      	ldr	r3, [r4, #0]
 8006146:	07df      	lsls	r7, r3, #31
 8006148:	d508      	bpl.n	800615c <_printf_i+0x144>
 800614a:	6923      	ldr	r3, [r4, #16]
 800614c:	6861      	ldr	r1, [r4, #4]
 800614e:	4299      	cmp	r1, r3
 8006150:	bfde      	ittt	le
 8006152:	2330      	movle	r3, #48	@ 0x30
 8006154:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006158:	f106 36ff 	addle.w	r6, r6, #4294967295
 800615c:	1b92      	subs	r2, r2, r6
 800615e:	6122      	str	r2, [r4, #16]
 8006160:	f8cd a000 	str.w	sl, [sp]
 8006164:	464b      	mov	r3, r9
 8006166:	aa03      	add	r2, sp, #12
 8006168:	4621      	mov	r1, r4
 800616a:	4640      	mov	r0, r8
 800616c:	f7ff fee6 	bl	8005f3c <_printf_common>
 8006170:	3001      	adds	r0, #1
 8006172:	d14a      	bne.n	800620a <_printf_i+0x1f2>
 8006174:	f04f 30ff 	mov.w	r0, #4294967295
 8006178:	b004      	add	sp, #16
 800617a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800617e:	6823      	ldr	r3, [r4, #0]
 8006180:	f043 0320 	orr.w	r3, r3, #32
 8006184:	6023      	str	r3, [r4, #0]
 8006186:	4833      	ldr	r0, [pc, #204]	@ (8006254 <_printf_i+0x23c>)
 8006188:	2778      	movs	r7, #120	@ 0x78
 800618a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800618e:	6823      	ldr	r3, [r4, #0]
 8006190:	6831      	ldr	r1, [r6, #0]
 8006192:	061f      	lsls	r7, r3, #24
 8006194:	f851 5b04 	ldr.w	r5, [r1], #4
 8006198:	d402      	bmi.n	80061a0 <_printf_i+0x188>
 800619a:	065f      	lsls	r7, r3, #25
 800619c:	bf48      	it	mi
 800619e:	b2ad      	uxthmi	r5, r5
 80061a0:	6031      	str	r1, [r6, #0]
 80061a2:	07d9      	lsls	r1, r3, #31
 80061a4:	bf44      	itt	mi
 80061a6:	f043 0320 	orrmi.w	r3, r3, #32
 80061aa:	6023      	strmi	r3, [r4, #0]
 80061ac:	b11d      	cbz	r5, 80061b6 <_printf_i+0x19e>
 80061ae:	2310      	movs	r3, #16
 80061b0:	e7ac      	b.n	800610c <_printf_i+0xf4>
 80061b2:	4827      	ldr	r0, [pc, #156]	@ (8006250 <_printf_i+0x238>)
 80061b4:	e7e9      	b.n	800618a <_printf_i+0x172>
 80061b6:	6823      	ldr	r3, [r4, #0]
 80061b8:	f023 0320 	bic.w	r3, r3, #32
 80061bc:	6023      	str	r3, [r4, #0]
 80061be:	e7f6      	b.n	80061ae <_printf_i+0x196>
 80061c0:	4616      	mov	r6, r2
 80061c2:	e7bd      	b.n	8006140 <_printf_i+0x128>
 80061c4:	6833      	ldr	r3, [r6, #0]
 80061c6:	6825      	ldr	r5, [r4, #0]
 80061c8:	6961      	ldr	r1, [r4, #20]
 80061ca:	1d18      	adds	r0, r3, #4
 80061cc:	6030      	str	r0, [r6, #0]
 80061ce:	062e      	lsls	r6, r5, #24
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	d501      	bpl.n	80061d8 <_printf_i+0x1c0>
 80061d4:	6019      	str	r1, [r3, #0]
 80061d6:	e002      	b.n	80061de <_printf_i+0x1c6>
 80061d8:	0668      	lsls	r0, r5, #25
 80061da:	d5fb      	bpl.n	80061d4 <_printf_i+0x1bc>
 80061dc:	8019      	strh	r1, [r3, #0]
 80061de:	2300      	movs	r3, #0
 80061e0:	6123      	str	r3, [r4, #16]
 80061e2:	4616      	mov	r6, r2
 80061e4:	e7bc      	b.n	8006160 <_printf_i+0x148>
 80061e6:	6833      	ldr	r3, [r6, #0]
 80061e8:	1d1a      	adds	r2, r3, #4
 80061ea:	6032      	str	r2, [r6, #0]
 80061ec:	681e      	ldr	r6, [r3, #0]
 80061ee:	6862      	ldr	r2, [r4, #4]
 80061f0:	2100      	movs	r1, #0
 80061f2:	4630      	mov	r0, r6
 80061f4:	f7fa f814 	bl	8000220 <memchr>
 80061f8:	b108      	cbz	r0, 80061fe <_printf_i+0x1e6>
 80061fa:	1b80      	subs	r0, r0, r6
 80061fc:	6060      	str	r0, [r4, #4]
 80061fe:	6863      	ldr	r3, [r4, #4]
 8006200:	6123      	str	r3, [r4, #16]
 8006202:	2300      	movs	r3, #0
 8006204:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006208:	e7aa      	b.n	8006160 <_printf_i+0x148>
 800620a:	6923      	ldr	r3, [r4, #16]
 800620c:	4632      	mov	r2, r6
 800620e:	4649      	mov	r1, r9
 8006210:	4640      	mov	r0, r8
 8006212:	47d0      	blx	sl
 8006214:	3001      	adds	r0, #1
 8006216:	d0ad      	beq.n	8006174 <_printf_i+0x15c>
 8006218:	6823      	ldr	r3, [r4, #0]
 800621a:	079b      	lsls	r3, r3, #30
 800621c:	d413      	bmi.n	8006246 <_printf_i+0x22e>
 800621e:	68e0      	ldr	r0, [r4, #12]
 8006220:	9b03      	ldr	r3, [sp, #12]
 8006222:	4298      	cmp	r0, r3
 8006224:	bfb8      	it	lt
 8006226:	4618      	movlt	r0, r3
 8006228:	e7a6      	b.n	8006178 <_printf_i+0x160>
 800622a:	2301      	movs	r3, #1
 800622c:	4632      	mov	r2, r6
 800622e:	4649      	mov	r1, r9
 8006230:	4640      	mov	r0, r8
 8006232:	47d0      	blx	sl
 8006234:	3001      	adds	r0, #1
 8006236:	d09d      	beq.n	8006174 <_printf_i+0x15c>
 8006238:	3501      	adds	r5, #1
 800623a:	68e3      	ldr	r3, [r4, #12]
 800623c:	9903      	ldr	r1, [sp, #12]
 800623e:	1a5b      	subs	r3, r3, r1
 8006240:	42ab      	cmp	r3, r5
 8006242:	dcf2      	bgt.n	800622a <_printf_i+0x212>
 8006244:	e7eb      	b.n	800621e <_printf_i+0x206>
 8006246:	2500      	movs	r5, #0
 8006248:	f104 0619 	add.w	r6, r4, #25
 800624c:	e7f5      	b.n	800623a <_printf_i+0x222>
 800624e:	bf00      	nop
 8006250:	08006639 	.word	0x08006639
 8006254:	0800664a 	.word	0x0800664a

08006258 <__sflush_r>:
 8006258:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800625c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006260:	0716      	lsls	r6, r2, #28
 8006262:	4605      	mov	r5, r0
 8006264:	460c      	mov	r4, r1
 8006266:	d454      	bmi.n	8006312 <__sflush_r+0xba>
 8006268:	684b      	ldr	r3, [r1, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	dc02      	bgt.n	8006274 <__sflush_r+0x1c>
 800626e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006270:	2b00      	cmp	r3, #0
 8006272:	dd48      	ble.n	8006306 <__sflush_r+0xae>
 8006274:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006276:	2e00      	cmp	r6, #0
 8006278:	d045      	beq.n	8006306 <__sflush_r+0xae>
 800627a:	2300      	movs	r3, #0
 800627c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006280:	682f      	ldr	r7, [r5, #0]
 8006282:	6a21      	ldr	r1, [r4, #32]
 8006284:	602b      	str	r3, [r5, #0]
 8006286:	d030      	beq.n	80062ea <__sflush_r+0x92>
 8006288:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800628a:	89a3      	ldrh	r3, [r4, #12]
 800628c:	0759      	lsls	r1, r3, #29
 800628e:	d505      	bpl.n	800629c <__sflush_r+0x44>
 8006290:	6863      	ldr	r3, [r4, #4]
 8006292:	1ad2      	subs	r2, r2, r3
 8006294:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006296:	b10b      	cbz	r3, 800629c <__sflush_r+0x44>
 8006298:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800629a:	1ad2      	subs	r2, r2, r3
 800629c:	2300      	movs	r3, #0
 800629e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80062a0:	6a21      	ldr	r1, [r4, #32]
 80062a2:	4628      	mov	r0, r5
 80062a4:	47b0      	blx	r6
 80062a6:	1c43      	adds	r3, r0, #1
 80062a8:	89a3      	ldrh	r3, [r4, #12]
 80062aa:	d106      	bne.n	80062ba <__sflush_r+0x62>
 80062ac:	6829      	ldr	r1, [r5, #0]
 80062ae:	291d      	cmp	r1, #29
 80062b0:	d82b      	bhi.n	800630a <__sflush_r+0xb2>
 80062b2:	4a2a      	ldr	r2, [pc, #168]	@ (800635c <__sflush_r+0x104>)
 80062b4:	410a      	asrs	r2, r1
 80062b6:	07d6      	lsls	r6, r2, #31
 80062b8:	d427      	bmi.n	800630a <__sflush_r+0xb2>
 80062ba:	2200      	movs	r2, #0
 80062bc:	6062      	str	r2, [r4, #4]
 80062be:	04d9      	lsls	r1, r3, #19
 80062c0:	6922      	ldr	r2, [r4, #16]
 80062c2:	6022      	str	r2, [r4, #0]
 80062c4:	d504      	bpl.n	80062d0 <__sflush_r+0x78>
 80062c6:	1c42      	adds	r2, r0, #1
 80062c8:	d101      	bne.n	80062ce <__sflush_r+0x76>
 80062ca:	682b      	ldr	r3, [r5, #0]
 80062cc:	b903      	cbnz	r3, 80062d0 <__sflush_r+0x78>
 80062ce:	6560      	str	r0, [r4, #84]	@ 0x54
 80062d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80062d2:	602f      	str	r7, [r5, #0]
 80062d4:	b1b9      	cbz	r1, 8006306 <__sflush_r+0xae>
 80062d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80062da:	4299      	cmp	r1, r3
 80062dc:	d002      	beq.n	80062e4 <__sflush_r+0x8c>
 80062de:	4628      	mov	r0, r5
 80062e0:	f7ff fbea 	bl	8005ab8 <_free_r>
 80062e4:	2300      	movs	r3, #0
 80062e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80062e8:	e00d      	b.n	8006306 <__sflush_r+0xae>
 80062ea:	2301      	movs	r3, #1
 80062ec:	4628      	mov	r0, r5
 80062ee:	47b0      	blx	r6
 80062f0:	4602      	mov	r2, r0
 80062f2:	1c50      	adds	r0, r2, #1
 80062f4:	d1c9      	bne.n	800628a <__sflush_r+0x32>
 80062f6:	682b      	ldr	r3, [r5, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d0c6      	beq.n	800628a <__sflush_r+0x32>
 80062fc:	2b1d      	cmp	r3, #29
 80062fe:	d001      	beq.n	8006304 <__sflush_r+0xac>
 8006300:	2b16      	cmp	r3, #22
 8006302:	d11e      	bne.n	8006342 <__sflush_r+0xea>
 8006304:	602f      	str	r7, [r5, #0]
 8006306:	2000      	movs	r0, #0
 8006308:	e022      	b.n	8006350 <__sflush_r+0xf8>
 800630a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800630e:	b21b      	sxth	r3, r3
 8006310:	e01b      	b.n	800634a <__sflush_r+0xf2>
 8006312:	690f      	ldr	r7, [r1, #16]
 8006314:	2f00      	cmp	r7, #0
 8006316:	d0f6      	beq.n	8006306 <__sflush_r+0xae>
 8006318:	0793      	lsls	r3, r2, #30
 800631a:	680e      	ldr	r6, [r1, #0]
 800631c:	bf08      	it	eq
 800631e:	694b      	ldreq	r3, [r1, #20]
 8006320:	600f      	str	r7, [r1, #0]
 8006322:	bf18      	it	ne
 8006324:	2300      	movne	r3, #0
 8006326:	eba6 0807 	sub.w	r8, r6, r7
 800632a:	608b      	str	r3, [r1, #8]
 800632c:	f1b8 0f00 	cmp.w	r8, #0
 8006330:	dde9      	ble.n	8006306 <__sflush_r+0xae>
 8006332:	6a21      	ldr	r1, [r4, #32]
 8006334:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006336:	4643      	mov	r3, r8
 8006338:	463a      	mov	r2, r7
 800633a:	4628      	mov	r0, r5
 800633c:	47b0      	blx	r6
 800633e:	2800      	cmp	r0, #0
 8006340:	dc08      	bgt.n	8006354 <__sflush_r+0xfc>
 8006342:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006346:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800634a:	81a3      	strh	r3, [r4, #12]
 800634c:	f04f 30ff 	mov.w	r0, #4294967295
 8006350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006354:	4407      	add	r7, r0
 8006356:	eba8 0800 	sub.w	r8, r8, r0
 800635a:	e7e7      	b.n	800632c <__sflush_r+0xd4>
 800635c:	dfbffffe 	.word	0xdfbffffe

08006360 <_fflush_r>:
 8006360:	b538      	push	{r3, r4, r5, lr}
 8006362:	690b      	ldr	r3, [r1, #16]
 8006364:	4605      	mov	r5, r0
 8006366:	460c      	mov	r4, r1
 8006368:	b913      	cbnz	r3, 8006370 <_fflush_r+0x10>
 800636a:	2500      	movs	r5, #0
 800636c:	4628      	mov	r0, r5
 800636e:	bd38      	pop	{r3, r4, r5, pc}
 8006370:	b118      	cbz	r0, 800637a <_fflush_r+0x1a>
 8006372:	6a03      	ldr	r3, [r0, #32]
 8006374:	b90b      	cbnz	r3, 800637a <_fflush_r+0x1a>
 8006376:	f7ff f8e9 	bl	800554c <__sinit>
 800637a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d0f3      	beq.n	800636a <_fflush_r+0xa>
 8006382:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006384:	07d0      	lsls	r0, r2, #31
 8006386:	d404      	bmi.n	8006392 <_fflush_r+0x32>
 8006388:	0599      	lsls	r1, r3, #22
 800638a:	d402      	bmi.n	8006392 <_fflush_r+0x32>
 800638c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800638e:	f7ff fb90 	bl	8005ab2 <__retarget_lock_acquire_recursive>
 8006392:	4628      	mov	r0, r5
 8006394:	4621      	mov	r1, r4
 8006396:	f7ff ff5f 	bl	8006258 <__sflush_r>
 800639a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800639c:	07da      	lsls	r2, r3, #31
 800639e:	4605      	mov	r5, r0
 80063a0:	d4e4      	bmi.n	800636c <_fflush_r+0xc>
 80063a2:	89a3      	ldrh	r3, [r4, #12]
 80063a4:	059b      	lsls	r3, r3, #22
 80063a6:	d4e1      	bmi.n	800636c <_fflush_r+0xc>
 80063a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063aa:	f7ff fb83 	bl	8005ab4 <__retarget_lock_release_recursive>
 80063ae:	e7dd      	b.n	800636c <_fflush_r+0xc>

080063b0 <__swhatbuf_r>:
 80063b0:	b570      	push	{r4, r5, r6, lr}
 80063b2:	460c      	mov	r4, r1
 80063b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063b8:	2900      	cmp	r1, #0
 80063ba:	b096      	sub	sp, #88	@ 0x58
 80063bc:	4615      	mov	r5, r2
 80063be:	461e      	mov	r6, r3
 80063c0:	da0d      	bge.n	80063de <__swhatbuf_r+0x2e>
 80063c2:	89a3      	ldrh	r3, [r4, #12]
 80063c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80063c8:	f04f 0100 	mov.w	r1, #0
 80063cc:	bf14      	ite	ne
 80063ce:	2340      	movne	r3, #64	@ 0x40
 80063d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80063d4:	2000      	movs	r0, #0
 80063d6:	6031      	str	r1, [r6, #0]
 80063d8:	602b      	str	r3, [r5, #0]
 80063da:	b016      	add	sp, #88	@ 0x58
 80063dc:	bd70      	pop	{r4, r5, r6, pc}
 80063de:	466a      	mov	r2, sp
 80063e0:	f000 f848 	bl	8006474 <_fstat_r>
 80063e4:	2800      	cmp	r0, #0
 80063e6:	dbec      	blt.n	80063c2 <__swhatbuf_r+0x12>
 80063e8:	9901      	ldr	r1, [sp, #4]
 80063ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80063ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80063f2:	4259      	negs	r1, r3
 80063f4:	4159      	adcs	r1, r3
 80063f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80063fa:	e7eb      	b.n	80063d4 <__swhatbuf_r+0x24>

080063fc <__smakebuf_r>:
 80063fc:	898b      	ldrh	r3, [r1, #12]
 80063fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006400:	079d      	lsls	r5, r3, #30
 8006402:	4606      	mov	r6, r0
 8006404:	460c      	mov	r4, r1
 8006406:	d507      	bpl.n	8006418 <__smakebuf_r+0x1c>
 8006408:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800640c:	6023      	str	r3, [r4, #0]
 800640e:	6123      	str	r3, [r4, #16]
 8006410:	2301      	movs	r3, #1
 8006412:	6163      	str	r3, [r4, #20]
 8006414:	b003      	add	sp, #12
 8006416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006418:	ab01      	add	r3, sp, #4
 800641a:	466a      	mov	r2, sp
 800641c:	f7ff ffc8 	bl	80063b0 <__swhatbuf_r>
 8006420:	9f00      	ldr	r7, [sp, #0]
 8006422:	4605      	mov	r5, r0
 8006424:	4639      	mov	r1, r7
 8006426:	4630      	mov	r0, r6
 8006428:	f7ff fbba 	bl	8005ba0 <_malloc_r>
 800642c:	b948      	cbnz	r0, 8006442 <__smakebuf_r+0x46>
 800642e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006432:	059a      	lsls	r2, r3, #22
 8006434:	d4ee      	bmi.n	8006414 <__smakebuf_r+0x18>
 8006436:	f023 0303 	bic.w	r3, r3, #3
 800643a:	f043 0302 	orr.w	r3, r3, #2
 800643e:	81a3      	strh	r3, [r4, #12]
 8006440:	e7e2      	b.n	8006408 <__smakebuf_r+0xc>
 8006442:	89a3      	ldrh	r3, [r4, #12]
 8006444:	6020      	str	r0, [r4, #0]
 8006446:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800644a:	81a3      	strh	r3, [r4, #12]
 800644c:	9b01      	ldr	r3, [sp, #4]
 800644e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006452:	b15b      	cbz	r3, 800646c <__smakebuf_r+0x70>
 8006454:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006458:	4630      	mov	r0, r6
 800645a:	f000 f81d 	bl	8006498 <_isatty_r>
 800645e:	b128      	cbz	r0, 800646c <__smakebuf_r+0x70>
 8006460:	89a3      	ldrh	r3, [r4, #12]
 8006462:	f023 0303 	bic.w	r3, r3, #3
 8006466:	f043 0301 	orr.w	r3, r3, #1
 800646a:	81a3      	strh	r3, [r4, #12]
 800646c:	89a3      	ldrh	r3, [r4, #12]
 800646e:	431d      	orrs	r5, r3
 8006470:	81a5      	strh	r5, [r4, #12]
 8006472:	e7cf      	b.n	8006414 <__smakebuf_r+0x18>

08006474 <_fstat_r>:
 8006474:	b538      	push	{r3, r4, r5, lr}
 8006476:	4d07      	ldr	r5, [pc, #28]	@ (8006494 <_fstat_r+0x20>)
 8006478:	2300      	movs	r3, #0
 800647a:	4604      	mov	r4, r0
 800647c:	4608      	mov	r0, r1
 800647e:	4611      	mov	r1, r2
 8006480:	602b      	str	r3, [r5, #0]
 8006482:	f7fa fde2 	bl	800104a <_fstat>
 8006486:	1c43      	adds	r3, r0, #1
 8006488:	d102      	bne.n	8006490 <_fstat_r+0x1c>
 800648a:	682b      	ldr	r3, [r5, #0]
 800648c:	b103      	cbz	r3, 8006490 <_fstat_r+0x1c>
 800648e:	6023      	str	r3, [r4, #0]
 8006490:	bd38      	pop	{r3, r4, r5, pc}
 8006492:	bf00      	nop
 8006494:	2000039c 	.word	0x2000039c

08006498 <_isatty_r>:
 8006498:	b538      	push	{r3, r4, r5, lr}
 800649a:	4d06      	ldr	r5, [pc, #24]	@ (80064b4 <_isatty_r+0x1c>)
 800649c:	2300      	movs	r3, #0
 800649e:	4604      	mov	r4, r0
 80064a0:	4608      	mov	r0, r1
 80064a2:	602b      	str	r3, [r5, #0]
 80064a4:	f7fa fde1 	bl	800106a <_isatty>
 80064a8:	1c43      	adds	r3, r0, #1
 80064aa:	d102      	bne.n	80064b2 <_isatty_r+0x1a>
 80064ac:	682b      	ldr	r3, [r5, #0]
 80064ae:	b103      	cbz	r3, 80064b2 <_isatty_r+0x1a>
 80064b0:	6023      	str	r3, [r4, #0]
 80064b2:	bd38      	pop	{r3, r4, r5, pc}
 80064b4:	2000039c 	.word	0x2000039c

080064b8 <_sbrk_r>:
 80064b8:	b538      	push	{r3, r4, r5, lr}
 80064ba:	4d06      	ldr	r5, [pc, #24]	@ (80064d4 <_sbrk_r+0x1c>)
 80064bc:	2300      	movs	r3, #0
 80064be:	4604      	mov	r4, r0
 80064c0:	4608      	mov	r0, r1
 80064c2:	602b      	str	r3, [r5, #0]
 80064c4:	f7fa fdea 	bl	800109c <_sbrk>
 80064c8:	1c43      	adds	r3, r0, #1
 80064ca:	d102      	bne.n	80064d2 <_sbrk_r+0x1a>
 80064cc:	682b      	ldr	r3, [r5, #0]
 80064ce:	b103      	cbz	r3, 80064d2 <_sbrk_r+0x1a>
 80064d0:	6023      	str	r3, [r4, #0]
 80064d2:	bd38      	pop	{r3, r4, r5, pc}
 80064d4:	2000039c 	.word	0x2000039c

080064d8 <_init>:
 80064d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064da:	bf00      	nop
 80064dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064de:	bc08      	pop	{r3}
 80064e0:	469e      	mov	lr, r3
 80064e2:	4770      	bx	lr

080064e4 <_fini>:
 80064e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064e6:	bf00      	nop
 80064e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ea:	bc08      	pop	{r3}
 80064ec:	469e      	mov	lr, r3
 80064ee:	4770      	bx	lr
